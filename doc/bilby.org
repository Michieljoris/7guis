#+FILETAGS: 
#+TAGS: release7(r)
* hckrnews links
http://quotes.cat-v.org/programming/
http://laputan.org/
* PROBLEMS
** sente csrf fix
Fix by updating sente to 1.14.x
https://github.com/ptaoussanis/sente/blob/master/CHANGELOG.md
** build
https://clojure.org/guides/deps_and_cli
https://github.com/clojure/tools.deps.alpha/wiki/Tools

** Scaling!!
Multithreading question
https://github.com/ptaoussanis/sente/issues/227
https://github.com/ptaoussanis/sente/issues/265
https://github.com/ptaoussanis/sente/issues/265
Process each group parallel. The data doesn't intersect so that's no problem.
And one group's IO blocking won't affect other groups. Withing a group, a user
can only send a mutation till ack has come back from last one. So that'll
prevent the one user from saturating the server. A group can have maybe max 100
users? Every request should not take longer than 100ms. So that's 10 requests
per second. If every user makes 1 update per 10 seconds we can have 100 users
online at the same time. But in practice my guess is this will be much less. So
1000 users might still be ok. But we should make sure that every update takes
not more than 100ms!!!! If it does, or it might, we need to do the work in a thread!!!


* DC-meetings
** DONE USMedia landing page pres
   CLOSED: [2018-09-10 Mon 11:08] SCHEDULED: <2018-09-07 Fri 12:00>
   :LOGBOOK:
   - State "DONE"       from              [2018-09-10 Mon 11:08]
   :END:
** DONE release process meeting with Kristian
   CLOSED: [2018-09-10 Mon 11:37] SCHEDULED: <2018-09-07 Fri 13:00>
   :LOGBOOK:
   - State "DONE"       from              [2018-09-10 Mon 11:37]
   :END:
** DONE Next team dev meeting with Kristian
   CLOSED: [2018-10-11 Thu 16:29] SCHEDULED: <2018-10-08 Mon 10:00>
   :LOGBOOK:
   - State "DONE"       from              [2018-10-11 Thu 16:29]
   :END:
** DONE babs meeting
   CLOSED: [2018-10-08 Mon 15:06] SCHEDULED: <2018-10-05 Fri 14:00-16:00>
   - State "DONE"       from              [2018-10-08 Mon 15:06]
** DONE [#B] Meeting with Eddy and RUD about data ware housing
   CLOSED: [2018-10-08 Mon 15:06] SCHEDULED: <2018-10-03 Wed 13:00-15:00>
   - State "DONE"       from              [2018-10-08 Mon 15:06]
** DONE babs meeting
   CLOSED: [2018-09-24 Mon 16:24] SCHEDULED: <2018-09-24 Mon 14:00-16:00>
   :LOGBOOK:
   - State "DONE"       from              [2018-09-24 Mon 16:24]
   :END:

** DONE bilby workshop/question hour
   CLOSED: [2018-09-25 Tue 10:11] SCHEDULED: <2018-09-12 Wed 10:00>
   :LOGBOOK:
   - State "DONE"       from              [2018-09-25 Tue 10:11]
   :END:
   
** DONE babs interview 1
   SCHEDULED: <2018-11-19 Mon 13:00-13:30>
Stadsplateau 1, Utrecht

** DONE babs interview 2
   CLOSED: [2018-11-15 Thu 10:46] SCHEDULED: <2018-11-14 Wed 14:30-15:00>
   

   - State "DONE"       from              [2018-11-15 Thu 10:46]
* merge with release branch!!!: elastic, templates. bilby.om.next
  
* DONE fix input of number like values on ipad/iphone.
 Made chin issue
 wip fixing input type on ios for numbers

Problem is that ios formats the value of an input element itself if type
is 'number'. And if there's a comma in the number (for thousands, or for
decimals) input becomes blank. Or ignored. Solution is to set type to 'text',
but means input method becomes a full keyboard, iso just numbers. Alternative is
to not format numbers at all on IOS. And just let IOS format them. And set the
types properly. For currency and percentage, similar problem. I would like to
display these number like types with commas, currency symbols, percentage symbol
etc. But won't have them if input type is number. Which is needed to bring up
number keyboard by default on ios.

Solution might be to display value formatted but on click to display plain
number in input element. Or to not format number at all. Which is doable for
numbers and percentage, not so much for currencies.

Quick hack would be set input type to 'text', but this would mean users on
ipad/iphones would have to change keyboard to select numbers every time they
want to input or edit a value.

There's a prop called input-method, but unfortunately that's not implemented in
most browsers. It lets you select the keyboard to use to input values.

At the moment wifi is not connected properly to server the DC site from local,
so testing is a bit hard. Will take up again when at office.

2 files changed, 8 insertions(+), 5 deletions(-)
ember-cli/frontend/app/mixins-shared/value-open-type.js          | 4 +++-
.../frontend/app/pods/components/value-open-input/component.js   | 9 +++++----

modified   ember-cli/frontend/app/mixins-shared/value-open-type.js
@@ -198,6 +198,7 @@ function formatPercentage(string, options) {
 }

 function _formatNumber(number, locale, plainNumber) {
+  // return number;
   number = "" + number;
   var thousand = '.', decimal = ',';
   if (~(commaOrDot.dot.indexOf(locale))) {
@@ -329,8 +330,9 @@ function parseValue(string, type, options) {
 }

 function format(string, type, options) {
+  options = options || {};
   var fn = formatFn[type];
-  return fn ? fn(string, options || {}) : string;
+  return fn ? fn(string, options) : string;
 }

 var ValueOpenTypeMixin = Ember.Mixin.create({
modified   ember-cli/frontend/app/pods/components/value-open-input/component.js
@@ -62,18 +62,19 @@ var ValueOpenInputComponent = Ember.Component.extend(
     //input type can't be number for currency and percentage because formatted
     //value won't be accepted so we use inputmode, however it's not yet
     //implemented in current browsers:-(
-    //See hack in next method for now.
     inputMode: function() {
-      if (this.get('isNumberLikeType')) { return 'numeric'; }
+      if (this.get('isNumberLikeType')) { return 'decimal'; }
       if (this.get('isTextLikeType')) { return 'text'; }
       return this.get('type'); //email, url, time, date
     }.property(),

     inputType: function() {
       if (this.get('isIpadOrIphone')) {
-        if (this.isIpad && this.get('isNumberLikeType')) { return 'tel'; } //hack: this will give us a number keypad on ipad
+        if (this.get('type') === 'tel') { return 'tel'; }
+        if (this.get('type') === 'number') { return 'text'; }
+        if (this.get('isNumberLikeType')) { return 'text'; }
         if (this.get('isTextLikeType')) { return 'text'; }
-        return this.get('type'); //email, url, time, date
+        return this.get('type'); //email, url, time, date, tel
       }
       else {
         return 'text'; //currency, percentage, code, number.
* DONE Make chin github issues
** ON GITHUB add option to fold open all info sections of answers on checklist, and/or on overview
  So someone can filter on NO and scroll through and read all comments without
  having to open them one by one. Request from vodafone guy
** ON GITHUB Add status to calendar backlog checklist events.
On the right, same way it looks on checklist rows. Request from Eddy
** ON GITHUB link to new admin from dc app


** ON GITHUB tellen van aantal onderliggende dossiers
** ON GITHUB subdossiertype tonen in het bovenliggende dossier
** ON GITHUB Show location in grandchild dossier in DC on index page
** ON GITHUB invitations save button also sends invitation, is a bit confusing.
** ON GITHUB PR for chinchilla to change translation type to longer text?
** ON GITHUB we would like to have a counter in dossiers that says how many checklists
it contains (a default dossierfield that you can add in admin)
** ON GITHUB Make Github Issue on chinchilla, info button should be blue when there's info from tent.
Also show that tab directly then, not the empty ones first

https://github.com/digitalechecklisten/chinchilla/issues/1610
checklist date rename and sorting by it not working in frontend


* More chin github issues
**  make chin issue about saving remarks while not logged in
It's perfectly possible to keep saving remarks while being actually logged out. The app does not indicate that your actually not logged in. Not until you click ja/nee/nvt or navigate somewhere else do you get chucked to the login screen. That shouldn't be like that.
In the mean time all those remarks you thought you had saved to the server are lost.
Also remove opslaan button when saved!!!
** LUCAS Make 6 sliders in pdf options for yes, no, nvt, no-value, value-open, no-value-open
  Then use this to select answers to include in questions-and-answers black
** LUCAS history button for dossier fields
** logo on overzicht is too big!!

** pop open task when answer is no!!
** And pop open remark when answer is no!! or nvt
** Use DC as a CMS
See tmp/starter repo
Running locally, but not heroku, error, dc-docs is the app name


   I was thinking, if we have the tree on the left with the the complete dossier-checklist tree structure, and we give these dossiers tags, and let's say we filter on 'feature'. We get all the dossiers that relate to this. This includes dossiers and checklist relating to deploy, review, beta stages, review stages etc. But if we make a habit of adding a 'documentation' dossier. And we tag it as such. And this doc dossier has just one block, the fields, and only one field called 'docs'.  We can make a special dossier field type that fills the screen, so no label on left.
If we then filter also on the 'doc' tag, as well as on 'feature'. We get a beautiful content outline on the left of all the features, and when clicking on them the text on the right. And by using nested dossiers the outline on the left becomes a nested documentation structure content outline.
You could add other tags such as 'technical-doc', 'sales-doc', 'internal-doc', 'customer-facing-doc'. Or different fields in the doc dossiers relating the various types of docs. And some mechanism to hide these fields if you're not interested in them.
And some kind of export functionality to print a pdf or html dump of all the data you've filtered for, or export a bunch of text files.
So we need a dossier field type that lets us type formatted text. Markdown perhaps, or a wysiwyg editor.
If we have a history button that retrieves previous values from history or eventstore tables we have versioned docs of a sort.
Tbh I think a git repo of simple text files is better, served by jekyll or some other static website builder, you get all of the above including the option to do PR's. But only devs can use this. And of course we're not eating our own dog food then. Anybody in DC is able to create/edit/update/comment on dossiers.
In time this can be exported to lawcat. For us and/or clients.
And we'd be able to use this pretty soon. We need the tree on the left. We need tags for dossiers. We need a styled dossier field type.
And of course this whole thing should've gone into a dossier called 'Ideas' straight away...


** TODO more sophisticated about dialog in DC app
So with logo and standard contact details etc text.
* DONE review jacob's undelete PR
  CLOSED: [2018-09-14 Fri 12:19]
  - State "DONE"       from "TODO"       [2018-09-14 Fri 12:19]
  - State "TODO"       from "DONE"       [2018-09-14 Fri 12:19]
  - State "DONE"       from "TODO"       [2018-09-14 Fri 12:19]
  https://github.com/digitalechecklisten/chinchilla/pull/1613/files
  Looks good.,

• Tested deleting and undeleting all entities.
• Tested deleting checklists in sub-sub dossier. Parents get restored properly.
• Tested deleting dossier and undelete restores its deleted checklists within time range.
• Tested infinite loop safeguard
• Nice OO code!

Some remarks:

• Notes is not a soft destroy.
• How do you delete a question?
• Deleting a dossier deletes its invitations, including the ones for sub dossiers and their checklists. We might want to restore them the way we do for checklists?
• Undeleting remarks, invitations, answers, tasks is easy enough using this task. Trick is gonna be to find the id. Using the event store you could write a task that lists all deleted entities and their ids within a time range within a group, or by user-id. Might be useful, otoh, most requests for undelete are for dossiers and checklists.
 DONE prepare bilby workshop/presentation
  CLOSED: [2018-09-14 Fri 12:19]
  - State "DONE"       from "TODO"       [2018-09-14 Fri 12:19]
  Hey Michiel, good afternoon! Are you still around?
Michiel van Oosten [16:47]
yep
Jacob Mendoza [16:47]
Hey almost weekend. One quick thing to see if you can help us.
Michiel van Oosten [16:47]
Sure
Jacob Mendoza [16:47]
I was talking the other day with Johnny about some new pieces that we’re going to have, an as you already know everything is going to touch Clojure and bilby.
Would you be open to give us a “tour” about bilby?. I think I already know my way into some places, but I think it could be helpful for me too. I’m not talking about om-next really, but more the abstractions and ideas that you have in place. I’m not sure really about the contents, that’s for you as a teacher :stuck_out_tongue: .

Idk, how routing works, how queries get translated from the components, the structure of the UI tree.
Well, I said not about om-next unless you consider that we should see something about it.
Completely open to you. I was assuming that we can read more about om somewhere else, but whatever.
Michiel van Oosten [16:50]
Sure, umm. to the whole team you mean?
Jacob Mendoza [16:50]
Good question, not sure 100%. Initially, Johnny expressed interest.
Not sure what he wants, I can ask
Michiel van Oosten [16:51]
Anything in particular? Or in general?
Routing is pretty straightforward actually.
Jacob Mendoza [16:52]
Not sure, I’ll see if he has any especial interest. I understand it’s a bit general about the app. Coming from the outside there’s always a bit of cognitive effort and I think the chat can help.
Michiel van Oosten [16:53]
You know how to use the backend parser right? There's a bit of authentication going but that's the bulk of the backend.
Frontend is a bit more involved i suppose.
Jacob Mendoza [16:53]
Yeah… I think I know the basics. I also tend to forget because I haven’t been able to focus much (due to other things I mean). I’m hoping that will change soon :simple_smile: (edited)
Michiel van Oosten [16:55]
It might work with screen sharing. Can we share a screen to multiple people?
I think I know what you mean though. The dossier type editor is rather involved, and the rest of the pages use the defcmp macro.
Jacob Mendoza [16:56]
Oh yeah, I think that has to work without problem.

One idea could be see the things that one needs before developing a new full-stack feature maybe. Not sure if that’s helpful, but I leave it here. A tour around the pieces that are involved into that processes.
Michiel van Oosten [16:56]
We/I should try to build a basic page. Like one that displays a checklist and its questions or something
Jacob Mendoza [16:57]
I personally think that’d be cool, yeah. There are some mechanisms working around that and it can be cool to have an overview about how they work.
Michiel van Oosten [16:57]
I started again for templates, but again, that's rather involving a lot of components and mechanisms by now
Jacob Mendoza [16:58]
Oh, dossiers and templates look complex features right?. I mean, not trivial at all.
Michiel van Oosten [16:58]
I'll try to make a list of bilby specific mechanisms. Such as undo/redo/revert, error handling (from the backend), form validation, umm
Jacob Mendoza [16:59]
I can’t help feel excited about it.
I mean, these are things that you can surely figure out looking at the code, but the presentation can give us x1000 speed
Michiel van Oosten [16:59]
post-remote is another, it gives you a hook to process what comes back from backend before it gets merged with app-state
The big divergence from om-next is btw i don't use dynamic queries. I modify remote queries based on app-state. So if app-state says a certain record is selected I modify the ast for the page accordingly. As in, I stick in the selected-id from app-state. But you can, and i do go, much further than that. Basically you can modify the ast however you like. I use it for autocomplete for instance. And also for routing, I excise the parts of the query that are not relevant for the current page. Things like that. I think this idea is central to the whole frontend.
We'll have to make a time, and work out how to share screen with more than one person. Or does slack do that already without trouble?
Jacob Mendoza [17:04]
I think (I could be wrong but I don’t think so) that Slack should be able to do it without problem.
Michiel van Oosten [17:04]
Ok.
Jacob Mendoza [17:04]
Well, I really hope so because I’ve seen other technologies doing it quite ok, I hope this will do too :stuck_out_tongue:.
And I guess that you can prepare any material if that’s helpful for your explanation. And thanks for the effort, I know it’s hard to stop doing things to dedicate some time to this, but it’s going to pay off!
Michiel van Oosten [17:05]
And of course, the great thing about om-next is that data and events run in a circle. Which is the start of any reasoning about the app.
Jacob Mendoza [17:06]
Exactly. See, like this comment, even that it’s from om I do like when you remind me about it in the context of bilby.
That’s why I was saying before, anything that you think it’s interesting works for me.
Without any pressure at all, do you have a rough estimate about when we could do this?
Michiel van Oosten [17:09]
In release-0.6.0 is a ns components.test-page.page
That one is a beginning of a bit more involved page.
Which some helper fns
Oh yeah, another concept is the concept of using placeholders in the query. Like subprops and subprops2.
in test-page
Jacob Mendoza [17:12]
Btw, sorry because you’ve said this before, release-0.6.0 is the branch for new features right? (to cut new branches from I mean)
Michiel van Oosten [17:14]
I'm trying to get foothold with the status migration at the moment. Shouldn't be too much code in the end, but trying to fix the legacy statuses situation and at the same time start using status table and still have backward compatibility. But getting my head around it. We can try somewhere next week?
And yes, release-0.6.0 is the one to use for new features for sure.
Jacob Mendoza [17:14]
Thanks, and of course, that’s more than fine.
Again, thanks for the effort because I know this takes time.
Michiel van Oosten [17:22]
But play around with the test-page. Add the toolbar. Select a record from the a list, display detailed info on selection, modify, and save. Try to pull in a more complex query with joins to joins. And display it on the page.  Or a user on part of the page, a dossier type on another part, and the a dossier that belongs to the group of the user on another part. You'll never to touch the backend for any of this. Nor any internals of bilby.
I'm gonna formalize I think the concept of modifying remote asts on the basis of what is in app-state. With hooks or something. It's a bit ad hoc at the moment as I needed it. But gonna need something robust for templates where there'll be a lot of on demand loading of extra data.
Also don't forget docs/notes.org, and the readme to some extend. I might format and edit and organize that notes.org and make it some kind of manual/docs. Emacs can export notes.org to a markdown, or html or pdf or whatever format btw. Which will be included with the repo then. (edited)
Jacob Mendoza [17:32]
Thanks Michiel, sorry for the delay.
>  It’s a bit ad hoc at the moment as I needed it.

But that’s completely normal, right?. It’s more about knowing how it works today and where we want to go (what would be ideal for you).
Michiel van Oosten [17:33]
I've got a list as long as my arm with things I can and should and want to improve in bilby...
Jacob Mendoza [17:34]
haha, that feeling is familiar…
Well, if we’re all at the same page about them, I think you’re getting help :stuck_out_tongue:
You can direct us to refactoring tasks or things if we start to do contributions and we get more solid.
Michiel van Oosten [17:37]
Yeah, that'd be great. There's a few concepts in bilby that are sound and logical but not always crystalized out properly into let's say super readable code. One example used to be the validations in the database config, but I managed to properly work that one out from the original idea, or sketch.
Jacob Mendoza [17:38]
> but not always crystalized out properly into let’s say super readable code

I mean, that… at least for me, it’s so hard. Even more when I do things by myself.
Michiel van Oosten [17:40]
Another is form validation for example. Or keeping track of is-dirty. Post-remote.
Jacob Mendoza [17:40]
Also, in my case, there is the extra complexity of a syntax/approach/mindset etc. that I’m not fully used to use (yet). Gotta get better. (edited)
And, all the things that you’ve mentioned. I think that an overview/class… yeah, that’s going to be great.
Michiel van Oosten [17:42]
Ah yes. Have a go at the test-page. I play around with incorporating client/reload-key there as well. As a way to force rerendering the app when it's freshly compiled.
Jacob Mendoza [17:43]
Yep, will do.
Michiel van Oosten [17:45]
And fulcro docs are really good. A lot of it is about just how om-next works.
Jacob Mendoza [17:47]
Yeah, by what I’ve seen, a bit impressed by them.
* DONE Put specs cheatsheet on slack
  CLOSED: [2018-10-23 Tue 14:46]
  - State "DONE"       from "TODO"       [2018-10-23 Tue 14:46]
  https://github.com/digitalechecklisten/chinchilla/wiki/Specs-cheatsheet
* DONE Thursday 15-11-18 dropdown field
** DONE validate email in bilby production!
   CLOSED: [2018-11-15 Thu 16:52]
   - State "DONE"       from "TODO"       [2018-11-15 Thu 16:52]
** update templates feature dossier
** Dropdown field type  
*** DONE Rename dossier field dropdown options in bulk on name change
    CLOSED: [2018-11-15 Thu 16:13]
    
    - State "DONE"       from              [2018-11-15 Thu 16:13]
*** DONE Align type column in bilby
    CLOSED: [2018-11-15 Thu 12:22]
    
    - State "DONE"       from              [2018-11-15 Thu 12:22]
    
*** DONE Rearranging options doesn't set history marker!!
    CLOSED: [2018-11-15 Thu 12:08]
    - State "DONE"       from              [2018-11-15 Thu 12:08]
*** DONE Decide on whether to use value/content2 field
    CLOSED: [2018-11-15 Thu 12:00]
    - State "DONE"       from              [2018-11-15 Thu 12:00]
*** DONE Remove key prop from options when saving in bilby
    CLOSED: [2018-11-15 Thu 11:25]
    - State "DONE"       from              [2018-11-15 Thu 11:25]
*** DONE Remove timbre statements from bilby
    CLOSED: [2018-11-15 Thu 12:00]
    - State "DONE"       from              [2018-11-15 Thu 12:00]
*** DONE How is it working in ipad? This dropdown
    CLOSED: [2018-11-15 Thu 12:27]
    - State "DONE"       from              [2018-11-15 Thu 12:27]
      works fine
*** DONE when value is not in options, dropdown doesn't work!!!
    CLOSED: [2018-11-15 Thu 13:19]
    - State "DONE"       from              [2018-11-15 Thu 13:19]
    which is stupid.
    
*** DONE delete button for dropdown field value
    CLOSED: [2018-11-15 Thu 14:10]
    
    - State "DONE"       from              [2018-11-15 Thu 14:10]
*** DONE Disallow removing options if used in field value somewhere
    CLOSED: [2018-11-15 Thu 13:21]
    
    - State "DONE"       from              [2018-11-15 Thu 13:21]
      
* TODO more features for dossier dropdown field type
- multiselect
- Scrollable list? So in dialog perhaps? For big lists?
- Import csv with options? Or copy/paste into dialog?
- Import from database using api?
* DONE Make supergroups pull request
* TODO Make statuses pull request
** Bilby TODO
*** Backend
**** DONE Update/save statuses
     CLOSED: [2018-09-26 Wed 10:29]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 10:29]
**** DONE rename existing dossier/checklist statuses
     CLOSED: [2018-09-26 Wed 10:29]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 10:29]
**** DONE Send message when delete status fails, and set query.
     CLOSED: [2018-09-26 Wed 11:24]

     - State "DONE"       from "TODO"       [2018-09-26 Wed 11:24]
***   Frontend
**** DONE set default statuses (depending on locale) to Open and Afgerond
     CLOSED: [2018-09-26 Wed 12:35]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 12:35]
     on creation of dossier type, look up translation of Open and Complete in current locale for app?
**** DONE don't allow less than 2 statuses
     CLOSED: [2018-09-26 Wed 11:44]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 11:44]
    Don't allow deleting if 1 or less statuses. Validate in backend
**** DONE don't make new statuses that are deleted!
     CLOSED: [2018-09-26 Wed 12:47]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 12:47]
**** DONE Add validation in backend for number of statuses!!
     CLOSED: [2018-09-26 Wed 13:49]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 13:49]
**** DONE validate in frontend empty statuses!!!
     CLOSED: [2018-09-26 Wed 13:57]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 13:57]
**** DONE standardize statuses when cloning etc!!
     CLOSED: [2018-09-26 Wed 14:03]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 14:03]
**** DONE Renaming existing status to another existing status should not be possible
     CLOSED: [2018-09-26 Wed 14:04]
     - State "DONE"       from "TODO"       [2018-09-26 Wed 14:04]
**** DONE Setting all inactive leaves nothing to select in DC app, ah well.
* DONE Add translations to supergroups
 Instead of adding migration to DC app
* TODO Updated statuses from release_master (supergroups)
* TODO Put statuses on a staging server
* DONE Updated templates from release_master (supergroups)
* TODO summarize templates-users admin page conversation with Jacob
Nice writeup Jacob
I was thinking how about tags? Instead of roles?
So make it possible to add tags to a user, and to templates? And then filtering on them for the purposes of linking, sending alerts, making reports?
Another concept of templates is that the idea is that we're gonna copy templates from group to group. So we have access to all templates, and (sub)groups have access to templates that are linked to their group. Which are copied from the DC pool of templates.
And then maybe we reserve the concept of role to the idea of group level access. So all groups (superadmin), super and its subgroups (supergroup-admin) and group-admin.
And if you're making a searchable templates list admin page, we need to coordinate that somewhat, cause I've got that already.
Jacob Mendoza [18:17]
Hey Michiel! Nice one. Mind that I write a proper response tomorrow? In any case, talking with you about it it’s part of the job! (edited)
Jacob Mendoza [13:19]
Hey Michiel, good afternoon. Are you around?
Michiel van Oosten [13:19]
Yep
Jacob Mendoza [13:21]
Question, you were saying:

> I was thinking how about tags? Instead of roles?

Is this just a proposal for a different “naming” or there is any behaviour that this would change?. When I read it it seems equivalent (or similar) to some point (add tags to a user seems similar to add roles to a user, and the same for templates), but you could mean something else.
Michiel van Oosten [13:22]
Well, usually you don't attach roles to a record other than a user right. Also roles implies some sort of access control.
I'm thinking to just add some ui and functionality to add tags to records. And then in other places you can use them or not to filter.
As opposed building something more complicated where 'roles' get a more independent entitiy, including a more complicated structure etc.
So decouple it in a sense
Instead of attaching more meaning to these 'roles' or 'tags'.
Simpler concept
Jacob Mendoza [13:26]
I think I follow. I was actually going to use the word ‘decouple’.
Let me pause this topic for a second to jump for the templates.
Michiel van Oosten [13:27]
Yeah, so you could have some generic component that can edit tags for a record. And add that to users, templates, questions, whatever
And then in the alerts you can search by tag, and then send alerts to the group you just filtered for,.
For instance
And that group of users, as filtered by tags, is dynamic as well then. So if you add the right tags to a user the group changes as well. So every time you send the alert you gotta do a search on the tags.
Cause it's a 'dynamic' group. A collection of users defined by the tags for the alert. That kind of thing
Same for linking users to templates.
Or making reports
Though, thinking about linking users, that might be a bit trickier to make 'dynamic'.
But you can filter on certain tags, then link the user in to all of these selected templates in bulk.
So you update the templates-users table accordingly.
So basically all this templates-users table does is select the templates you get the see when you want to make a new checklist right
So you could combine the user's tags and template's tags maybe.
So you use whatever 'template' tags a user has to select the templates you send to the frontend.
instead of using the templates-users table.
And/or
Jacob Mendoza [13:34]
I think I see your motivations.

In any case, please, could you add your idea with a small diagram about the data structure (db) to the issue?. Please, mark in the ways that it would be different, where you think is better, etc. I have to think about it myself, reconsider with your input etc, I don’t have much now.

Johnny’s going to do the same with his feedback and I think we should have a meeting at some point (soon). I don’t want to loose any point of view about it, and I can miss some details if I translate it myself.
Michiel van Oosten [13:35]
I can add it to the issue. But diagram is easy right. No change of db structure
Jacob Mendoza [13:37]
Cool, if there’s not change at all, make sure that you signal that that’s one important win for you.
That’s a simpler structure, that’s true.
Michiel van Oosten [13:38]
That depends a bit on how you manage statuses though I'm thinking. Whether to just allow to add the ad hoc to records, or whether to give them a table of their own. I tend to just inline them, keep it simple. But that's not a simple issue really. Whether to use a table or not for tags. (edited)
Jacob Mendoza [13:40]
Gotcha, I have a bit of a relational mindset myself, tend to be attracted to the integrity wins that you get when having the thing modelled in a table or with relationships, but more than open to inspect other approaches.
Bot not to worry, think a bit about it. Johnny’s going to do the same.
If we all have it written I think it’ll be good for the meeting. Helps to be more focused I believe.
I’m going to be thinking about your approach though
Michiel van Oosten [13:42]
Grouping items by attaching tags is a very flexible way to organise collections. If we think in terms of groups, our DC groups, and super and subgroups you're organising using a hierarchy, which has its advantages, but is much more rigid. As in, being a member in 2 groups accross the hierarchy becomes really complicated.
We gotta be careful not to conflate filtering and access control I think in this situation.
But I'll add to the issue what I can.
I hear Lucas in your writeup already having all these ideas of what he wants now he can work with groups and subgroups etc.
Jacob Mendoza [13:47]
> We gotta be careful not to conflate filtering and access control I think in this situation.

That’s an interesting one. If you can come with an example of how this leads to conflation, like … the dangers of this, that’d be gold I think.

In my mind, the fact that you have a concept that is used to filter and could potentially be used to grant access does not conflate the two areas, but I can very well be wrong.
> I hear Lucas in your writeup already having all these ideas of what he wants now he can work with groups and subgroups etc.

Not sure if I follow 100%.
Michiel van Oosten [13:48]
Well, by calling the tags roles, and talking about subgroups in terms of sending alerts
Jacob Mendoza [13:50]
You mean, that by the wording he could associate things that aren’t really meant there?
Michiel van Oosten [13:50]
Yes I think so.
On the one hand we have the concept of groups, that's really an access control mechanism. All that supergroups does is alllow access to a subgroups 'admin' data. Not anything else, so not to user data. So we have 'subgroups' now, which are just our normal traditional groups really. But hearing subgroups i think Lucas and co think that now we can use that to selectively target users in various ways. Like for alerts or reports etc. But filtering on tags is much better I think.
There's an issue where a group in A'dam wants to partition _user_ data within the group. Which is not possible at the moment. Even with the supergroups feature.
However I think there's a place for role based access control though. In general. Should have had that from the beginning perhaps. But if we can get away with tags for what Lucas is after, than I think we should use that.
I'll try to write something up in the issue though.
Jacob Mendoza [14:00]
> But hearing subgroups i think Lucas and co think that now we can use that to selectively target users in various ways.

Oh, ok, so that’s something that I really want to avoid. When we touched this briefly he kept using ‘subgroup’, but that’s why I wanted a different name, away from that, because as you said it is not related at all. I don’t really care much if it’s called roles or tags or any other thing. If roles sounds too much like something else, let’s use tags, not problem.

What I really wanted is to sound like something new, something we don’t have, and as you said something that allows to partition within the group.
Michiel van Oosten [14:01]
Tags let you partition accross groups as well right
Jacob Mendoza [14:01]
> However I think there’s a place for role based access control though

Could be, but really, my intention wasn’t really to complicate the thing more than needed. If role sounds too much to authorisation, let’s try something else. What I’m trying to address here is partition inside a group.
> Tags let you partition accross groups as well right

Absolutely.
Michiel van Oosten [14:02]
I'm thinking if all the group admins are properly tagged as such you can get a report on all of them for instance. Or link templates to them in one swoop.
Jacob Mendoza [14:04]
Yeah, that sounds right. It’s interesting really. I don’t know if with the name I gave other impression, but to use your exact words “partition within a group” is what we’re after. (edited)
That came in two ways in the alerts, how to filter information (read) and how to add alerts only to some cluster within the group (write)
Michiel van Oosten [14:04]
 ```Subgroup admin: Only templates from your group can be added.
Supergroup admin: Only templates from your group can be added. You can also assign templates from your supergroup to a user in a subgroup (and it will be automatically added to the subgroup).```
templates will be copied and will have a group-id. So only your own templates you wil be able to link. And a supergroup will be able to access its own templates, and the templates of all its subgroups. Similar to users, translations, dossier types etc.
So maybe we can do that with this templates-users page you're building. So make a migration that copies all templates to all groups according to what template they have access to. Deduced from templates-users table.
Cause that has to happen anyway.
So to use a buzzword, once the templates are per group-id, linking templates is totally orthogonal to access control on group basis.
I think I'm confused by this:  `The system will clearly mark if a user has a template given its adherence to a role.`
Jacob Mendoza [14:14]
> So make a migration that copies all templates to all groups according to what template they have access to. Deduced from templates-users table.

Exactly, that’s already in the diagram as ‘templates-groups’ (or any other name that feels better), deduced from the templates that users have access already in templates-users. Is this what you mean or something extra?.
> The system will clearly mark if a user has a template given its adherence to a role.

Sorry, that’s not super clear. Apparently there’s the need of having, somewhere, a way to know that “you have the template X because you have the tag Y”.
Same for an alert just to put another example.
Michiel van Oosten [14:15]
Ah sorry, you're right.
Jacob Mendoza [14:15]
No no! not to worry
Just to check if we were talking about something similar.
Michiel van Oosten [14:16]
Small print: 'In the future Templates will have a group-id' :simple_smile:
Jacob Mendoza [14:16]
Super small print :stuck_out_tongue: too small really
Resizing problems
Michiel van Oosten [14:16]
But we can cut out all the green tables
And just have a group-id column on templates? (edited)
Jacob Mendoza [14:19]
> cut out all the green tables

If that’s finally coming (the group-id field in templates) we could remove templates-groups, yeah. Not so sure about the other one (I mean with the current idea, of course it can go away if we change it) because it holds the connection between tags and templates. Of course it could be stored differently.
Michiel van Oosten [14:19]
If a user has certain tag, search the templates for the same tag?
Jacob Mendoza [14:20]
Sorry, you mean when, adding a new user?
Michiel van Oosten [14:20]
We can, in time, get rid of templates-users for sure
Jacob Mendoza [14:20]
Ah!
Michiel van Oosten [14:20]
Cause it'll be group based, the templates.
Jacob Mendoza [14:20]
Yes yes!
Michiel van Oosten [14:20]
Not global.
Jacob Mendoza [14:21]
I understood that there is some will to have a way to have specific choices for users too. Isn’t that right?.
Maybe I should recheck that.
Michiel van Oosten [14:22]
Then the question is, when you say, 'we want to link a template to a user, or a subset of users of a group', is that just a matter of preselecting, so prefiltering or do we want to enforce that? I think it's just preselecting. Not disallow access to the rest of the templates of the group per se.
So maybe we can have something similar to what we have in dashboard. So preset filters.
So when an inspector wants to go inspect a snackbar he can select a filter (based on tags, and/or search terms or whatever) and get a shortlist of useful templates.
Currently he gets to see templates as linked to him in the templates-users table. Which has to be explicitly set properly. But it is not access control really. It's just a preselection. With the right api call i think you can use any template to build a checklist.
Jacob Mendoza [14:26]
> But it is not access control really. It’s just a preselection.

If that’s the case Michiel, that changes a few things!. Yeah, I did not understand the issue this way… it hasn’t really explained to me this way.
Michiel van Oosten [14:26]
So all we need as far as I can see is templates per group, users and  groups. And tags to filter.
Jacob Mendoza [14:27]
That’s a different thing, yeah.
Michiel van Oosten [14:27]
So it becomes a matter of building a clever search and filter ui.
Jacob Mendoza [14:27]
Yeah, yeah, I can see the difference. That hasn’t been really mentioned to me.
I’ll talk to Johnny whenever he’s free to include that.
If we’re talking about preselection, a way to help users to make the right choice, that’s a different story.
Not much linked to any idea of role, tag, etc, in the way I meant. As you said, clever search.
Michiel van Oosten [14:29]
Yes, the group is the concept for access control.
Jacob Mendoza [14:29]
There’s no need of a big structure for that.
Yep, gotcha.
Michiel van Oosten [14:29]
With the addition of supergroup admin that edit 'meta' data of a subgroup.
Within the group everybody has access to everything in principle. It's just that they're usually not interested in 'everything'.
In terms of user data.
A user with the group-admin also has access to the 'meta' data.
Not really called 'meta' data. I think I mean templates, dossier types, translations, users etc.
admin data
Jacob Mendoza [14:32]
Yep, I get the concept, I see what you mean
Nah, I have to go over this again with Johnny, that changes a few things
Michiel van Oosten [14:34]
I'd keep it simple, just replicate the usertemplate import worker. Once templates are per group you automatically get group based access control.
It's a matter of adding scope of [:group-id := u/group-id] to databse config for templates.
Or the other one right for supergroup admins : [:group-id :in :subgroup-ids] or something like it.
Jacob Mendoza [14:36]
This makes sense.
Hey Michiel, thanks, this is to say the least helpful.
Michiel van Oosten [14:38]
Yeah, I get short of breath when I see complexity coming my way...
Jacob Mendoza [14:38]
That also, but I meant more about the requirements itself
That’s not what I thought had to be built
Michiel van Oosten [14:40]
Yeah, I've got in my head: groups are for access control, tags for filtering/preselecting. If Lucas wants access control within groups for user and/or admin data, yeah, then we need roles and make this a central concept within groups.
But I think/hope that's not what he's after.
Jacob Mendoza [14:40]
haha, gotcha.
I’ll go again over this with Johnny and keep you posted. If you have access to everything within your group, that changes the concept fundamentally. Just purely speaking, for example, about the templates-users table. (edited)
Michiel van Oosten [14:41]
Last thing, so you're making a searchable/filterable etc templates list right And then listing linked users when selecting a template.
And having some ui to add/remove users.
I actually have the same thing, it's just that when I select a template I show this component that lists all the categories, which again list questions. In a treewise fashion.
So I can use your templates list page then.
And on selecting a template we can (in time) show both components. Your 'add/remove users' component and my 'template edit component'.
So make sure the 'add/remove user' component is a real compenent, that can just be dropped in.
And you need a component to add to the user page.
Where you select templates.
So the your 'select/search/filter templates' should also be a drop in compomnent.
And the idea in general for templates editor is that any searches will be big, screen size overlaying dialogs.
So my idea is that when you run of space on a page, instead of going to another page (like in chinchilla) you just overlay a big dialog where you do your subsearching, or editing or whatever.
Bit like my data inspector.
So you're always in the context of what you were doing before.
So in your case, you select a template. You show the list of users linked. With a button 'Add user'. You click it and get a 'search user dialog'. You select it and it gets added.
We might be able to use the current user admin page.
It's different from chinchilla where we swap between index and show pages right
Does that make sense?
Jacob Mendoza [14:49]
> So in your case, you select a template. You show the list of users linked. With a button ‘Add user’. You click it and get a ‘search user dialog’. You select it and it gets added.

But sorry, just to make sure that I follow. How does this work with the idea of the tags?. A user linked is the one that has the same tag?
Michiel van Oosten [14:50]
You search on tags
Which gets you your preselection.
Then a button bulk adds all users in your dialog to the template. (edited)
Jacob Mendoza [14:51]
Ah, so there is an explicit connection between an user and the template. I mean, you’re adding that connection somewhere. (edited)
Michiel van Oosten [14:51]
In chinchilla you can do interesting things like selecting templates based on tags.
If you wanna bypass the templates explicitly linked to you,.
Or refine the selection or whatever. That's a chinchilla concern.
Jacob Mendoza [14:52]
But in your opinion, you still have a link between users and templates, right?.
Michiel van Oosten [14:52]
And can be done later.
For now I think we just want to make the import worker obsolete.
Jacob Mendoza [14:53]
Yep, I see (edited)
Michiel van Oosten [14:53]
Yes, we're just editing the tempaltes-users table and nothing else
Jacob Mendoza [14:53]
Ok, makes sense.
Got to do some thinking, but I followed everything you said I think.
Michiel van Oosten [14:55]
Ah, we do need a tag column on templates then. If we're gonna search on that. But again, not necessary to build the templates-users page.
Jacob Mendoza [14:56]
Yeah, right, there’s have to be a way to “group” them.
Michiel van Oosten [14:56]
group based access comes later automatically, filtering can be done in chinchilla.
Still challenging enough I think. But conceptually straight forward enough. Another thing is that Lucas mentioned he wanted to link dossier types to templates. Which makes sense. So in the dossier type editor we need a button that selects templates. So that whole 'select/search templates' thing should be an easy embeddable component anyway. So we can drop it in the dossier type editor. Which will then adjust a future 'dossier-types-templates' editor. Again the idea is to 'preselect' templates in chinchilla. Not restrict access to all templates of group. At least that's what I understood from Lucas.
I imagine that when you want to make a new checklist in chinchilla you get initally just the templates linked to the dossier type of the dossier, and/or filtered by the ones that are explicitly linked to you, But also a generic search for templates where a user can basically select any template of the group if they want.
Jacob Mendoza [15:02]
That makes sense to me.
Michiel van Oosten [15:03]
I'll copy this conversation and edit it. And make it presentable so Lucas and Johnny can go over it.,
Jacob Mendoza [15:03]
That would be awesome really.
Michiel van Oosten [15:03]
I'm kinda thinking and brainstorming as I go really.
Jacob Mendoza [15:03]
Yes please, go for it. I think it’d be really useful.

Michiel van Oosten [15:03]
Going by what I understand Lucas is after.
Jacob Mendoza [15:04]
Yeah, but that’s important.
* DONE Make PR for github/calc-count branch
* DONE Make PR for templates-users-admin-page
* DONE Make dossier field dropdown feature request
  CLOSED: [2018-10-23 Tue 14:47]
  - State "DONE"       from "TODO"       [2018-10-23 Tue 14:47]
* DONE Make feature request for subdossier using parent dossier's field!!!
  CLOSED: [2018-10-23 Tue 14:47]
  - State "DONE"       from "TODO"       [2018-10-23 Tue 14:47]
 So subdossier-type lists fields for parents, can be set to (in)active, but can
 not be removed.
In DC display fields, but get values from parents, somehow!!! 
* nameformat troubles
** MAKE GITHUB ISSUE replace - separator token with something more rare. Like ^ or some non typeable character
Nameformat was en is nog steeds een string. Moet eigenlijk lijst met veld ids
zijn. Daarom heb ik dat separator token nodig. Maar maak een issue om separator
token naar iets zeldzamers te veranderen. Moet ook in DC app gebeuren dan.

** nameformat date field
    The date in a date field is in a different format than in the name format. The first shows dd month yyyy and the last shows yyyy-dd-mm.

* Security
** Disallow unlimited recursion in queries!!!
So no '... as subquery!!! And set the max per table? In table config? Or set
some global max recursion.
** test whether :ssl-redirect true :hsts true still works on staging and production
** option to block a group from editing this or that
for now, to block them editing dossier types when they use the api v1. Can
create problems. See issue on github
** on :unauthorited response, do proper logout, don't just show login screen :priority_2:
** Check that password validity etc settings work
 Add :password-validity-period-retention :password-validity-period-days when security branch is merged to validation.clj for groups for throw-if-empty
** access to user page for group-admins?
** delete users?
** xss
Escape any and all user input
** option to block a group from editing this or that
for now, to block them editing dossier types when they use the api v1. Can
create problems. See issue on github
** I think it's possible to lock up server with a massive query.
Especially with lots of subjoins, like in templates

** sql-validate is always performed, but whitelists and scope only when doing an om-query!!
  Maybe in process-params apply these at all time!!


** Set domain in production for cookie in loginscreen namespace.



** Set a limit to how many records for any given table an admin can create?
In theory, by using the api directly they could create millions of let's say
users, or dossier types etc.



* More releases
** any release
*** more requests from Lucas:
In een volgende versie kan ik wel bijv een dialoog ervoor open zodat mensen een lijst van opties kunnen pasten. 1 per regel. Is niet zo moeilijk om te maken. Is wat sneller dan een voor een invoeren. (edited)
Lucas Oost Lievense [14:46]
Wat ik ook nog graag wil (ook wel echt nodig) zijn de velden van bovenliggende dossiers toegankelijk voor Name format
en ‘dossier’-velden zoals:
Aangemaakt op
Aangemaakt door
Laatst gewijzigd op
etc
Michiel van Oosten [14:48]
'automatische' velden.
Lucas Oost Lievense [14:48]
Ja
die je wel of niet kan tonen
Michiel van Oosten [14:48]
Snap het.
Liefst uitgebreid met Aantal subdossiers, aantal documenten en al dat soort dingen. Doen we nu ook in de workload
*** image upload resize in browser
    https://stackoverflow.com/questions/19262141/resize-image-with-javascript-canvas-smoothly
    https://stackoverflow.com/questions/2434458/image-resizing-client-side-with-javascript-before-upload-to-the-server
    https://gist.github.com/dcollien/312bce1270a5f511bf4a
    https://hacks.mozilla.org/2011/01/how-to-develop-a-html5-image-uploader/
    https://github.com/rossturner/HTML5-ImageUploader/blob/master/src/main/webapp/js/ImageUploader.js
    https://github.com/sidraval/image-crop
    https://github.com/nodeca/pica
    https://github.com/mikera/imagez
    https://github.com/josephwilk/image-resize r
*** When clicking on group/company link on user form and page is dirty show are you sure dialog!!
   For now in app.util/link-to I ignore-unsaved-records. If not the two
   mutations in one transaction muck things up. We suspend changing route, but we
   need to suspend both queries. So also the select-item. Currently select-item
   happens regardless of if page is dirty. Which mucks things up



*** GITHUB ISSUE Remove secrets from app.config
 Jacob put slack keys and send-in-blue keys there

*** Disallow same name dossier types etc.
*** also show progress bar for tests (use eftest) as in bilby-libs
*** ?? When record is not saved because all props are not allowed backend returns warning
   But this is not shown in frontend. This is because dossier types can be empty,
   but the joined fields not. So no msg is appropriate then. But for records with
   no joins we would like some feedback. On the other hand this should be not
   allowed in the first place, saving a record with disallowed fields.
   But resurrect the little black box popup perhaps

*** DONE upload functionality (eg:logo for groups in pdf-options)
    CLOSED: [2018-10-02 Tue 17:17]
    :LOGBOOK:
    - State "DONE"       from              [2018-10-02 Tue 17:17]
    :END:
*** Set/edit color logo scheme
***** Add help text
***** Set maximum sizes!
***** Multiple sizes for normal and iphone!!!
***** DONE Have dc app respond to theme images
***** Add custom avatar image
***** Grab these images on backend and get to frontend via a macro.
  And calculate sizes there from them.
***** In rails put logo and brand data-urls somewhere more sane.
  Not in group model perhaps.
  Also grab from images on disk. So create data uri from brand and logo png/jpeg
***** Only show preview checkbox if anything's different!!
***** BUG Set color not to nil for default color, don't use merge-themes
    On save if color is the same as default then mod it to nil.

*** When elastic is added to bilby, update dossier index when changing name format
  to include static text. Possibly update names of dossiers as well, but that
  might be a lot of work? Possibly also for es. Problem is that es index only gets
  updated when dossier gets saved. When we change nameformat we change the name,
  and index is out of date. However es also indexes field values for dossier, so
  search still works properly (except not on static text in nameformat, if that changes).

*** Better data explorer, including vcr
    see explorer namespace

*** use material-ui directly, or at least without cljs-material-ui jar
    react-dom.inc.js:526 Warning: Expected `onMouseUp` listener to be a function, instead got `false`.

 If you used to conditionally omit it with onMouseUp={condition && value}, pass onMouseUp={condition ? value : undefined} instead.
     in input (created by EnhancedSwitch)
     in div (created by EnhancedSwitch)
     in EnhancedSwitch (created by Toggle)
     in Toggle (created by components.groups.page/Form)
     in div (created by components.groups.page/Form)
     in div (created by components.groups.page/Form)
     in div (created by components.groups.page/Form)

    Problem is that react wants onMouseUp to be a fn or undefined. Current
    version of material-ui used by cljs-material-ui is 0.19.0. Which does exactly
    what react doesn't like. 0.19.4 does it properly. But cljs-material-ui is out
    of date and not updated for since last year
    Opened issue:
    https://github.com/madvas/cljs-react-material-ui/issues/46


*** Check that password validity etc settings work
  Add :password-validity-period-retention :password-validity-period-days when security branch is merged to validation.clj for groups for throw-if-empty

*** set location block to inactive if no location fields exist!!! :priority_1:
 And add warning popup to add fields to get it active!!!

** future release
*** undelete dossiers/checklists/answer util for superadmin
*** user management for billing purposes
*** count number of user actief/inaktief
**** A syntax and implementation to return count (*) for a table
*** label or different color for inacive user
*** different color for or option to hide inactive fields in dossier types
*** when uploading logo restrict size, or resize automatically to for example max of 640x480
    which takes up almost half of page
*** As DC superadmin we might want the option to add/remove groups to supergroups as well.
*** implement state in url.
 And history etc, back/forward button.
 https://github.com/juxt/bidi
 https://github.com/venantius/accountant
 https://github.com/kibu-australia/pushy
 https://lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history/

*** Fix legacy default statuses in DC
**** github issue
     This should fix step 1 and 2 of #1636 at the least.

 Currently statuses are referred to by name and embedded in the dossier-type
 record.

 Proposal is to normalize statuses and refer to them by id.

 This should and will fix several issues:

 First, we're dealing with a legacy system where dossiers have 'default' statuses
 such as 'Afgerond' or completed and 'open'. However the dossier type of the
 dossier didn't always explicitly offered that as a choice, they were added by
 the frontend DC app 'by default' when no statuses were defined for the dossier
 type. This creates problems now users can add to and edit statuses of dossier
 types themselves. Result can be a double 'Afgerond' status in the list of
 statuses to filter on.

 Some more precies notes on what issues are encountered at the moment:

 Default is 'completed', so the English translation of 'afgerond'. If a dossier
 type has no statuses set, 'completed' is offered as a status, which is also
 translated in that case. But the status of the dossier will still be 'completed'
 when set to 'Afgerond'. Doubly confusing. Once a dossier has the status
 'completed' but still has no statuses set for the dossier type, the status
 'Reopen' is offered. Which results in just wiping the status of the dossier
 again.

 New style statuses, so statuses derived from the dossier type are not translated
 btw. Which makes sense.

 If you add 'Afgerond' as a status, it won't match 'completed' status as may be
 set for dossiers. So when filtering you'll have both 'afgerond' and 'completed'
 as options. Which is two different existing statuses as far as the filtering
 code is concerned.

 \Other problem is that users can't properly filter on 'open' since that's not
 always an explicit status of a dossier, but more a 'lack of having any status'.
 Solution sofar has been to hide 'completed' items by default. See #955 and #1373

 There might be other issues, for example with the (new) dashboard.

 Besides normalizing statuses we should also have dossier type a minimum of 2
 'default' statuses of open and completed. Users can then rename them if they
 like, but not remove them. Or perhaps one default status of 'open' is enough.
 And any new dossier/checklist automatically gets assigned the 'default' status.
 In the dossier type editor you could indicate which of the statuses is the
 default status by a switch or perhaps the first one in the list is always the
 default one. See digitalechecklisten/bilby#27

 This will need a migration to normalize all statuses as found in dossier types.
 And replace all strings in dossiers and checklist with the id of the appropriate
 status.

 All existing dossier types should get at least one default status (open), and
 all existing dossiers/checklists without a status should get that default
 status.

 Any new dossier/checklist should also get the default status as set in the
 dossier type.

 The DC app should lose the legacy default statuses mechanism, and will have to
 retrieve statuses as a join to the dossier type, instead of reading them
 directly from the dossier type record. The status column in a dossier/checklist
 will be an id instead of a literal string.

 The bilby dossier type editor will have to be adjusted similarly, and also add a
 unremovable default status 'open' to any new dossier type for dossiers and
 checklists.

 Statuses will be similar to fields as far as the dossier type editor is
 concerned, both a join to the dossier type. Both editable and draggable.

 Should statuses have group scope or dossier type scope? So when we edit the
 label of a status for a dossier type do we want only the dossiers based on that
 dossier type to get updated status labels? Or all dossiers that have that
 status?

 So in the dossier type editor we can offer all the statuses of the group in the
 autocomplete.Question is if a status is called 'stage 2' and somebody renames it
 to 'stadium 2' should all 'stage 2' dossiers (not just the dossiers based on the
 particular dossier type) get 'stadium 2' status or not.

 Steps to resolve (roughly):

     A migration that creates a table 'statuses' with an id and status column and
     group_id column, possibly a dossier_type_id column.

     A migration will have to populate this table with existing statuses as found
     in dossier types, plus the legacy status 'completed'.

     All statuses in dossiers and checklists and dossier types will have be
     replaced with their id.

     Adapt code to deal with the statuses as a join, so by id, instead of as a
     hardcoded string, in chinchilla as well as in bilby.

**** Notes to Kristian.
       Some notes I have on the statuses: Default is 'completed', so the English
 translation of 'afgerond'. If a dossier type has no statuses set, 'completed' is
 offered as a status, which is also translated in that case. But the status of
 the dossier will still be 'completed' when set to 'Afgerond'. Doubly confusing.
 Once a dossier has the status 'completed' but still has no statuses set for the
 dossier type, the status 'Reopen' is offered. Which results in just wiping the
 status of the dossier again. To fix this manually for existing 'completed'
 dossiers, you can add 'completed' to a dossier type, which will match the
 'completed' string set as status for a dossier and then do a rename of that
 status. To 'klaar' or 'afgerond' for example. That should bring
 'oldStyleStatuses' as it's called in the code to the 'new style'. New style
 statuses, so statuses derived from the dossier type are *not* translated btw.
 Which makes sense. If you add 'Afgerond' as a status, it won't match 'completed'
 status as may be set for dossiers. So when filtering you'll have both 'afgerond'
 and 'completed' as options. Which is two different existing statuses as far as
 the filtering code is concerned Hope you can follow this a bit. It might help
 fix problems that you encounter in the field till we fix the statuses properly.
 All I described above could be automated and fixed retroactively for existing
 dossiers, but the decision is to move to giving statuses their own entity, so
 table in database. Which they don't have now, and they probably should have had
 from the start. It will solve a few problems as well, for instance in the
 dashboard, if statuses are referred to by id, instead of hardcoded in to a
 dossier, or checklist. We'll have a migration at one point to bring all dossiers
 and checklists over to the new system.

**** Renaming existing status to another existing status should not be possible
**** Setting all inactive leaves nothing to select in DC app.
**** To rename currently 'Completed' dossiers/checklists status add a status called Completed to status list for dossier/checklist
    Maybe add this status to all dossier-types where any checklist/dossier
    related to dossier type has that status already, using migration.

 deal with legacy statuses system.
 Default is 'completed', or afgerond. Add it to statuses for dossier type and you
 can change its name. Consider migration to add completed to dossier type if
 there's any dossier with that status.
**** set default status for checklist and dossier.
 Minimum of one status always, and indicate which is the default one
 On making a new dossier they get that status by default.
 What to do with legacy system where dossier have no status assigned.
**** slack
    Vraagje over de default status. Mag dat even?
 Michiel van Oosten [11:52]
 yep
 Lucas Oost Lievense [11:52]
 Afgerond
 Michiel van Oosten [11:52]
 Ja, dat zit niet helemaal lekker.
 Lucas Oost Lievense [11:52]
 Als je geen status kiest dan is dat de default status
 Nou ja, werkt wel alleen geeft Privacy Valley net aan dat in een Engelse omgeving dat ook de default status is. Maar dan echt Afgerond en niet Completed
 En ik zie geen translation
 Michiel van Oosten [11:57]
 Je kunt natuurlijk je eigen (Engelstalige) statuses zetten voor een dossier type. Maar goed. Ik zie wel "completed" als een key in translations. Maar ze zien nog steeds "Afgerond" dus.
 Umm
 Lucas Oost Lievense [11:57]
 Ja precies
 Lucas Oost Lievense [12:03]
 Zal ik maar gewoon voor de nu werkende oplossing gaan?
 Dus een status Completed toevoegen?
 Michiel van Oosten [12:05]
 Ja. Kijk het na. Maar er is meer gaande daar. Wist ik al. Probleem is dat DC app 'zomaar' default statuses voor je maakt. Dat clashed als je op gegeven moment echte statuseses maakt in dossier type editor. Om dat te vermijden, of tot ik daar oplossing voor heb, is het een goed idee om maar meteen je statuses aan te maken in nieuw dossier type. Dan weet je zeker wat de statuses zijn voor een dossier type.
 Lucas Oost Lievense [12:06]
 Ja prima
 Ok dank
 Mag van mij ook uit hoor. Bij nieuwe dossiertype moet je gewoon statussen aanmaken
 Michiel van Oosten [12:06]
 En het clashed vooral als je dus "Afgerond" of "Completed" gaat toevoegen als status. Want DC app heeft zijn eigen "Afgerond" al voor je aangeboden.
 Ja, vind ik ook.
 Dus als je een nieuw dossier type aan maakt krijg je meteen al "Afgerond" en "Open" als statuses voor je checklisten en dossiers.
 Ingevuld voor je.
 Of die default statuses eruit in DC app. Maar dan moeten mensen wel die default statuses gaan toevoegen aan hun dossier types die ze all hebben.
 Lucas Oost Lievense [12:10]
 Ja dat laatste wil je ook niet. Maar dan moeten we iets maken die dat echt als Status toevoegt in die dossiers. Dus voor iedere dossiertype specifiek een eigen status als ze niets hebben
 Dat is altijd het lastige met legacy
 Michiel van Oosten [12:12]
 Nou, ik denk er even over na verder. Idd, het is de legacy. Fix het na
 supergroups. Ondertussen, gewoon altijd statuses zetten voor nieuwe dossier
 types. Dan is er geen probleem verder.

 NOTES: Doesn't make sense. If no statuses are defined, oldStyleStatus kicks in.
 Which means we get Completed/complete as only status. And reopen as 'status' if
 status is "Completed". Both get translated when oldStyleStatus is true.
 If oldStyleStatus is false, status itself doesn't get translated, but 'verb'
 does. BUG BUG BUG: remove translation here as well. It'll be the same as the
 status. And we don't want it translated!!!!!
 /home/mj/src/DC/chin/ember-cli/frontend/app/pods/components/detail-buttons/component.js
 /home/mj/src/DC/chin/ember-cli/frontend/app/pods/components/detail-buttons/dossier-checklist/template.hbs


  PRIORITY!! default status is nil and 'Completed', add them to dossier statuses by default or???
 Because if people add afgerond they will have two 'Afgerond' type of dossiers,
 one 'Afgerond' and the other 'Completed'.

**** Currently renaming all dossier/checklist statuses in bilby, is not ideal!!!!!
     Every status has key, or the label is the key. This can be used to lookup
     label in DC app. But search and dashboard would have to be amended as well
**** Renaming existing status to another existing status should not be possible

**** Setting all inactive leaves nothing to select in DC app.
**** To rename currently 'Completed' dossiers/checklists status add a status called Completed to status list for dossier/checklist
     Maybe add this status to all dossier-types where any checklist/dossier
     related to dossier type has that status already, using migration.

  deal with legacy statuses system.
  Default is 'completed', or afgerond. Add it to statuses for dossier type and you
  can change its name. Consider migration to add completed to dossier type if
  there's any dossier with that status.



**** bilby

***** Currently renaming all dossier/checklist statuses in bilby, is not ideal!!!!!
    Every status has key, or the label is the key. This can be used to lookup
    label in DC app. But search and dashboard would have to be amended as well
***** Add warning dialogs for renaming!!!!





 ***
***** DONE Add default statuses to new dossier type in bilby
***** Disallow having less than 2 statuses

***** Set default status to dossier and checklist in chinchilla.

***** Make sure filtering works


*** dossier-type many-to-many checklist templates
       So choose templates to link to dossier-type
       In dc app show by default templates linked to user, unless specific templates
       are linked to dossier-type, then show them.
   In admin use an autocomplete to select templates, a la statuses

** release 0.10.0 (theming)
*** Theming triangle remove?
*** per group theming for apps
*** per group pdf and overview logos

** release 0.x.x

*** Remove a status or item from editable list that you've just added should
 just remove it and not prompt save!!!
*** Make sure subdossier type group_id is set properly  
   Don't show subdossier type if it isn't!!!! 
*** autocomplete on demand load for status
 load all statuses of group
*** Feedback/bug report form a la chrome  
 So with screenshot, text, url, file upload, system info
*** It's possible to disable group-admin for all users. Which leaves the group without access to admin_new
*** autocomplete row changes height between link and autocomplete!!
*** Add bugsnag last transaction and last remote query maps to error dialog notification

*** Save images *after* new record is created
   Currently hiding logo upload rows when record is new. Not ideal 
  Problem is we can't save images of a record we don't have the id of yet. We
  save images first, then the record. If the record is new we need to save the
  record first!! So we need to save the images in the post remote. Yak 
*** GITHUB make scroll work at any height
*** more per group translations options

**** In dc app fetch shadow translations scoped to group_id for efficiency
    Added note about it in translations.rb model
**** when switching between groups have same translation open!!
**** What if supergroup wants -its- translations as the root translation???
    That's easy in dc app, we just filter the shadow translation on the group id
    of the super group.

    For the regular translations in bilby we currenlty get the shadow translations
    filtered by user group id. We would need to get the shadow translations of
    the users group's group-id, as well as the shadow translations for group.

    In bilby in the translation editor we need to get and show the shadow
    translation of super group as well as the shadow translation of the group it self.

    But all this only if the option on the supergroup is to fall back to -its-
    translations before falling back to the root translation

**** use (:locales config) whenever listing/enumerating locales
     so for example on page-config and translations admin page

**** DONE have option on translation page for dc admin to see what translation keys in app are -not- in translatiion table!!
    and have option to import them

**** Translations are not fetched when not logged in!!!!
***** Make sure that current group translations are used when logged out. Same as theme

*** Extract undo-redo to mutate helpers
*** resolve get-selected conflict in reconciler parser read.cljc
*** Make sure staging env is used on staging
   Cause we want to staging config to have an effect
*** Underline red any form errors, so -> reeval invalidate on input and is invalidated
*** Add validation for uniqueness of email within group?
    And say in msg an email can only belong to one group at a time

*** Line up cursor better in ff in name-format static text
    It jumps to right position, but still

*** Check safari for text-input bug of extra newline (use simone's puter..)
*** BUG? admin/bulk-update-group-expiration
 3. Client ;;side updating dirty records needs to update meta record as well, not ;;happening at the moment.

*** BUG i18n translation (and (seq translation) translation)
   if translation is empty give key

*** BUG where renaming (recenlty cloned?) dossier type give back error:
 Can't update non existing record
 {:id 500 :table :dossier-type
 mutation :save-dossier-type

*** reconciler.core Network level success status, not response status :success? cb-success?
   What do we do with this in mock mode or e2e test modes?




*** Don't show list for normal group-admin when looking at own group!!!
*** GITHUB counter on admin pages.
 So fetch first page, but also how many there are in total.
 Gotta adapt backend and add some general api for that so that frontend can ask
 for it easily.


*** import dossiers button on dossier type page
*** Multiple presets for pdf options
   They get listed in DC app each, instead of just the one 'Make pdf'.
   Put them all in the json in the pdf-options column of groups.
   In bilby ui needs to be expanded to add/edit/remove presets. Add column on
   left side again.

*** Cache images
   
   
   


* templates editor release
See templates-editor.org
* release 0.10.0 READ REFACTOR (based on supergroups branch, which has templates editor)
** One more problem: Saving of joined data!!!!!! And undo/redo/revert/is-dirty!!!
  Flattening data a la statuses is one solution. Actually saving data in backend
  is a big pain in the ass.
  Dealing with joins a la fields is another pain the ass!!

Like statuses, dropdown options and questions of qlists of qlists of qlists etc.
*** Possible solutions
- we could have save/undo/redo/revert per join maybe? So not for the whole page? 
- using a transaction in backend.
- use clever algorithms for calc-mods, undo/redo/revert/is-dirty and saving and
  error reporting
  
*** Flattened
**** Example: statuses
**** Plus
- Dealing with undo/revert/redo/is-dirty is frontend is super easy, just a prop, 
**** Problems:
1. Only works one level deep really
You don't want to flatten data that has flattened data really

2. Keeping front and back synced is a bit of a pain:
Backend gets flattened data, it then has to retrieve the data from the joined
table and compare and update join table properly. And do error reporting
properly. And returning proper unsaved data in case of error

3. But most importantly: om works on normalized data. If you denormalize before
   giving it to om (like for statuses) you lose one of om's main features. Which
   is syncing same pieces of data across the ui. 
   
-->> So this is a no go. 

*** Joined
**** Example: fields
**** Plus
- The "true" om way.     
**** Problems    
1. undo/redo/revert/is-dirty in frontend
I do tricky stuff for dossier-types->fields in when undoing etc. This would have
to be generalized for generic join-join-join situations.

2. You'd have to also generalize calculating mods. So you have a table of
   records that's got modifications of one kind:
   ->> individual records get their props modified.
   Only relation we deal with is belongs-to really. So a record gets its
   other-table-id set. Which is just property. Many-to-many joings are really
   belongs-to relationships via an intermediate table. Only complication is when
   we're not to set the belongs-to for some reason. We don't save the record of
   course. With existing records we return the record with the other-table-id
   set to the original value. With new records we do ???? It's an invalid record
   isn't it. So we return the record as original table-data, under the tempid
   and add some data to the record map about what went wrong. We could do that
   for existing records as well perhaps. Frontend can then deal with it. Cause
   it should never get into that situation really if it did proper validation
   itself first. 
   #+BEGIN_SRC clojure
     {:table-data {:status/by-id {1 {:deleted false}
                                  "S1-tempid" {:label "new label"
                                               :_error {:message "unable to save"
                                                        :reason "Not more than 5 statuses allowed"}
                                               }}}
      }

   #+END_SRC
      
3. How do you Save this data, as in how do you send it to the backend?
    #+BEGIN_SRC clojure
      {:mods {:dossier-type/by-id {1 {:name "changed-name"
                                      :group-id 1
                                      :company-id "C1-tempid"}
                                   "D2-tempid" {:name "new dossier-type"}} ;;has-many fields, belongs-to group, company
              :group/by-id {"1" {:name "modified group name"}} ;;has-many dossier-type
              :company/by-id {"C1-tempid" {:name "new company"}} ;;has-many dossier-type

              ;;:dossier-type-id 1 -> we rename the status all dossier of that dossier
              ;;type with that status. So all dossier with status "1".
              :status/by-id {1 {:label "changed-label-name"} ;;add a multimethod hook for table/prop
                             ;;we soft delete, so just save prop as normal or:
                             ;;in hook on table we check for :deleted prop delete the row if we want
                             2 {:deleted true ;;or 
                                :client-prop/deleted true} 
                             } 
              :field/by-id {5 {:label "changed-label"} ;;dossier-type-id 1
                            "F1-tempid" {:label "bla"
                                         :more :props
                                         :dossier-type-id "D2-tempid"}} ;;belongs-to dossier-type, has-many options
              :option/by-id {1 {:text "changed-text"} ;;belongs-to field
                             "O1-tempid" {:text "bla"
                                          :order 2
                                          :field-id "F1-tempid"}
                             }}} 
    #+END_SRC 
    What to do with many-to-many joins in a general way?
    Where to start saving? Work it out from the type of joins? So start at the
      highest "belongs-to" record in the hierarchy? What if there's more than
      one root? Or indicate where to start?
    When to stop saving, what to save if a save fails? What to report back?
   A many-to-many join is a record that has a belongs-to relationship with two
   other entities. What to do with them?
   What about about recursive joins or joins to self?
   
    #+BEGIN_SRC clojure
    {:mods {:qbucket/by-id {1 {:name "q1"} ;;has-many qb-qb's, has-many qu-qb's
                            "Q2" {:name "q2"}
                            "Q3" {:name "q3"}
                            }
            :qbucket-qbucket/by-id {"QQ1" {:qbucket1-id 1 :qbucket2-id "Q2"}} ;;belongs-to qbuckets (two of them)
            :question-qbucket/by-id {"QUQB1" {:qbucket-id 1 :question-id "2"}} ;;belongs-to qbucket, question
            :question/by-id {1 {:question "modified question"}}}} ;;has-many qu-qb's
    #+END_SRC   
4. How do you do error reporting and undo optimistic update?  
5. If you want to duplicate normalized data in a row how do you do that? Like
      in statuses and options for instance

*** Solution:      
**** 1a. Generic undo/redo/revert
**** 1b. Generic is-dirty
**** 2. Calc-mods
- unsaved-records should be called unsynced-records or out-of-sync-records     
- Make a new mutation: save-records (plural: "records").     
- We have a list of tables that are edited on a page, or we pass in a list of
  tables we like to save in one hit. 
- And a list of all 'unsaved' records. So all out of sync records. All records
  with 'mods'. We create a table-data map with all mods per table and id. Which
  we send to the backend.
- Every time we do a modify record 'unsaved-records' gets updated. Might as well
  add the actual mods to it actually
- When we receive our mods back from backend we update unsaved-records. If a mod
  of a record doesn't have the _error or _out-of-sync or _unable-to-sync or
  _sync_failed key set it will be removed from unsaved-records.
- Undo/redo updates unsaved-records
- When deleting a new record update unsaved-records
- When deleting a records remove all unsaved joins from unsaved-records
**** 3. Saving data
     
1. Save mods as table-data. So like 
    #+BEGIN_SRC clojure
      {:mods {:dossier-type {1 {:name "changed-name"
                                :group-id 1 ;;belongs to group
                                :company-id "C1-tempid"} ;;belongs to company
                             "D2-tempid" {:name "new dossier-type"}} ;;has-many fields, belongs-to group, company
              :group {"1" {:name "modified group name"}} ;;has-many dossier-type
              :company {"C1-tempid" {:name "new company"}} ;;has-many dossier-type

              ;;:dossier-type-id 1 -> we rename the status all dossier of that dossier
              ;;type with that status. So all dossier with status "1".
              :status {1 {:label "changed-label-name"} ;;add a multimethod hook for table/prop
                       ;;we soft delete, so just save prop as normal or:
                       ;;in hook on table we check for :deleted prop delete the row if we want
                       2 {:deleted true ;;or 
                          :client-prop/deleted true} 
                       } 
              :field {5 {:label "changed-label"} ;;dossier-type-id 1
                      "F1-tempid" {:label "bla"
                                   :more :props
                                   :dossier-type-id "D2-tempid"}} ;;belongs-to dossier-type, has-many options
              :option {1 {:text "changed-text"} ;;belongs-to field
                       "O1-tempid" {:text "bla"
                                    :order 2
                                    :field-id "F1-tempid"}
                       }}} 
    #+END_SRC
2.We use our db-config to work out the graph of our mods
   a. Find the roots in the graph of the mods (So the roots are company and group in the mods above)
   b. Take the first root
   c. Save the record (it either succeeds or fails)
   d. If it fails we return original record table-data (empty map if new) with error data added to
   record map and then if:
       1. it's a new record we do not save any children but for all children,
          recursively we return original record data (empty map) with error data
          added (parent couldn't be updated!) and with rest of roots go to b
       2.it's an existing record we continue saving children and for every child
       we start at c. again
   e. If it succeeds then for every child of the record go to c.
   f. Once we're out of children for the root go to b. with rest of roots
 
If a save succeeds we add an empty :_error key to the record to clear the key
and indicate that the save was successful.

We save from has-many's graph root down so we know the ids to fill in to the
children when parent is a new record.

NOTES:
- If a parent that exists already fails to update children will get saved. If
their validation depends on the parent at all then it will succeed when
otherwise it might not have if parent hadn't failed to save. But parent should
be set back to the original value in the frontend. And frontend should be more
careful with saving invalid records.
- We could have a 'soft' validate. Where it doesn't throw an exception but
  returns a 'cleaned' or correct record to save. Which would be handy to
  'correct' a deleted flag for instance. And other props would still be saved
  then, instead of the whole record not getting saved. So you remove the props
  with 'illegal' values from the record to save..

**** 4. Error reporting
For a mutation we record the error under the save-record mutation key in the
result. However better is just to put the errors in table-data under the
relevant record. And just merge that. The component then gets the error itself.
If some application wide error reporting is needed we can set app-state in the
reconciler's pre-merge hooks. So we can set :client/warning. So component
localized error reporting.
**** 5. Duplicate normalized data.
    Like for statuses and options. Just add a hook on table and do your thing.
    If in the hook you see that the label is updated for a status you update all
    dossiers that have status-id set to the id of the status.
**** 6. Reversing a delete 
1. soft delete (setting a delete flag)
    Validation will fail, record will not save at all and original table-data
    will be returned.
2. hard delete
 Validation will fail, record will be deleted and original table-data
    will be returned. However these hard deletes are not part of saving a
   record. And have their own mutation. Which will fail and should return
   original table-data then.
   In general avoid hard deletes as much as possible. We want to mutate data,
   record the change and move on. Not remove any data ever really. If a record
   is deleted that's its last state, not to be modified anymore and should be in
   the db as such.  
   
**** 7. Moving an item to a different parent wich backend doesn't accept 
    So parent-id ref is not accepted, cause new parent is not allowed to have
    it, or old parent is not allowed to let go of it. Whatever the case,
    parent-id ref is not going to be updated.
    So we have a problem in the frontend cause we moved a ref from a list of
    idents from one parent to another. And this needs to be moved back. Which is
    purely a frontend concern. So tackle this in a pre-merge-hook I think, for
    the particular situation.

** Write save-mods tests!!!
Started alreay, see namespace
** Write recursive self join tests
Including returning props of the join by adding qbucket-qbucket/order prop
Perhaps aum-next should prefix them again properly on returning to frontend??
** modifying pdf-options adds group to unsaved-records, it shouldn't
In pre-merge hooks we can put pdf-options of a group into it's own table.
Undo/redo/is-dirty works then as it should. Also query {:pdf-options-for-group
[:options]} in component. In hook for that key we query for the group record
instead.
Just when we're saving we need to save group with just the mods for pdf-options.
So probably then needs a its own save mutation.
** DONE Extract app-state dialog for reuse

** make rest of app according to new system
** selected-item problem
Remote for subjoins is not sent when ???
Like for search-for-supergroups for users
Or company or group for selected user
something to do with not checking for the props separatly, it happens in
db->tree. Or something
** get frontend tests running again
** add more frontend ui tests!!!
** Add default translations to bilby??  
** Clean up post-remote
Move fns from bilby-reconciler to some generic ns where we call the fns from
post-remote as appropriate.
** Sort out multipe remote situation.
Like calling lawcat or tent (rails) in the middle of query. At least document
it on how it works now. Which might be pretty ok.We can probably use om-path a
bit more and/or add some data to the tree in our db->tree
** Count active users for the month/period for group
  1. Ask for data as normal. So ask for all events for users for the group where
     active field has been modified up to end of period requested.
  2. Calculate in backend same way as we do for asking for count of some query
     over a table.
   
** DONE speed up cljs compilation
** DONE mutation doesn't get meta of record anymore
   CLOSED: [2018-10-26 Fri 13:51]
   :LOGBOOK:
   - State "DONE"       from              [2018-10-26 Fri 13:51]
   :END:
So save doesn't work. Cause db->tree strips the meta!!
   
** DONE when we print transaction use pp
   CLOSED: [2018-10-24 Wed 17:15]
   :LOGBOOK:
   - State "DONE"       from              [2018-10-24 Wed 17:15]
   :END:
Well, for mutation, and for key to load use :#cp
** DONE Show total length of list on the left!!!!
   CLOSED: [2018-10-18 Thu 14:13]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-10-18 Thu 14:13]
   :END:
** DONE Idea for on demand loading, no good.
   CLOSED: [2018-09-16 Sun 19:33]
   - State "DONE"       from "TODO"       [2018-09-16 Sun 19:33]
 Give a (sub)query some kind of param which alerts the parser to call a function
 in the app config . Perhaps in the map for the page and state. Or in some
 namespace. Using multimethods. Actually all constant config needs to move from
 app state to a config namespace, or *the* config namespace? And resolve by
 page/table/some-keyword? Maybe use hiercharchical dispatch on keywords? In any
 case give this fn the app state (and remote, such as bilby, or lawcat) and have
 it return ast, or true, or nil. The parser will use this decide the remote for
 that part of the query.
When clicking on a form on a join, or join of a join, set app state
 appropriately so the fn can decide whether to return the ast or not.
 
** DONE rename read-for-target to read  
** DONE add doc for calc count   
** DONE add doc for using two more ways to have backend calc data
** DONE Better idea for on demand loading
  Implemented as db->tree with hooks 
   CLOSED: [2018-10-24 Wed 15:14]
   :LOGBOOK:
   - State "DONE"       from              [2018-10-24 Wed 15:14]
   :END:

Improve parser so you can write read methods for all keys that get called for
target=nil. They get called when target is a remote, which helps in modifying
the query. But we also might want to return custom data when that key is asked
to return data. Currently the om/db->tree fn resolves queries against the db.
Bypassing our read methods. So plough through that fn, copy and modify it.

When we control what to return, for remote and value for all keys then we can
parse the query for more info such as what keys to load: 
[({:user [:id :name :*email :*tent-id]} 
{:offset 20 limit 20 :calc :count :where [:name :like "foo"})]

We can add following params, and omit the starred props when loading the list. When
loading a record we can set params to:
{:where [:id := 10]}, and add starred props.

We just need to make sure we always return the list data, not whatever backend
has returned for that query. So we need to cache the return values for list like
we do for item-batch. So when we set selected-id for that list we need to cache
the list we already have. Or append whatever the case might be. Quite similar to item-batch.

If we catch all keys when target is nil we can also replace the rest of the
set-params with a read method that grabs some specific params from the app state
to determine what to return to the remote and as value, like for autocomplete

So we can this way have paginated lists within paginated lists for instance.

We can also for instance add a param like {:calc :count} and have backend return
something like this:

{:items [{:id 1 :name "foo"} {:id 2 :name "bar"}]
 :count 42}
 
for this query:

[{:bla [:id :name]} {:where [:limit 2] :calc :count} 

On read we need to return vector under items key. And maybe set a first item
with the meta data such as count, or set as meta data to the vector (but doesn't
work if count changes but data doesn't), or return count when asked for it in a
client key. 
We could write another query such as:

[{:calc/count {:table :bla :where [...]}] 

but we need to set the where clause twice in frontend, and calculate sqlvec
twice in backend. Better would be to just have backend call the same query again
but without the where limit clause.
   
But being able to catch all keys with a custom read method for all targets
(including nil) would enable on demand loading. You just set flags in app state,
or page state by table,whatever, and adjust remote and what you return as value
accordingly. 



* release 0.9.0  (dossier-type-join-statuses-by-id, based on release 0.6.0)
** bilby branch dossier-types-join-statuses-by-id
e2671e51 * dossier-types-join-statuses-by-id github/dossier-types-join-statuses-by-id Fixed tests
** dc app branch statuses_by_id
522c04914 * statuses_by_id github/statuses_by_id Fixed two more tests


* 0.8.0 misc features
** DONE linking of templates to users in admin, iso link templates in t&t
** TODO use fields from parent dossiers
starting with nameformat


* 0.7.x supergroups fixes
** DONE backport calc count from templates branch

** TODO Add bugsnag api keys
** DONE Switch account between groups ->branch: better-duplicate-email-handling

I can do a clearer alert quite easily. I can probably show the group as well.
Thought that's easily found out of course by searching for the email address, in
another tab perhaps. About automating what you guys do. I could add a
confirmation dialog when disabling an account asking whether you would like to
add -inactive to the email address. Or automate it even more by asking whether
to disable and rename the account with the duplicate email. Whatever we do, we
cannot go around having unique email addresses. Proper solution would be of
course to have master accounts which are then linked to sub accounts per group.

First show clearly in a nice dialog when an email address is already in use.
Second, ask whether to rename duplicate account's email address and prompt an alternative email address. Such as
foo@b.com-inactive-Amsterdam-Oost-123 where 123 is account id, with or without group-name.
** TODO Add abbreviation field to group
Also enable search on it
** TODO fix reset password
It's still calling https://digitalechecklisten.nl/api/v2/passwords, but then from https://www.digitalechecklisten.nl/admin_new/
Sarah Polan [17:14]
 Ok. I am on the train, but will try it when I get a chance.
Michiel van Oosten [17:15]
 We should redirect everyone to one or the other, with or without www, and/or I probably should send the api call to the right address depending on what the host is for admin_new. Didn't realize.
** TODO fix image upload
-> brand:
Increase max dimensions, position centred vertically. Add instructions:
-center text on 300x50 or 600x100 image. Make background transparent, letters
anything but blue.
** TODO upload image, then give random name
So that people can upload images with the same name. Currenlty nothing happens
because system thinks it's the same image.



* DONE Supergroups deploy
** DONE Check dossier dropdown!!!!
** DONE Write supergroups intro

* DONE release 0.7.0  (supegroups and per group translations, based on release 0.6.0, which has templates editor) :release:0.7.0: :release7:
** DC app branch:supergroup-translations
   82571f491 *   supergroup-translations github/supergroup-translations Merge branch 'release_master' into supergroup-translations
** Bilby branch: supergroups
   8e66af80 * supergroups local/supergroups github/supergroups Small reformatting

** DONE DEPLOY
*** DONE Bilby branch: supergroups
   8e66af80 * supergroups local/supergroups github/supergroups Small reformatting

*** DONE DC app branch:supergroup-translations
   82571f491 *   supergroup-translations github/supergroup-translations Merge branch 'release_master' into supergroup-translations

*** DONE Push bilby and chin supergroups to github
*** DONE Put bilby 0.7.19 on staging-black
*** DONE Put chin supergroup-tr-5 on staging-black
*** DONE Put chin supergroup-tr4 on staging-black

** DONE bugsnag working??
** DONE Why is default group_id 10. in translation.rbxs
** DONE Test pdf translations
** DONE Test pdf translations
** DONE Why is default group_id 10. in translation.rbxs
** DONE try different sizes logos.
see effect on setup object size.
** DONE about dialog text?? Ask Lucas
** DONE valueopen input component diff
check!!!
** DONE about dialog text?? Ask Lucas
** DONE obs.rb semicolon

** DONE put group extra fields before created_at updated_at

** DONE Test with dev db
** DONE Setting company logo, group logo, create pdf etc
** DONE obs.rb semicolon


** DONE put group extra fields before created_at updated_at

** DONE Test with dev db
** DONE Setting company logo, group logo, create pdf etc
** DONE bugsnag working??
** DONE AFTER MERGE WITH RELEASE_MASTER VERIFY!!!
- DONE save user,
- DONE group admin switch
- DONE saving and renaming statuses, dropdown options


** DONE Fix tests for bilby
** DONE Reset password link on user page doesn't work, csrf token invalid
** DONE Rename events to how Jacob likes to see them named
** DONE Use obs.core from dc-utils

** DONE Make translations migration in chinchilla or add translations to translations.clj

** DONE archived
*** DONE supergroup branch for chin is super-translations
    CLOSED: [2018-10-01 Mon 11:27]
    - State "DONE"       from              [2018-10-01 Mon 11:27]
*** DONE Merge supergroup-translations with supergroups for bilby
   bilby branch is supergroups 
*** DONE Tests passing for chin and bilby
    CLOSED: [2018-10-01 Mon 11:25]
    - State "DONE"       from              [2018-10-01 Mon 11:25]
*** DONE Merge latests release_master with bilby and chin
    CLOSED: [2018-10-01 Mon 12:50]
    - State "DONE"       from "TODO"       [2018-10-01 Mon 12:50]
*** Spec
   Open up translations page to group admins. Add group-id to translations rows.
   Load all translations as normal, so all translations with no group-id. These
   are not editable by group admin. However a group admin can add group specific
   translations for existing keys. This will create a row with en/de/nl
   translations for a key. Put the key for the translations not in the key col,
   but in key-ref col or something, since key col has to be unique. And so we can
   use it to lookup the original translation We can pull in the group specific
   translations easily in the query for for the translation record.

 In bilby, when looking up a key, see if there's a group specific translation
 linked to the translation, see if's there and active, if not, use generic
 translation.

 In chinchilla pull in group specific translations in the setup object, look
 there first for a translation, and if not active or not there, fall back to
 regular translation.

*** DONE don't use label as key for help dialogs in label-value row!!!!

*** DONE editing user email
**** DONE Nicer msg on duplicate user email!!
   Currently it's a sql error, and it's not being picked up by error system, and
   msg sucks!!
**** DONE a user's email can be with leading/trailing spaces!!!
   trim by default!!

*** DONE refresh login page on translations/job offers/support questions and you get react warning:
 react-dom.inc.js:526 Warning: Can't call setState (or forceUpdate) on an
 unmounted component. This is a no-op, but it indicates a memory leak in your
 application. To fix, cancel all subscriptions and asynchronous tasks in the
 componentWillUnmount method.

*** DONE Closing help dialog is not working!!!
 ok button does nothing!!!

*** DONE fix company link on user page!!!
   clicking it modifies the user apparently.

*** DONE when resetting translation it uses empty shadow translation in dc app still,
     which is empty!!

     shadow_translation = Translation.where(:translation_id => root_translation.id, :group_id => group_id).first
     translation = shadow_translation[locale] if shadow_translation.present? && shadow_translation[locale].present?

     Looks like it thinks it's present.

*** DONE check backend shadow translations, so for pdf etc.

*** DONE Does a supergroup-admin have the DC translation admin options dropdown?
   Yes, but no more!!!
*** DONE Logging in as normal user should log you in, but give you link to DC app
*** DONE Clear warning dialog on enabling user
*** DONE Indicate clearly disabled users
*** DONE Setting/unsetting company is not working properly!
*** DONE When deleting new user list on left is not updated!!!
*** DONE Delete user
    ;;It's possible to delete users on the backend by setting
    ;;this to true and complete the delete user validation on
    ;;the backend, and making sure it's working properly. As
    ;;in, only delete the row if no other record in the db
    ;;refers to it. This is a bit cumbersome, and also would
    ;;need to be kept up to date. Hence setting this to
    ;;false. Admin can filter out disabled (deleted by flag)
    ;;accounts by filtering them out if they're cluttering
    ;;his ui.

*** DONE Adding user to group, do we update groups_users table??
   Yes


*** DONE work out why we have a non existing 0.7.8 version on the staging server!!!
     Is it on other computer still? Or did we force push

*** DONE Add functionality to add and remove a group to a supergroup

*** DONE make sure custom logo on pdf works in dc app
   so get logo from group, not from company!!, but fall back to company logo

*** DONE use data url from local storage when not logged in yet.
*** Wrench for table on terrace!!!
*** DONE Forgot password link to user form
*** DONE Check whole admin for supergrup admin!!!!
*** DONE Got some errors in demo!!!!
*** DONE Logo didn't show first time
   Not seeing it
*** DONE Unsaved record warning

*** DONE On new group, and new dossier type dialog doesn't jump to which group?
*** DONE Saving user works ok? Got error!!!
    {:message "Can't access groups other than own group or subgroups",
  :context
  {:record nil,
   :user-group-id 282,
   :user-subgroup-ids [283 285 286 287],
   :error :validation},
  :mutation "save-record",
  :params
  {:id "dd8585d4-519b-4148-9cf0-fbf41b3df5a9",
   :table :user,
   :query
   [:updated-at
    :created-at
    :password-expires-at
    :company-id
    {:company [:id :name]}]}}
*** DONE Fix dc-url situation
    CLOSED: [2018-09-05 Wed 15:45]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-05 Wed 15:45]
    - State "STARTED"    from "TODO"       [2018-09-05 Wed 15:09]
    :END:
   Do we need the host at any time??? Like https://digitalechecklisten.nl/ ??
*** DONE Validate email to be a real email address for user!!!
    CLOSED: [2018-09-05 Wed 16:27]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-05 Wed 16:27]
    - State "STARTED"    from "TODO"       [2018-09-05 Wed 15:46]
    :END:
 Cause DC app chokes when creating dossier with that user otherwise!!!
 Cause it does validation on it for some reason
*** DONE Set maximum sizes allowed for app logos!!!
    CLOSED: [2018-09-05 Wed 17:08]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-05 Wed 17:08] \\
      Also added snackbar to pdf-options page
    - State "STARTED"    from "TODO"       [2018-09-05 Wed 16:27]
    :END:
   See app/theme for maximum dimensions

*** DONE On error of upload set save button to error!!
    CLOSED: [2018-09-05 Wed 17:22]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-05 Wed 17:22]
    - State "STARTED"    from "TODO"       [2018-09-05 Wed 17:22]
    :END:
*** DONE Implement using group logo and brand in bilby
    CLOSED: [2018-09-05 Wed 18:06]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-05 Wed 18:06]
    - State "STARTED"    from "TODO"       [2018-09-05 Wed 17:25]
    :END:
   
*** DONE Implement preview button in bilby
    CLOSED: [2018-09-06 Thu 15:22]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-06 Thu 15:22]
    - State "STARTED"    from "TODO"       [2018-09-06 Thu 10:44]
    :END:
*** DONE persist logo on logout
    CLOSED: [2018-09-10 Mon 13:35]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-10 Mon 13:35]
    - State "STARTED"    from "TODO"       [2018-09-07 Fri 10:46]
    :END:
   
*** DONE Add bugsnag notification on error. So when user would get error dialog in frontend for sure
    CLOSED: [2018-09-10 Mon 14:44]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-10 Mon 14:44] \\
      But need to api key still, and add last transaction and last remote query maps
    :END:
   
*** DONE Chinchilla overview should use group.logo, not company.logo!!
    CLOSED: [2018-09-10 Mon 14:58]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-10 Mon 14:58] \\
      It does already somehow. It uses the pdf logo
    :END:
   
   
*** DONE Validation of setting group-id (only superadmin can do this!!)
    CLOSED: [2018-09-10 Mon 15:04]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-10 Mon 15:04]
    :END:
   
*** DONE Do query for supergroup so it gets updated as far as subgroups is concerned?
    CLOSED: [2018-09-10 Mon 16:36]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-10 Mon 16:36] \\
      On save we update the supergroups subgroup's idents
    - State "STARTED"    from "TODO"       [2018-09-10 Mon 15:32]
    :END:
   Or update supergroup in frontend, so add/remove subgroups etc
*** DONE about dialog in bilby
    CLOSED: [2018-09-10 Mon 16:59]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-10 Mon 16:59]
    - State "STARTED"    from "TODO"       [2018-09-10 Mon 16:43]
    :END:
   
*** DONE Calc-in-backend!! Don't use make-obs-path in frontend
    CLOSED: [2018-09-10 Mon 19:10]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-10 Mon 19:10]
    :END:
*** DONE improve file validation
    CLOSED: [2018-09-10 Mon 20:46]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2018-09-10 Mon 20:46]
    - State "STARTED"    from "TODO"       [2018-09-10 Mon 17:11]
    :END:
   Especially dowload by refactoring as it says in table/company.cljc
   Also sometimes we don't want to put file in a folder, but just replace the
   same one, like a logo for a group
   ;;TODO: rudimentary validation. This lets super-admin retrieve all files with
 ;;path starting with companies. This could be narrowed down by pattern matching
 ;;on the path
 ;;Or refactor somewhat:
 ;; Basically we don't have to use obs path in frontend, but can ask for a file by
 ;;   name, or just 'company-logo' and add info such as company-id, maybe
 ;;   group-id. Then we can build the correct url on the backend to fetch it.
 ;;   Also validation can be more thorough then.
  

*** DONE on logout group's logos are not used!!!
    CLOSED: [2018-09-10 Mon 21:08]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-10 Mon 21:08]
    :END:
*** DONE Use 'placeholder' keys to ask for 'calculated' data. So:
    CLOSED: [2018-09-16 Sun 19:30]
    - State "DONE"       from "TODO"       [2018-09-16 Sun 19:30]
 ({:calc/count [:count]} {:table :users :where [:id :< 10]})
 This can be dispatched using multimethod on backend. Instead of just returning
 empty map. In frontend resolves as normal.
*** DONE Fix tests for supergroups for bilby and chin
    CLOSED: [2018-10-01 Mon 11:21]
    - State "DONE"       from "TODO"       [2018-10-01 Mon 11:21]
*** DONE Fix frontend tests
    CLOSED: [2018-10-01 Mon 11:21]
    - State "DONE"       from "TODO"       [2018-10-01 Mon 11:21]
*** DONE Push fix for group-user to production
    CLOSED: [2018-09-11 Tue 18:38]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-11 Tue 18:38]
      0.4.26
    :END:
   
*** DONE Make PR for time qtype usability improvement
    CLOSED: [2018-09-11 Tue 18:39]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2018-09-11 Tue 18:39]
    :END:

*** DONE logo_updated_at is not set!!
   But it is set in the eventstore!!!
*** DONE file-transfer group 10 is hard coded
    obs-path (str "/" (cu/make-obs-path "companies/logos" 10 "original" file-name))
   I think I have updated code for that on computer at home
*** DONE Add logo to pdf-options
*** DONE Link under avatar to admin
*** DONE Create user set deleted by default
*** DONE Rename deleted to disabled
*** DONE supergroups demo
**** Log into demo accounts
  User your own account and password for DC (super-admin)

  Supergroup:

  Username: supergroup-admin@mail.com
  Password: irma

  Username: supergroup-user1@mail.com (normal user can't log into admin)
  Password: irma

  Subgroup:
  Username: subgroup-admin@mail.com
  Password: irma


**** Super-admin (us, blue) can do see everything

**** A supergroup admin (pink) can only see their users/dossier-types/translations/pdf options and for their subgroups

**** A subgroup admin (normal group-admin, yellow) can only edit their own data in admin_new

**** Change translations per group.
  -  For instance violation
  -  Note warning when editing group's translations
  -  Show how to select all groups (eg for users)

**** DC admin have some extra options to manage translation keys

**** Upload logos
  - Logo changes in pdf for DC
*** DONE Uploading logo on staging-black not working, getting 403

*** DONE Really odd bug!!!
    This was only in master. It was already fixed in 0.6.0 and onwards
    [1349.267s] [om.next] transacted '[(admin/save-user {:record {:email "sknoop2@od-groningen.nl",
                                                               :group [{:id 241, :name "Omgevingsdienst Groningen"}],
                                                               :group-id 241, :phone "", :name "Sander Knoop",
                                                               :is-dirty? true, :admin-for-groups [], :company-id 235,
                                                               :id #om/id["b19fefab-d296-4f30-9ef9-d214646f77e0"],
                                                               :tent-subject-id "301687", :gender "M",
                                                               :company {:id 235, :name "Omgevingsdienst Groningen (ODG)"}}, :table :user})],
 #uuid "ebb72417-a167-4e38-9e76-881c03241bf1"

 In error dialog:
    {:message    "Not able to perform query [({:admin [:id :group-id :user-id]}
    {:where [:and [[:user-id := \"b19fefab-d296-4f30-9ef9-d214646f77e0\"]
 [:group-id := nil]]]})]",
  :context    {},
  :stacktrace :not-returned,
  :mutation   "save-record",
  :params
  {:table :user,
   :id    "b19fefab-d296-4f30-9ef9-d214646f77e0",
   :query [:updated-at :created-at :password-expires-at],
   :mods
   {:email            "sknoop2@od-groningen.nl",
    :group-id         241,
    :phone            "",
    :name             "Sander Knoop",
    :admin-for-groups [],
    :company-id       235,
    :tent-subject-id  "301687",
    :gender           "M"}}}

*** DONE Creating new shadow translation on selecting root-tr leaves ;client/unsaved-records in funny state!!!
*** DONE Sort get-current-group-id out for when refreshing with no local-storage selected-group-id set
*** DONE When changing group for translations the admin app changes its translations as well
*** DONE When a translation doesn't have shadow translation yet we don't update the translation in the  search list cause
 that's referred to in the key :shadow-translation. Which doesn't exist yet. We
 need to create this when we we load it.
*** DONE in batch-items read remove :client/bla keys from any and all remote queries!!!!    (in bilby)
*** DONE When changing group for translations the search works ok, but it shows the translations of other group in list
*** DONE Set company to 1 for new users by default
*** DONE Can't edit company for user!!!!
*** DONE Proper link for 'Go to DC app' menu item
*** DONE Fix wrap-stacktrace for production!!
*** DONE Disallow empty translations!!! Or at least show the key if it is empty!!!
*** DONE Search through custom translations for group!!
      select * from translations  join translations t2 where translations.group_id is null and ((t2.translation_id = translations.id and t2.group_id = 11) or (t2.translation_id is null and t2.id = translations.id)) order by t2.key, t2.en desc;
 - Super admin or rather, when editing root keys/translations you can filter on
 empty, and sort on language.
 When editing translations for a certain group make it possible to select locale,
 and set a default locale, in local storage. Later (also?) in url.
 Which means you get the locale translations in the list on the left. Or list the
 default translations from translations-keys ns?
*** DONE Fix paging.
 - Any error in search-translations doesn't get caught?

*** DONE Undo/redo

*** DONE Bilby and chin translations for backend

*** DONE When loading app translations do they get clobbered when loading translations on translations page? Or vice versa?
   YES!!!!
*** DONE add option to add missing keys deduced from translations.keys ns.

*** DONE Keys with leading or trailing spaces?? What to do.
 Just trim by default? Also when looking up?
 No, is just allowed

*** DONE Enforce max length of 255 for translations

*** DONE BUG when changing translation and then resetting it, update unsaved-records!!!
   Changing page gives warning

*** DONE Editing shadow translations
*** DONE All groups mode.
 In this mode DC staff be editing the root translations
 Other won't be editing anything
*** DONE Copy translation of DC or supergroup to a group's shadow translation for a key
*** DONE Deleting/resetting shadow translations
*** DONE Editing root translations by DC staff
*** DONE We might want custom translations for DC as well.
*** DONE Setting is-dirty properly and show save button as green
*** DONE !!!! When adding new shadow translation, als add ident to :translation key!!!
*** DONE All groups in select groups dialog show only to DC users!!!
*** DONE For DC users above in red::
 Warning: You're editing the custom translations of group "So and so"!!
 Click here to edit global translations.
*** DONE Hide new and delete key for non DC users
*** DONE Using shadow translations in bilby
*** DONE Using shadow translations in chin
*** DONE  Record untranslated keys in console/local-storage a la chin
 Add functionality as in chinchilla where all untranslated keys get
 collected in console and can be printed out. Also first time set warning in
 console about untranslated key.
*** DONE Warn when deleting root translation with shadow translations!!!
*** DONE TEST Saving shadow translation!!
*** DONE BUG on translations page set <unknown key> when making new translation
    It'll show up red, and it'll be clearer there's a new key

*** DONE When deleting translations, what to do with shadow translations?
   Just leave them. In case root translation is deleted by accident it's
   possible to restore by hand. And it will get the same shadow translations back.
   Just look for shadowtranslations that point to a non-existing root translation.

*** DONE Logging out from translations page gives error


*** DONE uniform app.environment. Make it a cljc file
*** DONE pass translated label to dossier type blocks from dossier type form consistently
*** DONE hardcode english translations. Always use a namespaced hyphened keyword for a
  key -> keep adding to list of keys present in app. And remove if not used anymore!!!
*** DONE creator id cannot be empty for job offers new
*** DONE use standard rows on joboffers page
*** DONE updated chin supergroups-translation branch
*** DONE focus field label when adding new
 currenlty you have to click on it after having just dragged it into field list



* DONE quasi release 0.6.0 (maintenance) ->>> sync up of templates branch with main release branch (michiel)
** DONE backend tests
** DONE mockbackend
** DONE frontend tests
  e2e especially!!!
** DONE room for data explorer on left still?
** DONE can't input text when field is empty for translations
** DONE Saving user doesn't work.
Goes to save-user post-remote iso save-record
Maybe pass in symbol to post-remote in mutate method return map

** DONE remove templates page components and reads and mutations etc

** DONE Set placeholder in list for new record
Cause we can't see any red text for it otherwise!!
** DONE add note about how to improve file download validation
  Basically we don't have to use obs path in frontend, but can ask for a file by
  name, or just 'company-logo' and add info such as company-id. Then we can
  build the correct url on the backend to fetch it. Also validation can be more
  thorough then.

** DONE scroll doesn't work
** DONE log in, logout, login, stale data in group list
** DONE Deleting new record creates react noop error
    react-dom.inc.js:526 Warning: Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.
    in components.translations.page/Form (created by components.translations.page/Page)

** DONE deleting multiple fields at once doesn't work with new post-remote
   results of same mutations get grouped under the mutation key in a vector.
Then the post remote gets called one after the other in bilby.reconciler.core
** DONE ->>>>  Check this supergroups!!!  input field for name format is buggered!!!
** DONE delete field. save, undo, save, boom
** DONE input field for name format is buggered!!!

* DONE quasi release 0.5.0 (supergroups based on old release_master, in prod now)
** DONE in firefox the text input add <br> sometimes!!!!
  see translations page
** DONE Also happens in chrome. But does not show <br>
Also adding return, then backspace still leaves \n in the string. So Save button
stays green
** DONE include om source, but latest one (beta2) !!!                  :HOLD:
   - State "HOLD"       from              [2018-02-13 Tue 17:50]
  See on desktop computer ??
 remove src-om from gitignore??
** DONE Eddy feedback about nameformat and name not set for dossier (thought it was fixed)
    Hi Michiel, als ik dit dossier open zie ik dat de titel nog niet is aangepast. Staat me bij dat je het al gefixed had. Is die fix al gedeployed? https://staging-blue.digitalechecklisten.nl/app/#/dossiers/156874
of komt het doordat ik blue gebruik?
dit is overigens een gekloonde dossiertype
[13:06]
Michiel van Oosten Bilby is zelfde op alle staging kleuren. Umm.
Probeer op het ogenblik staging-black binnen te komen. Ogenblikkie
[13:08]
Eddy Steenmeijer hoeft niet a la minute hoor
ik ga morgen verder  aan de slag de dossiertypes
[13:24]
Michiel van Oosten Ieg, bij het clonen van een dossier type kwam de nameformat niet mee. Maar nu dus wel. Op staging. Is nog niet live. Zitten wat commits van Johnny in laatste release en hij zoekt wat tijd om dat nog 's te checken of ze goed zijn.
Maar goed, kijk dus of het geclonede dossier type wel de nameformat goed heeft staan. Zal het zelf ook nog's nalopen en testen.
[13:27]
Eddy Steenmeijer Ok, Thanks. Ik zal het morgen nakijken
** DONE devcards
** DONE integrate bilby-libs
** DONE Go back to own group after logging out.
Don't persist selected-group after logging out.
People make mistakes perhaps. Expecting to log into their own group
** DONE updated deps
** DONE Link on users page form to group and company  !!!!
** DONE EASY when listing super/sub groups for a group make them clickable!!
    CLOSED: [2018-04-03 Tue 18:06]
    - State "DONE"       from              [2018-04-03 Tue 18:06]

** DONE Supergroups

*** DONE user (so non admin) should be able to log in, but get welcome screen only, with link
 to DC app or something
*** DONE validate that you can't make a subgroup a supergroup!!!
*** DONE Perhaps a separate role, supergroup-admin
*** DONE Disable in frontend and disallow props that a super group can't set compared to DC!!!
*** DONE Finetune group ui
    Supergroups have a list of subgroups listed. Subgroup has supergroup listed. Both on group page.

  As DC superadmin we might want the option to add remove groups as well.

  Supergroups that create groups, they will be automatically subgroups btw.

  Also, perhaps not all options should be available to supergroup admins the way they are to DC staff.
*** DONE github BUG  New group dialog appears when in unsaved new group you select other group
*** DONE refactor database config
*** DONE remove user arg. Rewrite all validate fns to destructure user out of env
*** DONE -> event store hooks
    Need now for to keep track of any supergroup activity.
  Also keep track of historical admin condition of users.

*** DONE on/off switch for event_store. For testing for instance.
*** DONE EASY On group page take buttons on top out of scroll zone. So you always see them
*** DONE Remove line when empty label value rows block
*** DONE EASY group and company on user page: make them clickable!!
    CLOSED: [2018-04-03 Tue 18:06]


    - State "DONE"       from              [2018-04-03 Tue 18:06]

*** DONE Validate

**** DONE Set scopes and validations and permissions properly of dossier types, users, translations!!
    :created-at :updated-at? :id disallow in table configs for update,create?
**** DONE alerts_scheduled
**** DONE event-store
**** DONE support-questions
**** DONE job-offers
**** DONE admins

**** DONE groups
**** DONE users
**** DONE dossier_types
**** DONE fields

**** DONE Add read access tests!!!  So the testing of read scope
**** DONE test not-deleted-scope

**** DONE Also get rid of sql fn remove-child-dossier-type-id
**** DONE and refactor bulk-update-dossier/checklist-status
**** DONE and use generic update for this one as well: remove-child-dossier-type-id

**** DONE Record bulk-update sql events,
**** DONE Make sure to validate before doing *any* writing to the db
  So also for bulk-update!!!
  Perhaps make it unavoidable to validate before saving.
  Perhaps by adding proof of validation. Or by letting validate call the sql fn.

**** DONE Validate translations!!
 If group-id is set key should be null
 Also translation_id *has!!* to be set then, and vice versa
 If key is set, neither translation_id or group-id can be set.
**** DONE scope for delete?
**** DONE add scopes for crud after calling sql fn!!! Don't rely on mutations to add scopes!!!!
** DONE fix clj tests ,
** DONE Doc for sql fn
his is through the regular sql insert/update/delete/select/bulk-update calls
that bilby supports.
They don't go ahead unless there's some kind of validation
for them. You could call your scheduled-alert sql fns through bilby, but you
would have write some validation for them. Which is not a bad thing. But that
would be for later once supergroups and its (forced) validation system is in
releas_master For now, what dow we allow our users to read and modify in the
scheduled-alert table (edited) Anyway, no rush. I'll move on the next table. The
ones i know more about... I'll write some docs on the sql fn in the query ns. I
think it's not a bad idea if everyone went through that anyway eventually
actually. So we can add easily hooks (for eventstore for instance), and by
default block it unless someone thinks about and writes some validation for the
sql fn. (edited) Every sql fn call goes through 3 multimethods: process-params
(good for hooks etc), validate-sql-fn, and then process-result. First and last
don't need to be defined, but middle one does. Other wise it will fail. Anyway
that's how it works Or will work

** DONE Add translation keys for all keys in bilby.
  Write server side add-translations-keys mutation

** DONE Test update group admin switch for user
** DONE put translations and theming behind feature flag
** DONE Adding subdossier to -> open tree on left for parent to show subdossier!!!
  This is an issue when you collapse tree on left, and then create subdossier
  type for a dossier type that's in the part of the tree that's hidden.

** DONE More precise bulk update event
I actually record the 'bulk update.. where ..' event, but i'm thinking now i can
be more precise. I can record exactly which dossiers/checklists got their status
renamed actually

and to what then of course

** DONE Disallow same name groups
** DONE BUG selected-group = -1 doesn't work for dossier types
** DONE github BUG  New group dialog appears when in unsaved new group you select other group

** DONE BUG on creating group :query param doesn't work.
Returned table-data:
:table-data {:group/by-id {}}, That should have the query result for newly
created group


** DONE Refactor rename status in mutate.cljc
  If we're fetching dossiers/checklists with current status, might as well do a
  regular bulk update for either. So just update bla in (?,?,?)
  Yes, but better to do it in one transaction!!!
** DONE Add tests for bulk-update for dossiers and checklists
** DONE and validations to make sure only dossiers and checklists are updated that
user (some admin) has access to!
Well, frontend user cannot directly call these sql fns. Bulk updating status for
dossiers and checklists and password-expires-at for users is carefully setup in
the mutations.
** DONE BUG validation requires group-id to be set for dossier type!!!
  Which isn't set if there's no group selected yet

** DONE BUGGY In user, it tries to save :scheduled-alert as a mod. backend filters it out, but
shouldn't send in in the first place!!!
** DONE BUG Fix setting group for user, it doesn't persist when changing user before saving.
  Also if no group is selected you need to be able to select a group
** DONE BUG Also funny error when switch page to create company for new user for new group.
 [(admin/save-user
  {:table :user,
   :id "32827978-00e0-4a09-a48d-34f064180d28",
   :query [:updated-at :created-at :password-expires-at],
   :mods
   {:email "super@axion5.net",
    :group-id 11,
    :name "supergroup-admin",
    :admin-for-groups [{:id 11}],
    :company-id 11,
    :tent-subject-id "123"}})]

 {:message
 "Not able to perform query [({:admin [:id :group-id :user-id]} {:where [:and [[:user-id := \"32827978-00e0-4a09-a48d-34f064180d28\"] [:group-id := nil]]]})]",
 :context {},
 :stacktrace :not-returned,
 :mutation "save-record",
 :params
 {:table :user,
  :id "32827978-00e0-4a09-a48d-34f064180d28",
  :query [:updated-at :created-at :password-expires-at],
  :mods
  {:email "super@axion5.net",
   :group-id 11,
   :name "supergroup-admin",
   :admin-for-groups [{:id 11}],
   :company-id 11,
   :tent-subject-id "123"}}}

OK
** DONE Link to other group doesn't work when there's unsaved stuff on the page!!
  Just ignore unsaved records in mutation!!!


** DONE when removing dossier statuses from bonaire kiezer I get "Some statuses are in use and could not be deleted"
  while they aren't in use, and they still get removed!!!
 import bonaire db (dich-reset bonaire)
** DONE BUG saving dossier type fails, but statuses still get updated of all dossiers!!!!
** DONE  Also when statuses update fails, record still gets saved. But save button
  stays green!! , but that's ok. It's not supposed to happen. If it I want to
  know. Or it to be reported

** DONE turn eventstore off
** DONE Remove theming from chin supergroups branch
** DONE tests for bulk-update validate for dossiers and checklists

** DONE Add info buttons!! Docs for supergroup-admins on how to use the new admin
    A lot of options and capabilities for supergroup admins. This needs to be
    documented properly in the app and probably help videos as well.
** DONE BUG on login on otc server first query fails. You need to do a refresh!!!!

** DONE BUG firefox and text input!!! See name-format gui editor bug
  Cursor is in wrong place!!!


** DONE Take websocket out of action in tests!!!
** DONE creator-id can not be null when saving job offer

** DONE tests for validate-group-unique-name

** DONE Nicer error msg when using duplicate email for new user!!
** DONE Better error reporting on form when backend invalidates value See group unique name validation

** DONE make sure subgroup admin can log in, group-id not allowed!!!
** DONE Set placeholder in list for new record
Cause we can't see any red text for it otherwise!!
** DONE Deleting new record creates react noop error
    react-dom.inc.js:526 Warning: Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.
    in components.translations.page/Form (created by components.translations.page/Page)
** DONE Sync with t&t on user form only for super-admin
** DONE For same name dossier types/groups/users, add id behind list item   ?
** DONE add info buttons to pdf options page
** DONE copy dossier types from supergroup???
** DONE Make sure the thing works without translation join in translation table
** DONE validate that you can't make a subgroup a supergroup!!!

** DONE Slack msg on supergroups on staging
Ok, so we've made a group called 'supergroup' on staging.  And a subgroup of
that supergroup appropriately called 'Subgroup of supergroup'

The following accounts are added:
supergroup-admin@mail.com (supergroup-admin)
supergroup-user1@mail.com (normal user of supergroup group)
subgroup-admin@mail.com (group admin of 'Subgroup of supergroup')

All have irma for password. So idea is you either log in and out to try out
super-admin (us), supergroup-admin and group-admin, or easier, use different
personas in chrome.

There's a little bug on staging that gives an error when logging in as
group-admin, fixed it, but otc seems down at the moment so can't update app for
a bit.
** DONE can groups be renamed?? yes, but show id behind name
** DONE what about company? Can we drop it? Not used for anything. Yes, drop
** DONE user form: what about T&T id, gender, sync with T&T
** DONE remove t&t refs for other than group 10.Have some user management instead
** DONE latest react expects different things from material-ui
Warning: Expected `onMouseUp` listener to be a function, instead got `false`.
If you used to conditionally omit it with onMouseUp={condition && value}, pass onMouseUp={condition ? value : undefined} instead.
    in input (created by EnhancedSwitch)
    in div (created by EnhancedSwitch)
    in EnhancedSwitch (created by Toggle)
** DONE only do change-route! in rootcomponent!!! So also for clone from supergroup!!
** DONE when cloning from other group disable green clone button till something is actually selected!!!

** DONE Tests, snapshot tests!!!
    https://cambium.consulting/articles/2018/3/13/lightning-fast-testing-for-clojurescript-react-components
    https://cambium.consulting/articles/2018/3/22/parallelizing-a-clojurescript-test-suite-part-1-the-guts-of-cljstest
    https://github.com/walmartlabs/test-reporting

** DONE Make jar
** DONE get travis to pass
** DONE merge with templates branch
** DONE then make new release-0.6.0 branch without templates
** DONE Update release notes

** DONE log in, logout, login, stale data in group list
** DONE upload logo to company at least
** DONE fix tests
** DONE review  (jacob)
** DONE no feedback in translations page when not filling in key, which is required.
** translation issues
*** DONE locatie.[admin/address] is used in nameformat!!!
*** DONE sorted by isn't translated
*** DONE add validation error message keys!!
*** DONE consistent label-value-row: pass in locale, translate label, placeholder and help
*** DONE consistent hover-input: pass in locale, translate placeholder
*** DONE locale doesn't work on user form



** DONE add link to bilby app
** refresh login page on translations/job offers/support questions and you get react warning:
react-dom.inc.js:526 Warning: Can't call setState (or forceUpdate) on an
unmounted component. This is a no-op, but it indicates a memory leak in your
application. To fix, cancel all subscriptions and asynchronous tasks in the
componentWillUnmount method.
** a user's email can be with leading/trailing spaces!!!
  trim by default!!
** johnny can't save/edit translations!!!
** push 0.5.3!!!!!!
** test whether  :ssl-redirect true :hsts true still works on staging and production
** Deploy to staging
** git tag version
** Deploy to prod

* DONE (future?) release 0.4.30 dossier dropdown field type (based on old release_master, in prod now)
** DC app  
*** In DC app use styled select or select2 cmp? 
   Johnny liked the styled select. Lucas the fancy one..
** Bilby    
*** When removing an unused status we still get error from backend!!
   "One or more dossier statuses are in use and could not be deleted"
   Even though status is a new status

*** Options as an entity   
**** Separate table for options?
     Same hassle as for statuses then. 
     Extract pattern? 
**** Don't allow removing an option if it's used as a value
**** Rename all values of dropdown field's values
    For that dossier type. For the values that have selected that options for
    that dropdown. 
   
*** DONE Try merge with more current bilby branch
    CLOSED: [2018-10-24 Wed 14:43]
    :LOGBOOK:
    - State "DONE"       from              [2018-10-24 Wed 14:43]
    :END:
Such as release_master 0.6.0 or supergroups or templates
   
*** DONE Validation of input
    CLOSED: [2018-10-24 Wed 14:43]
    :LOGBOOK:
    - State "DONE"       from              [2018-10-24 Wed 14:43]
    :END:
No empty option input
No empty options list
*** DONE Fold in/out?
    CLOSED: [2018-10-22 Mon 19:21]
    - State "DONE"       from              [2018-10-22 Mon 19:21]
*** DONE Remove deleted options 
    CLOSED: [2018-10-22 Mon 18:12]
    - State "DONE"       from              [2018-10-22 Mon 18:12]
*** DONE Fix revert/undo/redo
* DONE release 0.4.0
 Jacob's alerts plus explorer, devcards and included bilby-libsk
* DONE release 0.3.0
*** DONE post-remote gets proper map??
*** DONE When deleting group also check for other tables
dossier types for instance
*** DONE BUG Copying from clone uses version at time of pushing clone button
   But not updated version, even after save
*** DONE BUG ik heb een subdossier gekloned en in het origineel ook een naamformat gegeven
in het nieuwe dossier komt de naamformat mee, alleen werkt de naamformat niet
*** DONE BUG Hide clone button when no dossier type selected
*** DONE info popup looks funny, way too dark overlay
   but only on admin pages????
*** DONE Don't show from selected if no dossier type is selected!!!
*** DONE   1 - Bug cloning dossiers in newly created groups. Steps to reproduce:
    a- Create a new group (here, "Second Moretest")
    b- Choose to clone a dossier type from DC
    c- Select a Subdossier type (in the example, it was one under Locatiedossier, called Rie 3 - Mineralien)
    d- Clone and then save. The subdossier type is not added to the dossiertypes viewer at the left side.

captura de pantalla 2018-02-08 a las 13 30 19

e- Go to groups and choose the DC group. Browse to dossier types
f- Look in the Locatiedossier. Rie 3 is duplicated there.
captura de pantalla 2018-02-08 a las 13 31 29

*** DONE Can group user (non-dc) copy from DC?
   No!!!, I hope not
   NO.
*** DONE Default name format???
   people just get id otherwise???
  New clean dossier type has no fields, so no name format can be put together!!
*** DONE Set tab index for user page
*** DONE popup dialog state inspector??
*** DONE remove test buttons from debug-buttons in prod
*** DONE 3 Delete button for group. Only if group is new, or possibly when group has no users.
*** DONE Set random bcrypt password for user when creating one
*** DONE Profile in avatar menu
Jump to user page with current user selected?? Nah
*** DONE   2 - Suggestion for better marking at the UI that records are unpersisted:
    Maybe don't show the Created At, Updated At rows when new records are not persisted yet?
    For such records, show an (unsaved) or a similar notice instead of the om id ?

*** DONE Add id field to dossier type
*** DONE Setting locale works??
*** DONE Fix favicon
*** DONE Add debug flags you can use in produciton to read me
*** DONE Fix tail.boot
*** DONE Tag version 0.2.7

*** DONE PR for default separator?
   yes, already merged
*** DONE  Update release notes
*** DONE Clean up issues for bilby
*** DONE Merge with checklist-templates
*** DONE Deploy
* DONE release 0.2.6
  CLOSED: [2018-02-20 Tue 00:36]
  - State "DONE"       from "TODO"       [2018-02-20 Tue 00:36]
*** DONE when saving fields goes wrong, dossier type is still saved!!!
*** DONE clone twice and second one can't be saved.
Cause order is missing from field???
*** DONE when deleting dossier type with modified fields
Also remove fields from client/unsaved-records

*** DONE when creating new user and group is selected
set group for user already.
*** DONE  Remove sensitive information from bugsnag notifies
    https://github.com/digitalechecklisten/bilby/issues/18
*** DONE set default group to 10, or user's group
   at the moment no dossier types are shown for user if browser tab has no localstorage
   set for group_id

*** DONE tests for DC app parse-name-format
*** DONE https://docs.google.com/spreadsheets/d/1wsxR2wSBLWd9m2xlkDaIJpq0d1EnXeJRTPCw9x0ip2s/edit?usp=sharing

    We need to create numbers for the order of categories. Is it possible to create a formula that creates a unique number for every unique category name in a spreadsheet (or any other way…)
 12:08
 So column C in the spreadsheet gives the category names
 12:09
 Michiel van Oosten
 And you want that in column E for example (edited)
 12:09
 Lucas Oost Lievense
 For each similar category we need the same number and the next category needs a different number.
 12:09
 yes
 12:10
 Michiel van Oosten
 And preferably a excel formula..
 12:10
 Lucas Oost Lievense
 no
 12:10
 If you can do it another way it’s fine. Atom / Regex?
 12:11
 As long as it works and we can repeat it
 12:11
 Michiel van Oosten
 It should be possible in excel I'm thinking.
 12:11
 By when? Gotta fight a bit with excel formulas
 12:12
 Lucas Oost Lievense
 Not this minute but we will start with this next week or the week after.
 12:13
 Michiel van Oosten
 Ok. Will give it a go in excel first, see how I go. I'll let you know.
*** DONE name-format, don't join with - and in new_admin
 by default set text in between as "-"

*** DONE focus group name on group-select
*** DONE Make sure logstash_info env var can get set on cmd line
   Now it's a keyword. Also print out logstash settings

*** DONE cloned from DC and get warning about status?? About it being renamed?
*** DONE cloning from DC and save hangs
    Geïnteresseerd
*** DONE clone dossier type and fields don't have order!!!
 backend objects..
*** DONE change copy button to clone!!
*** DONE different groups in different tabs
 Using session storage
*** DONE new group workflow
*** DONE don't add (clone) when copied from other group
*** DONE for group 10 user have option to clone directly from group 10
*** DONE bump bilby-utils
*** DONE tab index
*** DONE dragging to delete box to text don't work, thought I fixed that
*** DONE delete locatie, then organisatie, and it's dirty still!!!!
   Only when created in this session
*** DONE enter in create new dossier type to create
*** DONE blank screen flash on loading new dossier-type
*** DONE location fields can't be created???
*** DONE delete button for name
*** DONE focus group select input, put cursor in it
*** DONE remove field unsaved records when deleting dossier type
*** DONE Fetch selected group as set in storage on refresh!!
   Otherwise name doesn't show up, and neither does ALL GROUPS in select group
*** DONE Keep selected group on refresh
*** DONE disallow same or empty status
*** DONE create sub for new dossier type, disallow!!!
*** DONE disallow same or empty field names
*** DONE disallow same or empty dossier type name
*** DONE Add (copy) to copied dossier types


*** DONE NO!!! LUCAS can you disable locatie/organisatie in current dc app
   no!!!

*** DONE always show selected group!!!
*** DONE remove selection of group alltogether for users,
 so we're back to all users
*** DONE replace tree collapse/xpand with just the one button
 If any are expanded close all. If all closed, expand all.
*** DONE timeout for sente is too short
*** DONE Revert all for dossier fields order doesn't work
 But for undo redo it does
*** DONE Translation for Locatie and organisatie in dc app
*** DONE geef een locatie stays in dutch
   return!!!!!!
*** DONE text fields have bigger font type in dc app
*** DONE LUCAS translation for field types: (string text etc)
*** DONE (cloning) dossiertypes kunnen kopiëren
*** DONE button to refresh selected item!!!!
   Nah, that's too complicated. What to do with already edited fields?
   Also, user will shoot himself in the foot with this if it overrides anything
*** DONE also check fields and their group-id!!!!!.
*** DONE wrong group assigned to new dossier type when changing to group!=10
*** DONE Try to put dossier fields on right.
 Make label column less wide perhaps. Remove active label van fields
*** DONE show app version in frontend, in console or in ui
*** DONE Bump version of bilby-libs to v0.1.9, update bilby deps
*** DONE In prod jar admin//admin/etc in admin.html!!!
*** DONE Organise branches, especially for hotfixes
*** DONE Change database on the fly
     From bilby/database.connection
  ;; TODO: find another solution to change it on the fly.
 ;; (defn update-db-conn
 ;;   "For setting db-conn on the the fly in the repl"
 ;;   [update-fn]
 ;;   (def db-conn (make-db-connection (update-fn (:mysql-database config)))))

 ;; For example:
 ;; (update-db-conn (fn [db-conn] (assoc db-conn :db-name "chin_minimal")))
 ;; (update-db-conn (fn [db-conn] (assoc db-conn :db-name "chinchilla_development")))
*** DONE Info buttons placement
    Put the info buttons all in the same place. I.e. a fixed position on the page. Now they are more or less all over the page which makes it less clean.
 @Michieljoris
 Michieljoris commented 3 days ago

 Fixed position in relation to label that is. Also smaller and less intrusive perhaps. Also enable hover over label to show info
*** DONE Download all translations on refresh, use for translations in admin app
 So translations will have to be indexed by key
 {:translations/by-key {:some-key {:key :some-key :nl etc }}}
 Namespace translations by :admin/"bla bla"G
*** DONE Cache translation map in locale???
*** DONE Capitalize translations where key is capitalized
*** DONE Translations are not saving
*** DONE field order and revert bug
 field order is not updated!!!!
*** DONE Empty dossier type name on create
*** DONE hyphen in field name fucks up name format
    Add punctiation marks or even just generic static text to name-format

*** DONE Add static text chips to name format
*** DONE When dragging status or field out of list and letting go of button put back in original place!!!
   Because intention was not to move, but to delete or cancel move
*** DONE Change locale dialog

*** DONE Check field renaming and nameformat
*** DONE Why is translation rerendering all 20 listitems every time???
   Because we're passing in locale to every time and locale is being changed.
*** DONE Saving empty translation doesn't give feedback about key being empty!!!
*** DONE Can't save new user (tent id stays red underlined)

*** DONE Also sending whole dossier type as mods????
*** DONE Add new fields and order is not set!!!!
*** DONE Sending parent-dossier-type-id: nil and name-format=nil when saving new dossier type
*** DONE Remove commented out refactor of dossier type query


* fulcro integration????
  I was thinking about fulcro and bilby. Fulcro did give me some ideas. And a slow convergence would be the way to go perhaps. He uses unions for routing, I do something quite simple as well, but not quite the om-next way. Now I know how he does that I could do that as well, which will remove code from parser. With the post=remote I can cut out a number of read methods where I return return explicitly fetched data (instead of splicing it in after loading) and just get left with the default read method.  Adding load transaction would be possible (but would have to rework ui-tree to use idents, which would help interoperability with fulcro anyway). But in the end, both app 'frameworks' can coexist. You just swap out app root el (when you want to use fulcro)  with a fulcro root component that uses fulcro reconciler. MIght be able to coexist in same dom even. Or reuse boilerplate ui (layout etc) code.

I do something similar for the test runner, which is basically a separate app.

Probably can share app state atom

And can use bilby sql backend. Or send to fulcro backend.

Bilby is closer to the metal though, and more easily adaptable perhaps to
specific requirements. At least for me, cause I know the code. Don't know
fulcro's code. And that's the problem. Maintainability of my code.



* Task list for bilby
** general
*** DONE REVIEW deploy-to-staging script                             :REVIEW:
    - State "REVIEW"     from              [2017-11-17 Fri 17:46]
Do we need to source chinchilla/.env?
Maybe bump version after deploy?? To 0.x.x-SNAPSHOT??
*** DONE REVIEW make bump-version scripts                            :REVIEW:
    - State "REVIEW"     from              [2017-11-16 Thu 18:26]
*** set up db on travis? Not needed apparently
    https://travis-ci.com/digitalechecklisten/bilby/settings
    Find a way to setup dc database schema on travis
*** indentation is not same across editors
parinfer/cider
   Installed parinfer mode in emacs
   https://github.com/shaunlebron/parlinter
*** steal from repos, mainly untangled
    http://untangled-web.github.io/untangled/reference/reference.html#_overall_network_plumbing
*** deps not working properly?? Jar is different size on server??? :priority_2:
**** In general sort out logging in via dc app then logging out in admin
***** refactor current-user to authenticated
      and fetch current user props with normal query
***** in production mode logout should redirect to DC logout
      - in dev mode to bilby login screen for ease of logging back in
      - also a link to admin could/should be added to DC app for beheerders.
      - ideally, when opening digitalechecklisten.nl/admin login screen should
        show and after login should show digitalechecklist.nl/admin/
        -> so when receiving :not-authorized for current-user bilby app should
        redirect, or rather set the address to DC login screen.

        window.location.replace("http://stackoverflow.com");
        or
        window.location.href = "http://stackoverflow.com";

       First one will remove current location from history and replace it. Second
        will add to history.
***** Set domain in production for cookie in loginscreen namespace.

*** install-git-deps alternative
    https://clojure.org/guides/deps_and_cli
*** namespace table column keywords
 :dossier-type/id :dossier-type/name etc
*** deploy!!! And staging env!!! Explore ranger..
 Set up app on rancher using digital ocean.
 With load balancing, test on deploy, staging and dev branches.
 Also with redis, elasticsearch, mysql, s3 storage, the whole kaboekel, because I
 want to start my own company.
 What about datomic!!!! As well.



*** DONE
**** DONE make issue for bugsnag sourcemap upload
**** DONE make PR for contacts fix
**** DONE update dossier  field type
    15:38] context
Lucas Oost Lievense vraagje

[15:38]
als het mag

[15:38]
Michiel van Oosten ja?

[15:39]
Lucas Oost Lievense De API ivm de bodemimporttool

[15:39]
VOor de Omgevingsdienst Groningen

[15:40]
via de importtool is een dossiertype aangemaakt met velden

[15:40]
een van die velden is nu een normaal veld maar moet een textarea zijn

[15:40]
Kunnen wij dat aanpassen? Of moet dat echt vanuit de importtool? Omdat het importeren anders niet meer werkt?

[15:41]
https://digitalechecklisten.nl/app/#/dossiers/137913

[15:41]
Michiel van Oosten Normaal is gewoon een string?

[15:41]
Lucas Oost Lievense Ja volgens mij wel

[15:41]
Michiel van Oosten Dus niet date of location

[15:41]
Lucas Oost Lievense nee idd

[15:41]
Het gaat om het veld Opmerking

[15:42]
Michiel van Oosten En je wilt meer tekst invoeren dan alleen maar 1 regel?

[15:42]
Lucas Oost Lievense ja

[15:42]
Dat kwamen we namelijk net tegen

[15:42]
Michiel van Oosten importtool weet ik verder niks over. Je kunt het ook niet aanpassen. Moet direct in de database aangepast worden. Zijn er al dossiers van gemaakt?

[15:43]
Lucas Oost Lievense kan jij dat wijzigen?

[15:43]
ja

[15:43]
Wat ik je net stuurde

[15:44]
Michiel van Oosten Zit even te denken dat problemen kan opleveren. Denk het niet eigenlijk. Want het is nog steeds text. Locatie -> text bijv zal niet zo lekker gaan.

[15:44]
Hoeveel dossiers zijn er gemaakt al?

[15:44]
Van dat dossier type?

[15:45]
Lucas Oost Lievense We zijn nog aan het testen in een aparte omgeving

[15:45]
oh nee

[15:45]
dit dossiertype bestaat al

[15:45]
Michiel van Oosten Dit is in produktie of staging?

[15:45]
Produktie dus

[15:45]
Lucas Oost Lievense productie

[15:45]
ja

[15:47]
volgens mij kan je via de api helemaal geen dossiervelden omzetten toch?

[15:47]
dus dit moet zelfs via jullie

[15:47]
Michiel van Oosten Ik zou wel even het type van dat ene veld kunnen veranderen, maar klein beetje huiverig, test ik liever even lokaal.  En nee, via onze api kun je helemaal niks aan dossier types veranderen.

[15:47]
Lucas Oost Lievense ja doen we ook niet nu

[15:48]
Dank!

[15:48]
dat wat het. Test maar even als je tijd hebt

[15:48]
Michiel van Oosten Welk veld gaat het precies om?

[15:48]
Lucas Oost Lievense Opmerking

[15:48]
Michiel van Oosten Oja, dat zei je.

[16:01]
Michiel van Oosten Moet daar toch wat nauwkeuriger naar kijken sowieso. Als we dossier types kunnen editen, verwijderen, velden veranderen etc, dat mag allemaal niet de bestaande dossiers gebaseerd op die dossier types in de war gooien. In bepaalde situaties kan het wel, andere niet. Hoe ik dat ga opleggen/enforce/controleer moet ik nog even over nadenken.

[16:33]
Lucas Oost Lievense ja precies

**** DONE update deps
lein ancient
**** DONE contact translations
**** DONE temp-ids
     https://github.com/anmonteiro/talks/tree/master/2016-berlin-meetup
**** DONE update deps
**** DONE set up db for testing
    Do it from the fixtures
**** DONE flash of login screen on refresh
**** DONE mount logging, where is it?
    No hook needed in cljs
**** DONE Get rid of channel, no not possible
     Circular dependency without channel:
    app->reconciler->sente->reconciler
**** DONE routes
**** DONE sente msg to server should be queued and responses executed in order
     And not execute next query till last one has returned
**** DONE marker for ws state in ui
**** DONE database component
**** DONE base sente component on system example
**** DONE move remaining functionality from api repo to my server
routing in bidi
cp help functions

**** DONE upgrade sente to 1.9.0
**** DONE organise db access
Require:
   [app.database :as db]
Then
   (first (db/select-user_id-by-remember_token {:? [remember-token]}))

**** DONE try mount iso component in server

**** DONE authenticate agains chin_minimal using socket message from frontend


**** DONE make prod jar tries to get schema??
   ..
   Gzipped admin/prod.js (2.4 MiB) to admin/prod.js.gz (547.7 KiB), saving 78%
   Gzipped admin/app.css (60.2 KiB) to admin/app.css.gz (8.8 KiB), saving 85%
   Gzipped admin/garden.css (713 B) to admin/garden.css.gz (337 B), saving 53%
   Fingerprinting...
   Compiling 1/1 app.core...
   17-05-17 13:10:13 MM INFO [app.config:193] - Clojure environment:
   17-05-17 13:10:18 MM ERROR [bilby.parser:56] - Could not get schema. Probably database doesn't exist. Or some other setting is not valid in db-conn:
   {:classname "com.mysql.jdbc.Driver",
   :subprotocol "mysql",
   :subname "?zeroDateTimeBehavior=convertToNull",
   :min-pool-size 3,
   :initial-pool-size 3,
   :user nil,
   :password nil}
   Writing pom.xml and pom.properties...
   Adding uberjar entries...
   Writing bilby.jar...
   etc
**** DONE versioning of app!!!!!G

** DC app
*** shifting dossier blocks around makes sections less clear
    Have some way to indicate end of dossier and checklist block in DC app.
*** make tests for frontend
*** make tests for backend for new code

*** DONE

**** DONE rethink name-format.
     api users don't get proper name, and what if no values or locations?
**** DONE recheck this branch
**** DONE make dt, reload dc, make dossie, delete dt
oops
**** DONE when group_admin is set, add user to groups_users :TO BE REVIEWED:
**** DONE location.zip in name format
****  DONE hide inactive fields/dossier types
**** DONE updating fields updates name, but lags one save behind
**** DONE overzicht don't show inactive fields
**** DONE reorder/omit dossier blocks as set by dossier type blocks prop
**** DONE dossier name can be computed frontend, but
tests need to be adjusted, they rely on name as set in fixtures, bummer.

*** DONE Recheck admin branch
**** DONE what happens to default statuses.

**** DONE Calculate dossier name dynamically on backend, not just frontend, for api users
**** DONE WORK OUT Possibly remove inactive filter from dossier model, since
 we're already filtering out at server with a scope at models/value.rb
 When setting field active while dc app is open and then loading different
 dossier we want to see the values as they come from the server. Also the reason
 we set no inactive scope on fields, only deleted, since deleted stays deleted.
** Server
*** Features
**** upload images/files (for companies for instance)
     https://github.com/cljsjs/packages/tree/master/dropzone
     http://www.dropzonejs.com/#installation
**** ph/ or _ in query instead of:process-roots config key
     Maybe mark roots by prefix or namespace (like ph/some-key, as in
     placholder) instead? Or prefix with _? You can then get rid of
     process-roots config key in bilby, because you can indicate in the query
     itself whether a key is a table or placeholder..

**** A syntax and implementation to return count (*) for a table
**** production nrepl server

**** Don't use reply for websocket, but broadcast
So change in one browser updates other browsers/tabs
**** elasticsearch for fuzzy search

**** Use ident as key.
Eg:  {[some-table 1] [:id :name}
     is basically shortcut for:
    ({:some-table [:id :name]} {:where [:id := 1})
*** refactor, improve code
**** when modifying field make sure it belongs to dossier -type of group or dossier-type mutation
**** Make staging env fully functional/useful
**** namespace table column keywords
:dossier-type/id :dossier-type/name etc
**** DONE Make clojure timbre appender to pretty print
Because now I've got to wrap pprint calls with is-development
https://github.com/ptaoussanis/timbre/issues/5
**** return schema where strings are keywords, and plural db names are
;; singular, hyphens instead of underscores are used. At the moment this
;; conversion happens in database.inspect.
**** add docs and comments
**** Standardize error reporting from bilby
    So {:status
**** update deps
     Currently using [org.clojure/clojurescript "1.9.908"] but 1.9.946 is available
  Currently using [prismatic/schema "1.1.6"] but 1.1.7 is available
  Currently using [tolitius/boot-check "0.1.4"] but 0.1.5 is available
  Currently using [crisptrutski/boot-cljs-test "0.3.3"] but 0.3.4 is available
  Currently using [cljsjs/react "15.6.1-1"] but 16.0.0-0 is available
  Currently using [cljsjs/react-dom "15.6.1-1"] but 16.0.0-0 is available
  Currently using [devcards "0.2.3"] but 0.2.4 is available
  Currently using [mysql/mysql-connector-java "5.1.43"] but 8.0.8 is available
  Currently using [org.clojure/java.jdbc "0.7.0"] but 0.7.3 is available
  Currently using [funcool/cuerdas "2.0.3"] but 2.0.4 is available
  Currently using [com.taoensso/encore "2.91.1"] but 2.92.0 is available
  Currently using [ring-logger-timbre "0.7.5"] but 0.7.6 is available
  Currently using [adzerk/boot-cljs "2.1.2"] but 2.1.4 is available
  Currently using [binaryage/devtools "0.9.4"] but 0.9.7 is available
  Currently using [binaryage/dirac "1.2.15"] but 1.2.16 is available
  Currently using [garden "1.3.2"] but 1.3.3 is available
  Currently using [danielsz/boot-autoprefixer "0.1.0"] but 0.5.1 is available
  Currently using [sablono "0.8.0"] but 0.8.1 is available
  Currently using [markdown-clj "0.9.99"] but 1.0.1 is available
  Currently using [jansi-clj "0.1.0"] but 0.1.1 is available
  Currently using [nightlight "1.7.2"] but 1.9.0 is available
  Currently using [com.newrelic.agent.java/newrelic-agent "3.41.0"] but 3.43.0 is available

**** DONE make sure app works with db that's doesn't have all the right migrations!!! (yet)
     CLOSED: [2017-11-17 Fri 16:12]
     - State "DONE"       from              [2017-11-17 Fri 16:12] \\
       It does already work like that. Backend removes colums from col lists. But does
       conk out when a non-existing column is used in a where clause. Which is fair
       enough.

       Frontend responds to flag :no-group-scope-for-templates in localStorage to not
       add group where clause, for the time being





*** Bugs
**** I think it's possible to lock up server with a massive query.
Especially with lots of subjoins, like in templates
**** DONE Using group by in get hugsql get-joined-rows
     -> Fixed by using distinct I think
    But to do that we have to disable and enable only_full_group_by before and
    after getting the join via the join table
    only_full_group_by mode is enabled by default for mysql from a version 5.7
    group_by works, but you can also dedup in read.clj in insert-many-join
    I think disabling only_full_group_by is ok for this occasion, but is it?
    https://stackoverflow.com/questions/23921117/disable-only-full-group-by/31058962#31058962
    https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html

We want to group because join table might have double entries. But double
results is pointless.

**** cors and ajax sente doesn't work
No Access-Control-Allow-Origin on headers in response
But cors is working ok though
The req-handler returns a response with the headers on it
However sente strips seems to strip them
Should work at least when server serves frontend app

**** Set timbre level from config overridden by env vars or profile.boot
**** disable devtools in prod env
**** disable cors in prod env
**** build.json can't be found???
**** Check csrf, anti-forgery, can't turn it off for some reason???
    And get an error
*** Tests
**** Tests for self joins and aliases etc
    templates_templates table
    person with join to itself as well?
    So person with boss_id column which is also a person.
**** Test limit-max setting.
**** Test asking for foreign key -and- join
**** spec.test
     https://stackoverflow.com/questions/40697841/howto-include-clojure-specd-functions-in-a-test-suite
*** decide, unsure
**** limit-clause for joins?
Seems limit clause only is applied to root of joined query
Yes, that's because with a join we getting all rows for all rows joined too, and
we apply the limit later in code.
(defn limit [{:keys [count offset]} rows]
  (let [rows (if offset (drop offset rows) rows)]
    (if count (take count rows) rows)))
But we're still returning all events in the table/by-id, not so good. That will
have to filtered, because we no still get all 1000 of them in the tables.
But for a join to a single row we can apply limit in the sql statement
**** method of retrieving schema
       ;; There's a few more ways to get at schema data, like SHOW TABLES and
   ;; DESCRIBE TABLE, and from the INFORMATION_SCHEMA database: the TABLES and
   ;; COLUMNS tables. The metadata comes with the connection. Might be a slight
   ;; performance benifit when testing, since we build specific databases with
   ;; different schemas for the tests.


*** DONE

**** DONE Change database on the fly
    From bilby/database.connection
 ;; TODO: find another solution to change it on the fly.
;; (defn update-db-conn
;;   "For setting db-conn on the the fly in the repl"
;;   [update-fn]
;;   (def db-conn (make-db-connection (update-fn (:mysql-database config)))))

;; For example:
;; (update-db-conn (fn [db-conn] (assoc db-conn :db-name "chin_minimal")))
;; (update-db-conn (fn [db-conn] (assoc db-conn :db-name "chinchilla_development")))

**** DONE reload/refresh story for clj files
    Giving errors in websocket because of invariant error in sente :-(

**** DONE save new user has to update group-user table!!!!
    group is retrieved from join table not just using group-id prop on user
**** DONE When querying for both company-id and {company [:id :name]} company-id is not returned
but company-id2 instead
**** DONE fingerprint
https://github.com/mrmcc3/boot-rev
https://github.com/pointslope/boot-fingerprint
**** DONE gzip
https://github.com/martinklepsch/boot-gzip


**** DONE table-alias
See dossier-type in database.config.clj
So that we can link to another table using an alias to specify foreign key
**** DONE pick up command line settings and/or env vars
To set database, webserver port, database url/username/password
**** DONE set child-dossier-type-id on parent-dossier-type
when saving a newly created child dossier
**** DONE update name of dossiers if name_format changes!!!
**** DONE set roles properly on backend for user
So admin if group 10
And super-admin for group when belongs to group via admin join-table
**** DONE Delete story!!!!
    So: .....
**** DONE Validate blocks prop on save/update
     Should only have valid block names
**** DONE production jar
    Getting errors in js code when starting jar????
    without optimization building jar works fine
**** DONE logging  settings
     Where is my om logging?
**** DONE merge api and my server
    Get Johnny's functionality into mine
    Move from bidi to compojure?
    Get lein working as well as boot
    Get production boot/lein packaging working
    So you can start with jave jar admin.jar etc
    Docs for setting up/starting/architecture etc

**** DONE fix public file access in bidi
Just look at https://github.com/juxt/bidi/blob/master/src/bidi/ring.clj
and copy ->Files code
but check for existence first :not-found can be returned
It's the path that's the trouble I think.
**** DONE get csrf working

** Frontend
*** New features
**** snackbarmessage or mark on field when undeletable on save dossier-type
**** reenable snackbar msg on deleting dossier type error, also show for deleting in use field
**** nameformat feature, use fields of parent dossier types

Ik heb nu 3 lagen ingericht voor DCMR en vervolgens een dossier ingericht - Bedrijf - Installaties (alle tanks met benzine) en daaronder 1 tank dossier.
09:37
Dat is op de pagina Dossiers en in het overzicht van subdossiers onder een dossier wat onduidelijk
09:38
Voor betere naamgeving zou het mooi zijn als je ook velden van bovenliggende dossiers in de name format kan gebruiken.
09:38
en voor het overzicht van subdossiers in een dossier
09:38
Kan daar ook het label van het soort subdossier getoond worden
10:25 Johnny Eradus
Nee dat kan nog even niet Lucas, zal dat straks wel even regelen
10:29
En die name format, hoe zie je dat voor je? Want dat is ook wel iets wat vrij snel problemen geeft denk ik, als je gelijknamige velden heeft. En of meer dan 2 lagen dossier types
10:38 Lucas Oost Lievense
Ja helemaal mee eens. Het blijft ook altijd iets van een interne werkafspraak/gedrag
10:39
Maar de naam van het bedrijf (hoofddossier) + Tank nummer (sub/subdossier) is wel direct heel duidelijk
10:39
Je gaat op een lager niveau niet nog een keer de naam aangeven
10:39
Doen wij overigens wel als werkafspraak maar dat wordt veel vergeten
10:41
Misschien daarmee beginnen - dat je ook Name format van de bovenliggende dossiers kan kiezen. Of de keuze om meer opties te kiezen bij Name format en dan velden van bovenliggende dossiers te zien
10:42 Johnny Eradus
Lijkt me opzich een goede toevoeging. Dacht eerst dat het heel ingewikkeld zou worden maar valt wel mee volgens mij
10:42
Wat is jouw idee Michiel?
10:42 Michiel van Oosten
Nee, Lucas is creatief bezig hier.
10:45
Name format is gewoon een hyphenated string op het moment. Als we daar velden van bovenliggende dossiers bij gaan doen dan moet dat wat ingewikkelder voor disambiguation (edited)
10:47
Maar hij staat op de todo/onderzoek lijstje van me. DC app moet ook aangepast worden

Wat ik in Effacts nu veel vaker doe is velden van bovenliggende dossiers ook als ‘onzichtbare’ velden in lagere dossier opnemen. Dus het is gewoon een veld op dat lagere niveau maar je ziet het normaal niet. Dat is erg handig voor dit soort dingen en voorkomt inderdaad dat je complexe dingen moet doen die weer andere risico’s hebben met bijv. updaten van de naam op het hogere niveau
10:51 Johnny Eradus
Ja dat maakt voor ons niet heel veel uit
10:51 Lucas Oost Lievense
Ok. Ik wil vooral aangeven wat ik tegenkom. Zoals gezegd, ik weet al welke wensen er zijn en dit is er in ieder geval eentje.
10:51
maar hoeft idd niet allemaal direct
10:52 Johnny Eradus
Of nou ja, nu je dat zegt
10:52
Probleem wordt natuurlijk als je velden van de bovenliggende dossier wijzigd en alle childs ook moet nalopen
10:55 Michiel van Oosten
Als eerste idee, die nameformat is dan beter misschien als het een reeks veld ids is, ipv een string.  Dan kan de label van het veld gewoon geedit worden, waar dan ook. En verwijderen van velden kan dan verboden worden als ie ergens gebruikt wordt. Niet alleen in een dossier, maar ook in een nameformat ergens.
**** option to block a group from editing this or that
for now, to block them editing dossier types when they use the api v1. Can
create problems. See issue on github
**** inactive users for subdossier type, expect to hide in dossier index page. :priority_2:
**** dossier-type many-to-many checklist templates
    So choose templates to link to dossier-type
    In dc app show by default templates linked to user, unless specific templates
    are linked to dossier-type, then show them.
In admin use an autocomplete to select templates, a la statuses
**** github FEATURE Multi clone. Select multiple dossier types to clone.
     Currently only one dossier type at a time can be cloned.

 Idea is to check several dossier types for cloning in one hit.

 When you can select multiple dossier types to clone, and if there's a
 relationship between any of them you want to keep that relationship in the
 cloned versions.

 However, we will get a bunch of copied, unsaved dossier types, of which some
 have a parent-child relationship. We'll have to update parent-dossier-type-id in
 children to the tempid of parent, and the id in the list of child dossiers in
 parent dossier to the tempid of child.

 Problem is, which do we save first?? Presumable always parent before child.

 Then we have update parent-dossier-type-id of child from tempid to real id on
 save. And update tempid in list of (child) dossier types of parent when saving
 child.

 Or we can move cloning to backend. Where we pass a bunch of new dossier types to
 save in one hit.

 If we require user to save all cloned dossier tyes one at the time less things
 will go wrong, user has chance to check/edit each before saving, but might be
 tedious.

 Also perhaps you might want the option to check a dossier type, including all
 subdossiers recursively, for cloning. Instead of clicking clone button for every
 dossier type.
**** github Think about moving dossier types around in hierarchy
    Besides the ui challenges (drag and drop in selection list on left?, or
    something else less complex?) the main problem is what to do with
    instantiated dossiers of those dossier types?

    Moving a child dossier type to root level is no problem. All dossiers of that
    dossier type have no parent anymore, so just blank out dossier-id prop.
    Subdossiers will just stay linked.

    Moving any dossier type to anywhere in the hierarchy other than to root level
    creates problems since we not only not know to which parent dossier to couple
    dossiers of that dossier type, but also the dossiers of that dossier type might
    have been coupled to different parent dossiers of the dossier type's parent
    dossier type.

    Other than creating this really complex ui to solve this problem, the route to
    go would be perhaps only allow moving dossier type (trees) if there's a a kinda
    one-on-one relationship with actual dossiers.

    Meaning, a dossier type we want to move, all dossiers of that type should hang
    from the same dossier,, or be root dossiers. And there should be exactly one
    dossier of the dossier type we want to hang the dossier type under, or they can
    be moved to root level. So we know what to set the dossier-id prop of the
    dossiers to.

    I think this is doable. It would enable users to reorganize their dossier-type
    hierarchy in as far it's just describing the one-off dossier structure they like
    to see.

**** Clone dossier type tree
select dossier types of tree to copy??

**** Under person icon right top add profile button              :priority_3:
It should open users with current user selected.
**** De status zichtbaar zonder dat je het account moet aanklikken (actief/niet actief) (jacobine)
**** De aantallen tonen van de actieve accounts + inactieve accounts (per organisatie) (jacobine
**** upload images/files (for companies for instance)
     https://github.com/cljsjs/packages/tree/master/dropzone
     http://www.dropzonejs.com/#installation
**** elasticsearch for fuzzy search
**** vcr                                                         :priority_4:
https://medium.com/adstage-engineering/contextual-debugging-with-om-next-and-untangled-8c168900dba5#.1ps7c1ntu

**** option to reload/refresh record!!!                          :priority_3:
refresh by clicking button, instead of refresh             :priority_3:
    For instance for user password-expires-at
    Use the revert button for this. Make a request for the record as well as
    reverting first to meta record.
**** checklist templates in bilby

**** some indication we're waiting for more data from the backend     :minor:
**** DONE show when websocket is down                      :priority_4:minor:
**** trigger fetching extra page while scrolling not at bottom but before :minor:
    Needs a lock on page while in page incrementing zone



****  later workflow management for next year
*****  later rules/ifttt management
***** later ifttt in clojure that monitors sql database
    rules editor in bilby/admin
***** Before diving into trying to make sense of yaml in clojure, is it an idea to decouple jobs completely from rails?

Since jobs are essentially work triggered by events, can we not just monitor the database, either though mysql triggers or polling, and design rules that execute code if certain 'rules' match?

The problem would shift to design and creation of these 'rules'.  Basically creating a ifttt system.

For instance, on creation of an invitation the rule would be:

If new record in invitation send invitation email to linked contact.

So you need an 'event' such as
 (on-new-record table) => record
and an 'action/job' such as
(send-email (:user-id record) "You got an invitation!!")
And an if construct that pumps output of event to input of action.

Changing status or comment replies could be handled the same way.

Initially these rules could be written in clojure, later on some kind of ui could be designed to put these clojure expressions together. Or at least the more straightforward kind of rules.

You'd want a 'rules' database.

Some of these rules might be frontend concern only. For instance a rule that says:

if in a checklist of a certain template for a certain user or group this question  gets answered yes, show answers with these ids or from this category, else hide them.

So no attaching rules directly to questions and templates. Templates get shared and different people/groups would like to use different rules perhaps.

I'm just wondering how many features/problems could be covered by properly implementing a rules database plus execution mechanism/engine, and eventually a ui to edit/create these rules. It might be possible to kill more than one bird with this, like ifttt, workflow, alerts.

I've built something before when I was playing with couchdb where work would happen triggered by database events, the decoupling of crud code and event handling code is really nice.

You could get rid of jobs in rails , making it a more of a plain crud api, or at least simplifying it and isolating 'if event then action/job' functionality.

Jacob's adding of location to login even could easily be a rule for instance as well.

(if login-event (set-location-from-ip  login-event-record)

or

(if failed-login-event (send-email (:user failed-login-event-record) "Failed login attempt!"))

This rule could be per group/user/global etc.

Once you've got our events and actions and conditions, possibilities are endless.

You can write these actions/jobs in clojure . Like (set-location-from ip record) and implement some kind of priority queue if execution engine gets overworked.

**** later contacts page, a la users
**** later law -> checklist questions
     Lucas is converting text to csv to columns to questions

****  later on also user management                              :priority_3:
     Begin of the month put acive users ids for a group in a basket, when user
     gets activated add id. Every 1st of the month do that again. Keep track for
     all months for all group. Show report in admin under group.
****  later alert management
**** impersonate!!!                                              :priority_2:

**** Some people can change groups. Not only dc users
**** DONE

***** DONE Download all translations on refresh, use for translations in admin app
 So translations will have to be indexed by key
 {:translations/by-key {:some-key {:key :some-key :nl etc }}}
 Namespace translations by :admin/"bla bla"G
***** DONE minor click on group-id in user form to go to group form on groups page
     Same for company
***** DONE Clear search field button X for list search and group search/autocomplete :minor:
***** DONE Clone dossier types
     On clicking open dialog with existing dossier types to clone, with search box
     Perhaps only dossier types that are checked as being cloneable.

 Let DC staff pick from a wider range of dossier types. For instance from standard dossier types as set up in the DC group itself.
***** DONE
***** DONE integrations
****** new relic
  https://pupeno.com/2015/09/07/using-new-relic-with-clojure/#content-wrapper
  https://clojurians-log.clojureverse.org/boot/2016-05-03.html
  https://seancorfield.github.io/blog/2013/05/01/instrumenting-clojure-for-new-relic-monitoring/

  https://github.com/Yleisradio/new-reliquary
  https://github.com/TheClimateCorporation/clj-newrelic
****** bugsnag
****** logstash
       https://github.com/active-group/timbre-logstash
       https://github.com/ptaoussanis/timbre/blob/master/src/taoensso/timbre/appenders/3rd_party/logstash.clj

       https://github.com/logstash-plugins/logstash-input-tcp
       https://www.elastic.co/guide/en/logstash/current/plugins-inputs-tcp.html
***** DONE Turn off console output in production mode
***** DONE add group admin checkbox to user
     super admin is if member of group 10
     group admin is you're in groups_users
     company admin is not used

     ;; TODO: transact toggle-user-group-admin, add/remove
     ;; user.group-id from admin-for-groups, set
     ;; group-admin? prop accordingly, send this prop to
     ;; backend. Save this record using not generic
     ;; save-record, but save-user, in backend pry out
     ;; group-admin? prop and set admins table properly

*** Improve code, refactor

**** Overlap between standard and dossier type undo/redo/revert/save/delete/process-mutation
    Depending on how these gonna work out for other screens, see if common code
    can be extracted.
**** in code of bilby and bilby-libs get differentiate between getting state and config!!!
;;We merge for now.
See app.page-state
**** rename and refactor deep-merge and real-deep-merge and deep-merge-concat-vectors in dc-util
    and in all code that relies on it.
**** DONE separate out config and app-state
    That way you can reload config on change by merging it into app-state atom
**** :where and :set-params are kind of the same
First one is used in item-batch, second one in general read method
Both set params for key, both can be fn or map, first one receives state,
second one app-state (dereffed state)
**** on timeout, give option to try again!!!!!!
    when connection is back!!!!!
    or try automatically. Block sending till reponse is received. Just retry last
    one if chsk/timeout is received
**** refactor current-user to authenticated                      :priority_3:
    and fetch current user props with normal query
**** markers for data to be fetched
**** db->tree and ident protocol for components
**** DONE Make timbre appender to pretty print in backend        :priority_3:
Because now I've got to wrap pprint calls with is-development
https://github.com/ptaoussanis/timbre/issues/5
**** document and streamline hover-input
**** replace route and page with screen!!!
    or at least consistently page
**** on :unauthorited response, do proper logout, don't just show login screen :priority_2:
**** flash of logged in content                                  :priority_3:
**** not client/error, client/warning etc but client/message
{:type error/warning/notice/etc :context {..} :message "..."}
**** add snackbar message thing locally only, otherwise rerenders happen all over the place
if passed from root component
**** Document all code, write source code guide

**** infinite escrolling gets slower and slower
Time the send for starters. Is the delay on frontend or backend?

**** version conflict warnings on boot dev and boot build
    Probably to do with whatever's in ~/.boot/profile.boot
**** passing snackbar-message in computed marks component as having changed data!
So is rerendered even though props haven't changed
**** resolve-ident recursive check, use query as check on stack overflow
Put one in there to be sure, but default parse should be modified so resolving
of ident happens using the current query as check. Which is better than
returning all recursive data if key or value is an ident. But for recursive
queries this still is a good check probably.
**** rename route to page in route/dossier-types etc
**** extract autocomplete into component
Is duplicated now for group select dialog and in new user
**** Consider moving all or some config to backend config
So get it to frontend via frontend/environment macro
For instance for domain it makes sense to be able to set it on the commandline
whens starting production

**** extract common fns and put them in cljc

**** DONE sort out config and app-state
What goes in app-state, what goes in config, do we use om-shared, do we just
import namespace?
Last two methods need to a refresh to have effect, can't be set by button.
Probably should put all info, so state and config in app-state
*** REVIEW NOTE Deleting fields/locations with values in deleted dossiers!!! :REVIEW:
    - State "REVIEW"     from              [2017-11-16 Thu 18:15]
    They could be deleted. But problems arise if the dossier gets undeleted. The
    corresponding fields would have to be undeleted as well. And which ones?
    Some might have been deleted before the dossier got deleted. And have no
    values. So leaving it as it is and thusly you can't delete fields that have
    values, even if only in deleted dossiers.

**** DONE
***** DONE pass :post-mutation {:success .. :fail..} key to params, and
remove it before sending it, execute it on success/fail
*** Bugs
**** set location block to inactive if no location fields exist!!! :priority_1:
And add warning popup to add fields to get it active!!!
**** DONE bug when logging in as a user with less privileges
     selected-group for pdf-options can still be group 10 for instance
     user route (empty) shows up because that's what super-admin last saw
Somehow need to wipe route and selected-group and set to default when user with
     less privileges logs on without refreshing page first
**** DONE unsaved-records stays non-empty somehow when making/editing users!!!
**** DONE Put delete button on top for users etc, same as dossier types, templates
    not applicable. they have a switch
**** DONE When making new user for group, set group automatically!!
**** DONE When making new group/company/?? list doesn't get rerendered :priority_2:
So stays red, id stays tempuid etc
**** DONE Can't select company for user!!!                       :priority_1:
**** Check that password validity etc settings work
 Add :password-validity-period-retention :password-validity-period-days when security branch is merged to validation.clj for groups for throw-if-empty
**** REVIEW Does link to update user account still work?             :REVIEW:
     - State "REVIEW"     from              [2017-11-16 Thu 18:08]
    Clash of urls?? As in admin/update  etc
**** REVIEW tab away from hover-input and changes are not picked up  :REVIEW:
     - State "REVIEW"     from              [2017-11-16 Thu 17:20]
     added debounce  and it magically fixed it
**** REVIEW HALFDONE afg naar afgerond voor status                   :REVIEW:
     - State "REVIEW"     from              [2017-11-16 Thu 17:21]
    PErhaps fixed with debounce added???

**** test autoscroll on drag in ie and ipad
**** xss
Escape any and all user input
**** DONE destroy all records that define admin join, not just one
    see mutate.clj

**** handle-error-response: don't leave users hanging , connection is probably down, or
   server websockets are buggered. Perhaps set some "connection down" marker,
   eg big marker on app bar or something.

**** update records properly as result of returned table-date after mutation
Might be a mechanism in bilby reconciler already, pretty sure there is
**** in production mode logout should redirect to DC logout      :priority_4:
    - in dev mode to bilby login screen for ease of logging back in
    - also a link to admin could/should be added to DC app for beheerders.
    - ideally, when opening digitalechecklisten.nl/admin login screen should
      show and after login should show digitalechecklist.nl/admin/
      -> so when receiving :not-authorized for current-user bilby app should
      redirect, or rather set the address to DC login screen.

      window.location.replace("http://stackoverflow.com");
      or
      window.location.href = "http://stackoverflow.com";

     First one will remove current location from history and replace it. Second
      will add to history.
**** Set domain in production for cookie in loginscreen namespace.
**** test runner and async tests
    They prevent all tests from running. Need to run these tests
    programmatically and not let cljs test runner do it. Also cljs test runner
    registers tests in macro, no need because my test runner registers them
    itself as long (register-tests) is called at top of test file.

**** saving empty record, with no cols modified
gives no error from backend but warning, so no error dialog on frontend
This is because when saving dossier type only joined fields might be changed, so
it's valid to save unmodified dossier type record. But still would like
notification/action in frontend when saving bare unjoined record!!!


**** DONE Drag to delete on ipad, delete box doesn't turn red
     CLOSED: [2017-11-17 Fri 18:12]
     - State "DONE"       from              [2017-11-17 Fri 18:12] \\
       Case of text in middle of drag area snagging mouse events
       currentTarget instead of target! Or vice versa something like that
Maybe use different way to delete
**** error from backend, frontend managing that?

**** reeval invalidate on input and is invalidated

**** DONE STARTED icons are missing for Lucas?????                  :STARTED:
    Replace every icon with a data-uri in icons.scss
So only include icons we actually use!!!
If you make sprites.png a data uri it gets included with every single frigging
icon, bloating the js file

**** DONE Some hickup on first login in production!!!            :priority_2:
**** DONE Are we still logging out when getting back unauthorized response?
     CLOSED: [2017-11-17 Fri 16:18]
     - State "DONE"       from              [2017-11-17 Fri 16:18] \\
       Yes. But not when you just delete remember token. Since socket connectin
       will still have original remember_token attached
**** Translations enforcements
***** Enforce max length of 255 for translations
***** DONE Enforce translation keys first letter lowercased
***** DONE Enforce unique translation keys

**** DONE

***** DONE hyphen in field name fucks up name format

***** DONE field order and revert
field order is not updated!!!!

***** DONE table for statuses????
     Because people will rename statuses and will expect existing dossiers to
     have renamed statuses.
***** DONE what happens to default statuses.
 deal with legacy statuses system.
***** DONE Show inactive hides child dossier-types of inactive dossier types
     But we would still be able to create subdossiers of active subdossier-types
     from the parent dossier made with the inactive dossier-type
***** DONE spacing of sort/fitler/reset/new buttons
***** DONE change groups doesn't work in production
     forgotten timbre/info in group-select????
     S$.info.j?S$.info.j("new-id",A):S$.info.call(null,"new-id",A);
***** DONE Save with empty dossier type name gives raw backend error back.
   Make it gentler.

***** DONE last_updated_user_id
***** DONE autoscroll on drag
***** DONE validate input in ui
for instance for numbers, check for range etc
atm only required works, expand that mechanism
see label-value-row and app-state for pages
***** DONE assert-info
     So easy assert iso if then expressions
    Throws ex-info if assert fails
    Replace all (validate.clj etc).
***** DONE Make github issues
***** DONE Alleen top dossier kan lokatie gebruiken, maar is ook beschikbaar als blok in subdossier op het moment. Die moet dan weg inderdaad.
***** DONE Click on title to open tree
So no separate open close icon
***** DONE Buttons to add (sub) dossier-type
***** DONE Check height of field dropzone
Lucas has trouble dropping on bottom field, not enough space/margin
***** DONE delete dossier-type location that's in use
     Should not be possible, and location should be restored in dossier type ui

***** DONE user.group_id not users_groups to join user to group!
***** DONE enable group-admin switch for user
***** DONE Manage unsaved changes
****** DONE When doing a mod, then select unmodified dossier type, reload alert doesn't show  on refresh
    The whole thing could use finetuning. Also in combination with
    deleting/reverting deleting etc. Also with fields perhaps that you can't
    delete etc. Or changing page, what to do with unsaved records?
****** DONE Disallow changing page if unsaved changes exist!!

****** Solution?

***** DONE is-dirty?
 - on new-record is-dirty? is set to true
 - On save :is-dirty? is set to :saving
 - on save is-dirty? is removed from mods sent to server


 - Don't forget to remove tempid from is-dirty in page-state!!!!!
 - Don't forget to deal with errors
 - Don't forget to deal with responses to mutation queries
   Update meta of record with the values!!!! Otherwise they will be sent as mods
   in subsequent saves.
 - Don't forget :warning of empty-keys returned from server on saving new record
   lets :is-dirty? the same!!!!

 - Saving new record
 Meta will be reset when merging.  But is-dirty? flag is still set to :saving at
 merge.
:is-dirty? gets set to :saving when save mutation gets called.
migrate dissoc's :is-dirty? when replacing tempid with db id.

 - Saving existing record:
   meta record is still set to old state on server, so how it was retrieved
   originally, before any changes were made
   client side.



- Deleting (existing) record
  Set :is-dirty? to :deleting ???
-

***** DONE use field meta record to store original order, not an extra field on dossier type meta.
     should be possible. Easier to reset in reconciler core then.Gjkkkk

***** DONE fix up dossier types a la rest of admin
****** fix up delete (real and not real)

***** DONE error dialog pops up on unauthorized login
***** DONE tests whether advanced compilation takes out test code
in misc components wrap test button in is-development?
in root component wrap wrap app-bar red on fail in is-development?
No!!! You gotta comment out the import in app.core.cljs

***** DONE run frontend tests on clicking button in frontend ui.
***** DONE after login data doesn't get loaded anymore!!!
***** DONE when records get loaded, always update meta record
not just for the dirty records!!!
Any record with meta data, once you scroll for instance and get partial updated
data for a record, it might haven been updated by another client. In this case
you need to update meta-record as well!!!

***** DONE Show 'done' button for multiline text input when modified or after inactivity of 600ms pass on changes?
     auto update on delay
***** DONE when selecting new user, clear search for company/group otherwise query gets sent everytime
***** DONE little bugs in revert/undo/redo combo
- After revert redo doesn't get disabled at some point
- undo/redo Make sure that if state isn't there anymore that undo is disabled and does nothing
    (reset! app-state
      (om/from-history reconciler #uuid "e0a07c41-413a-430c-8c91-976a155241c3"))
    Just query:
    (om/from-history reconciler #uuid "9e7160a0-89cc-4482-aba1-7b894a1c54b4")

To get the most recent history-id:
(last (.-arr (-> reconciler :config :history)))
***** DONE yes!!! in job offer I have to query for id and title again!
But it's also in the list item query???!!!!!
That's how parser works

***** DONE delete group

***** DONE restore meta record of table data returned from server


*** Test
**** Get react-with-addons to work again for defcmp tests        :priority_1:
    Use npm-deps and externs of cljsjs package of the addons
**** Write rest of frontend tests. Especially integration with defcmp tests :priority_2:
**** Write/refactor tests for process-mutation-symbol now we're using hook :priority_2:
**** https://github.com/omcljs/om/wiki/Applying-Property-Based-Testing-to-User-Interfaces
https://github.com/omcljs/om/wiki/Applying-Property-Based-Testing-to-User-Interfaces
**** ipad 3+/firefox/ie
**** on real network
**** Is ProximaNovaRegular loading or not???
**** sort out devtools error in console and dirac
    Need to have devtools.preload main.cljs.edn, however this also loads dirac
    somehow. So we get a (harmless I think) error msg in console on startup,
    since it wants to load dirac runtime, but it isn't there. When enabling
    devtools task, dirac might work in canary, but js repl is stuffed up
    unfortunately. So living with this till tooling gets sorted out better for
    cljs. But this way we get devtools in dev mode at least. Better would be to
    load devtools only and leave dirac totally out, but don't know how yet in
    boot.
    jan/2017: Dirac 1.0.0 -> console cljs repl works, breakpoints not, but main
    problem is stack overflow on code reload.

**** STARTED Use chrome headless instead of phantom for test runner and travis :STARTED:
     # addons:
  #   apt:
  #     sources:
  #       - google-chrome
  #     packages:
  #       - google-chrome-stable

  #   firefox: "51.0.1"
  ;
  # TODO use chrome (headless) for test runner.
  # https://github.com/karma-runner/karma/issues/2489
  # Run npm install to install karma
  # Somehow pass these to the launch chrome command in doo
    # 'browser_args': {
    #   'Chrome': process.env.EMBER_DEBUG_TESTING !== 'true' ? [
    #     '--headless',
    #     '--no-sandbox',
    #     '--disable-gpu',
    #     '--remote-debugging-port=9222'
    #   ] : []
*** Unsure what to do still
**** REVIEW drag and drop (settled on dragula + hacked scroll on drag) :REVIEW:
     - State "REVIEW"     from              [2017-11-16 Thu 17:32] \\
       Dragula works for now. Only drawback is you gotta drag too a bit more than over
       half to insert

       Also not very react friendly, so end up reading out dom to see what happened
***** React-Grid-Layout
https://github.com/cljsjs/packages/tree/master/react-grid-layout
travis build npm package npm downloads

React-Grid-Layout is a grid layout system much like Packery or Gridster, for React.

Unlike those systems, it is responsive and supports breakpoints. Breakpoint layouts can be provided by the user or autogenerated.

RGL is React-only and does not require jQuery.
Ultimate drag and drop and reorder:
https://github.com/STRML/react-grid-layout/
https://strml.github.io/react-grid-layout/examples/0-showcase.html

***** interact.js
https://github.com/cljsjs/packages/tree/master/interact
JavaScript drag and drop, resizing and multi-touch gestures with inertia and snapping for modern browsers (and also IE8+)
http://interactjs.io/

***** react-reordable
      Sortable component for ReactJS
      https://github.com/mgechev/react-reorderable
      https://mgechev.github.io/react-reorderable/
***** slip
      A tiny library for interactive swiping and reordering of elements in lists on touch screens.
      https://github.com/pornel/slip
      https://kornel.ski/slip
**** users page accessible to group admins?
**** DONE When logging out and logging in again ws connection gets reset, however
this is no good when a request for root query comes straight after, this might
be an issue on ipad/non local internet????

**** DONE maybe not drag to delete then, yes, we drag!
**** pages sidbar on widescreen instead of pages dropdown
**** what to store/set in local storage? Selected item/group? Filter/search/sort?
**** material-ui is too big                                      :priority_4:
     https://github.com/danvk/source-map-explorer
   2.3MB in advanced mode. In :none mode icons and svg-icons are already 1.4MB
   and 1.1MB material-ui.js is 1.9MB
  So remove icons and load only ones used for starters..
 26-10: custom icon file, now it's 1.7MB. Still not ideal.
Using icomoon chrome extension to put icon file together.
https://github.com/danvk/source-map-explorer
**** Is there a way to make it work for iphone 6?
Mainly filter/sort is interfering and taking too much space
Also top bars could/should be smaller/removed
top bar logo/title positioning in iphone 6


**** Check out css grids for layout!!!
    https://mozilladevelopers.github.io/playground/09-named-lines
**** DONE refilter on save? What to do with new records in list??!!!??

*** DONE general
**** DONE New dossier type links in list looks messy
**** DONE Jacobine requests:
1. DONE Zoeken op personen
2. DONE De link voor het updaten van het account zichtbaar zonder dat je het account moet aanklikken
5. DONE Zonder het individuele account te openen zien in welke groep mensen zitten.

**** DONE width of search box is less than list box
**** DONE selecting user always sends query
on save user mutation, selected-item query gets sent as well!!!
**** DONE  filter/sort layout.
Fixed position of list hides filter/sort widgets.
**** DONE on making new user, use selected group to set group/group-id
**** DONE Link to update user on user page, see DC user admin page
**** DONE save new user has to update group-user table!!!!
    group is retrieved from join table not just using group-id prop on user

**** DONE store who created/modified dossier type
**** DONE dossier type bugs
***** DONE reverting deleted field
***** DONE dossier type, changing field prop -> save button not activated to green
***** DONE Add updated-at, created-at, updated-by to dossier-type form!!
     Make sure updated-by id is same as current-user id
**** DONE reset offset when changing group for users
**** DONE voor users have option to unselect group, so show all users again
**** DONE On changing group, clear selected-item.
So don't show selected record from previous group, but clear the screen
**** DONE misc debug buttons full namespace warnings
**** DONE when changing group unselect dossier-type
**** DONE update records and rerender on reply of server!!!
     So to update create-at/updated-at for instance, correct data that couldn't
     be changed, show errors etc

updated-at is also 2 hours off!!!

**** DONE Use material-ui components
    Drawer for dt selection
    http://www.material-ui.com/#/components/drawer
    DONE autocomplete to suggest status
    http://www.material-ui.com/#/components/auto-complete
    badge to indicate template/modified
    http://www.material-ui.com/#/components/badge
    card to hold dt form
    http://www.material-ui.com/#/components/card
   chips for format name
   http://www.material-ui.com/#/components/chip
   Popover to select nameformat element
   http://www.material-ui.com/#/components/popover
   Notification when saving/reverting/adding etc
   http://www.material-ui.com/#/components/snackbar
   Do you really want to remove?
   http://www.material-ui.com/#/components/dialog

**** DONE have by default always a dossier-type selected
either first one in list or last one as stored in localstorage
because otherwise add dossier type here is selected and it doesn't work then!!!
when clicked on it.
**** DONE When no dossier-type is selected, or rather selected id is not in list
don't select bottom add dossier-type list item!!!!
**** DONE remove client/selected-dossier-type from mutate methods
Instead pass selected-dossier-type to mutate method, or get id of selected
dossier type from om.next/query prop in app state? Or from (om/get-params
reconciler ....DossierTypesPage)
**** DONE render page on first login, not just on refresh!!!
**** DONE in dossier types updating and keeping values of name and active doesn't work properly
value get lost on dossier type selection change, also dt name doesn't get bold
in the selection list
**** DONE No more iqueryparams, just add (sql) params in read method to ast
and store these params ourselves in app state.
Still to be done for dossier types
**** DONE read-selected, extraction of id
3 ways to get at it:
1. extract from query, this is not always reliable, the hardcoded param is
   returned, for example when coming back from another route. It seems like
   om-next is passing the query unbound to the parser read method. Even though
   om-next/queries is set properly
2. extract from om-next/queries. Problem is it's keyed by component instance, so
   you need to do a om/class->any on reconciler and class, both only accessible
   by full namespaced vars, to get the component.
3. When changing param, also set client/selected-xxx-id in app-state. Because
   you do get the state in the read method. And then use that to query for in a
   component, and use it in read-selected to set remote or not. Or only use it
   in read-selected, and return selected record as well. .
**** DONE login box on login screen is too wide
**** DONE add route to client/page-state map
**** DONE where to keep filter-search-sort config for tables, and their defaults?
    in pages, config or in namespace of page?
**** DONE dossier type editor needs scroll bars!!!
**** DONE Show error message when send comes back with :status :error
**** DONE show debug drawer on clicking dc logo
**** DONE hamburger top left to open page list
**** DONE support questions
***** DONE generic toolbar
***** DONE generic mutate
***** DONE generic scrolling
***** DONE generic filters, sorts and search
***** DONE paging local and/or on server
**** DONE support-questions then job options then back, bug
Need to click twice on sq, this is because :id of param of query is -1
**** DONE scrolling of full cache should not make call to backend till
cache is exhausted (after coming back from eg job offers and page is reset to 1).
**** DONE search/filter/sort
**** DONE layout like fastmail.
**** DONE put debug buttons in drawer
**** DONE why on selection do all list items get rerendered???!!!???
     Don't pass a changing prop to ALL items!
**** DONE drag to delete doesn't work on ipad??
**** DONE links in help dialogs
**** DONE Enable vorlon.js script in admin.html in dev mode
**** DONE hardcode user/password for dev and better login error handling
**** DONE refactor current-user, client/selected-dossier-type, selected-group/dossier-type into one
**** DONE refactor how current-user is in app-state
    Should be :current-user [:user/by-id 1990]
    And then in table to lookup, so return table with :user/by-id key and then
    also the groups that get referred in them etc.
    So return something different for :current-user read in backend
**** DONE Some space under delete button!!!
**** DONE use localstorage for default page, and default dossier type selection
**** DONE fields in use with no value because it was set to empty string can't be deleted!
**** DONE twice deleting undeletable field goes wrong,
    save button stays disabled?????
   probs meta record out of sync
**** DONE deleting dossier type that's used by deleted dossier?
**** DONE and if possible, deleting dossier type with child dossier types    What if the any of the child dossier types are in use???
**** DONE hide stuff by user's role
**** DONE position: "fixed" for save/undo/redo etc buttons?
**** DONE when not authorized on mutation/read go to login screen!
**** DONE when adding field prompt label name, maybe dialog? or not perhaps
**** DONE fix undo/redo/save/revert
**** DONE delete dossier type mutation story
**** DONE disable save button if any field has error
    we just don't allow empty input, so no more error msgs
**** DONE fix text input!!!
***** Caret moves to the end when editing a text field
This happens due to async rendering of clojurescript react libraries. Luckily, there is a workaround, which fixes most of use cases: Instead of :value prop use :default-value e.g:

(defn simple-text-field [text]
  (let [text-state (r/atom text)]
    (fn []
      [rui/text-field
       {:id "example"
        :default-value @text-state
        :on-change (fn [e] (reset! text-state (.. e -target -value)))}])))

***** HALF DONE update text faster, using component state, not app-state and debounce
   Optimize queries/rerender by using idents, pathopt, more localized queries,
  clever use of read keys/queries in mutations, mutate against reconciler,
  specify queries to execute, with/without transform reads. See other notes in
  this org file.
  https://stackoverflow.com/questions/34952530/i-am-using-redux-should-i-manage-controlled-input-state-in-the-redux-store-or-u  https://stackoverflow.com/questions/33266156/react-redux-input-onchange-is-very-slow-when-typing-in-when-the-input-have-
    http://spraso.com/managing-react-controlled-component-state/
    http://www.position-absolute.com/javascript/my-controlled-input-dilemma-with-react-redux/
    See test-input component also.
Only updating app-state and then rendering the one component is fine. Time
    consuming is rendering dossier-type-selection and dossier-type-form on every keystroke.

***** jumping cursor on input
     https://github.com/reflux/refluxjs/issues/43
     Use plain input elements fixes it at least
     Also not using latest version of material-react through the cljs version
     https://github.com/HurricaneJames/lazy-input
     https://www.npmjs.com/package/react-async-input
     http://searler.github.io/react.js/2014/04/11/React-controlled-text.html

***** fast adding then backspacing char for dossier field locks up form inputs
**** DONE do all the names of dossiers need to be updated when dossier type changes? No!!!
    We can put this name together dynamically on the DC fronted app right?

**** DONE fixed top navbar
**** DONE Show spinner and message: waiting for (websocket) connection with server
    So mount different component, and replace with app.

**** DONE fix locations!
***** limit locations to 2 locations
     Because frontend can only show 2 at the most currently

***** first location name is locatie, second one is organisatie
**** DONE give js blocking warning msg when there are unsaved changes
**** DONE Also keep tree open to these (bold) unsaved dossier-types
**** DONE save dossier type mutation!!
**** DONE test whether name-format works
Do all dossier need to be renamed? Surely not, build and return the name dynamically.

**** DONE Don't show create new subdossiertype under unsaved new dossier types
**** DONE no active switch for hidden field type
**** DONE drag/drop reorder fields,locations,documents,coupled users,contacts,notes,dossiers,checklists boxes
**** DONE cljs compiler  and sourcemaps
     [org.clojure/clojurescript "1.9.89"]
     ;; [org.clojure/clojurescript "1.9.229"] ;17/10/16

**** DONE test cljc
     https://github.com/clojure/clojurescript/wiki/Using-cljc
**** DONE test clj macro in cljs
**** DONE localhost:8080 is hardcoded
**** DONE cljs-repl
**** DONE unsaved dossier-types in bold in left selection tree
**** DONE revert button should be disabled for new dossir type
**** DONE Clean up ui
**** DONE delete dossier-type/delete field
     remove if tempid? from app-state

**** DONE refactor undo/refactor mutations to dedup code
**** DONE undo/redo for fields
**** DONE Do you really want to remove?
   http://www.material-ui.com/#/components/dialog

**** DONE flag for debug info/buttons on screen
**** DONE put components in own files
**** DONE badge to indicate deleted/template/modified
    not a good idea. doesn't look good
    http://www.material-ui.com/#/components/badge
**** DONE Notification when saving/reverting/adding etc
   http://www.material-ui.com/#/components/snackbar
**** DONE Put el back in its place after cancelled delete
    Maybe custom hover event for delete div
    See dossier-types-page
        min-height: 800px;
     border: 1px solid;
     position: fixed;
     top: 6px;
     left: 0;
     width: 10%;
     background: lightsalmon;
     opacity: 1;
     z-index: 10000;
**** DONE show data on login, not only till after refresh
**** DONE WHen updating name of field, update label in field
     Can get out of sync because I can't identify label in name-format properly
     Only by passing in previous label. Nameformat should be built up out of ids
     of fields, not of strings separated by a dash.

**** DONE first update to status works only debounced?
**** DONE change order, update status goes wrong
**** DONE reordering fields doesn't reorder properly
**** DONE spinner?
**** DONE Status text field loses focus because key is not stable
     fixed for now with status keys prop in dossier type record. dissoc it before
     saving to server!!
**** DONE When deleting field, remove field from nameformat
**** DONE name format a la ui/chip
***** set first field created to name-format
***** drag/drop chips
***** either drag fields to name format or select from dropdown
     dropdown is always the same as existing fields

**** DONE Removing a field/dossier-type should only set a flag
Backend can sort it out, and frontend can have superfluous (deleted) data lying
around till next refresh of page right.
**** DONE edit dossier types for other groups
**** DONE Remove status/field/location
Drag away or x?
**** DONE no dots or dashes in field names!
**** DONE edit status
**** DONE reorder doesn't work anymore :-(
**** DONE tempid becomes string in dataset!!"
**** DONE revert
   restore selected dossier type from meta,
then restore its fields as well

**** DONE Type text in dossier status, enter to add to list
Drag/drop to change order, drag away or little x to remove

**** DONE Adding a subdossier shoulnd't set it as dirty.
**** DONE icon for dossier type in selection list
**** DONE show save button according to dirty state of selected dossier type










* ===============================================================================================
* Datomic
** http://www.hyperfiddle.net/
* jobs
** http://oscoin.io/

Software Engineer, Oscoin

    Location: Berlin Commitment: Full-time Compensation: 100'000 EUR/year + equity1 Paid vacation: 30 days 

At Monadic, the team behind oscoin, we're hiring our first engineers. We're looking for experienced candidates who are well versed in functional programming and distributed systems. We'd like to speak to people who are empathetic, humble, passionate about their work and strive for excellence.

Currently, all of our efforts are focused on building the reference implementation of oscoin, an open-source protocol and network for decentralized code hosting and collaboration which aims to make open-source development more sustainable.

Everything we build is open-source. Our language of choice is Haskell. You will be tasked to build and deploy fault-tolerant distributed systems based on cryptographic proofs, authenticated data-structures and distributed-ledger technologies.

You will have to keep up to date with recent developments in the field; the ability to read research papers and produce working implementations is essential. You will have to be an excellent communicator, both in oral and written form.

We invest in people primarly, not technologies: if you are a seasoned software engineer but lack experience with some of the tools, technologies or languages we use, we can get you up to speed.

At Monadic, the culture is the people we hire. We have core tenets which you will learn about and help shape, but these revolve principally around how we treat each other and what standards we try to meet when working together.

If you'd like to apply, please send us an email at jobs@monadic.xyz with your résumé and links to or samples of work you've done; we especially value open-source contributions.

    The salary is equal for all employees, including founders, regardless of location. We believe in having a level playing field for everyone and in keeping the team small. Equity is negotiable based on experience. ↩


* quick access!!
  https://digitalechecklisten.nl/app/#/checklists/176340
Lispy!!
https://github.com/abo-abo/lispy
  http://oremacs.com/lispy/

Cider manual
 http://cider.readthedocs.io/en/latest/

String manipulation
https://funcool.github.io/cuerdas/latest/

Material-ui react
http://www.material-ui.com/#/ | Material-UI

Om next documentation
  https://github.com/omcljs/om/wiki/Documentation-%28om.next%29
  wiki:
  https://github.com/omcljs/om/wiki/

Om kanban example repo
  https://github.com/Jannis/om-next-kanban-demo

Grimoire:
  http://jafingerhut.github.io/cheatsheet/grimoire/cheatsheet-tiptip-cdocs-summary.html
Grimoire cljs
  http://cljs.info/cheatsheet/
Quickref
  http://faustus.webatu.com/clj-quick-ref.html
  http://clojuredocs.org/quickref

Google search in om slack archive:
 https://www.google.com/advanced_search
 https://www.google.com/search?as_q=om-next&as_epq=&as_oq=&as_eq=&as_nlo=&as_nhi=&lr=&cr=&as_qdr=all&as_sitesearch=https%3A%2F%2Fclojurians-log.clojureverse.org%2F&as_occt=any&safe=images&as_filetype=&as_rights=B

* Problems
http://tonsky.me/blog/the-web-after-tomorrow/
** Frontend queries datascript
and gets map to give to react

** Syncing problem
Also is latency problem
This is a writing problem
Server needs to be single threaded for write operations, to make writes
sequential.
Every entity on the client is stored with a sequential index
When writing an attribute of the entity increase the seq.
Client sends entity id, seq and one or more attributes to save.
Server only updates attr when seq is same.

** Browser limited storage problem
We can not duplicate the server's db, but need to make do with a (small) subset.
about 5 or 10mb for localstorage
- compress before persisting
- make system for expiring/culling datoms
- keep track of how big the datascript db is
- components can ask for data if it's missing
- can keep much more in memory
*** Every component knows what it needs
If it's not there it can ask, once every component has asked for what it needs,
a map can be built and the request sent to the server.
But make a hash of it first and send that first? So only send the map when the server hasn't seen it yet.
Or a ui page needs to declare the data map it needs first perhaps.

** Partial collection problem
As a result of a search, or filter. Or just paged results, sorted in whatever way.
** Subscription problem (biggest problem)
Clients need to indicate what data they're interested in
http://deepstream.io/tutorials/simple-app-using-react.html
https://medium.com/apollo-stack/graphql-subscriptions-in-apollo-client-9a2457f015fb#.wmepyd6jf
** Ideas from other libs/frameworks/articels
*** Articles
***** http://grokbase.com/t/gg/clojure/157kvm98qv/building-falcor-relay-for-clojure-clojurescript
In a recent talk, David Nolen talks about a great idea for Om Next, where components declaratively describe what data they’re interested in. [omnext] I’d like to explore the optional server-side router part. The idea is that you write your code on the front-end as if you have *all* the data; then, in the background, you download just enough data to do it. This idea has also been explored by Facebook with Relay, and Netflix with Falcor.

Since David suggested using Datomic pull syntax to describe what data you’re interested in, Datascript was my first port of call. The author of Datascript has also written a superb article on exactly this topic. [webtmrw]

Falcor has it easier, though; because it solves a very specific problem. It does asynchronous access for strictly hierarchical model objects whose schema is known completely ahead of time, and without any querying capabilities like Datascript’s.

The challenge is that Datascript is really just a bunch of tuples in a few sorted sets. [dsint] We’re trying to teach it about data that *doesn’t* live there. While Datascript makes it easy to write additional backends (IDB, ISearch, IIndexAccess), those APIs are synchronous, so I can’t do much in the browser.

The obvious piece of data to ferry around is the datom; the hard part is:

1. knowing if there’s datoms you don’t know about, but live on the server,
2. as the server, knowing which datoms are relevant.

One approach might be to just run queries on the server as well as on the client. Another is to add “hints” that there’s some data here, but you just don’t know what it is. (The problem is that the latter breaks pretty easily; it’s not like you can do range queries on `:go-ask-the-server`…)

Finally, there’s backing this data with, say, a legacy REST API or something. That’s fine as long as you do it on the server, because the blocking restriction goes away.

Due to my relative inexperience with Datascript/Datomic, I wanted to reach out to the mailing list before continuing. Is anyone else working on something similar? Good results, dead ends?

[omnext]: https://www.youtube.com/watch?v=ByNs9TG30E8
[webtmrw]: http://tonsky.me/blog/the-web-after-tomorrow/
[dsint]: http://tonsky.me/blog/datascript-internals/
*** Tonsky article:
http://tonsky.me/blog/the-web-after-tomorrow/
*** Falcor
Retrieve only requested data needed to build ui.
Single server endpoint. (data is api)
To avoid allowing the cache to grow larger than the available memory on the device, developers can configure a maximum size for the cache. When the cache grows beyond the maximum size, the least-recently-used values are purged. This makes it possible to run the same application on an inexpensive mobile device or a powerful desktop machine.
Batch/bundle requests
In addition to batching outgoing requests, the Falcor Model dedupes requests. If a request is made for a value for which there is already an outstanding request, no additional request is made.
Refs for objects to normalize data (deduping duplicates in json tree, making it
a graph).

*** Relay
Colocations of declarative parameterized queries for data with the view that consumes the data.

Never again communicate with your data store using an imperative API. Simply declare your data requirements using GraphQL and let Relay figure out how and when to fetch your data.

Queries live next to the views that rely on them, so you can easily reason about your app. Relay aggregates queries into efficient network requests to fetch only what you need

Relay lets you mutate data on the client and server using GraphQL mutations, and offers automatic data consistency, optimistic updates, and error handling.

Given a set of query fragments, a mutation, a query that represents all parts of the world that might change as a result of this mutation (the ‘fat query’), and a set of behaviors to exhibit when the server responds (the ‘query configs’), Relay will ensure that all of the data necessary to perform the mutation has been fetched, and that your client-side data stays in sync with the server after the mutation.
*** re/frame
re-frame is a pattern for writing SPAs in ClojureScript, using Reagent.

*** Meteor
*** Virtualdom.js
https://github.com/Matt-Esch/virtual-dom
Clojurescript version, kind of: dominator
https://github.com/dubiousdavid/dominator
*** Elm
http://elm-lang.org/
Uses virtualdom.js
Signals in clojurescript:
https://github.com/jamesmacaulay/zelkova
implementing-elm-architecture-clojurescript:
http://spin.atomicobject.com/2015/07/09/implementing-elm-architecture-clojurescript/
*** Cycle.js
https://www.youtube.com/watch?v=uNZnftSksYg
http://cycle.js.org/
Uses RxJs
Uses virtualdom.js
Purely functional (no this, classes etc)
*** dato
https://github.com/datodev/dato
Dato is an alternative approach to building apps, heavily inspired by Meteor, Firebase, and Parse, but with a strong bent towards using FP to make app design, iteration, tooling, and implementing features considerable easier. By default it comes with lag-compensation, security rules, and server-side function call. It'll eventually extensible so that e.g. offline apps, Operational Transform (Etherpad/Google Docs-like functionality), and other behaviors should be accessible and efficient.

* loc
** 17 jan 2017
  local~/src/clojure/bilby (master>)$cloc $(git ls-files)
     152 text files.
     152 unique files.
      57 files ignored.

http://cloc.sourceforge.net v 1.60  T=0.08 s (1659.8 files/s, 286962.2 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ClojureScript                   59           1401           2289           6071
Clojure                         39            942           1347           4367
SASS                            13            214            120           1566
HTML                             5            363             17           1507
CSS                              4            158              8           1002
SQL                              5            122            271            350
Javascript                       3              2              0             13
-------------------------------------------------------------------------------
SUM:                           128           3202           4052          14876
-------------------------------------------------------------------------------

** 28 March 2017
local~/src/clojure/bilby (frontend-testing)$cloc $(git ls-files)
     217 text files.
     217 unique files.
      68 files ignored.

http://cloc.sourceforge.net v 1.60  T=0.19 s (936.9 files/s, 155675.8 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ClojureScript                   96           2375           3074          10568
Clojure                         48           1150           1661           5035
SASS                            13            214            121           1574
HTML                             5            363             15           1508
CSS                              6            194             13           1153
SQL                              5            125            276            352
Javascript                       7             56             70            268
YAML                             1             12             16             45
Bourne Shell                     1              0              0              2
-------------------------------------------------------------------------------
SUM:                           182           4489           5246          20505

** April 2018
   local~/src/DC/bilby (supergroups *>)$cloc $(git ls-files)
     315 text files.
     313 unique files.
     164 files ignored.

github.com/AlDanial/cloc v 1.70  T=0.40 s (703.9 files/s, 118766.4 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ClojureScript                  110           2646           3190          14325
Clojure                         98           1835           1827           7883
ClojureC                        15            506            451           4480
JavaScript                      12            359            346           2104
HTML                             6            363             28           1591
SASS                            10            193             44           1190
CSS                              6            193             13           1156
SQL                             10            253            407           1029
Markdown                         3            185              0            349
YAML                             2             68            223            100
JSON                             5              0              0             64
Bourne Shell                     4              0              0              9
-------------------------------------------------------------------------------
SUM:                           281           6601           6529          34280
-------------------------------------------------------------------------------
this is without DC-util
** May 5 2018

        344 text files.
     342 unique files.
     167 files ignored.

github.com/AlDanial/cloc v 1.70  T=0.25 s (1232.6 files/s, 233049.5 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ClojureScript                  114           2750           3263          14627
Clojure                         79           2006           1690           8105
ClojureC                        55           1248           1587           8079
JSON                             6              0              0           4428
JavaScript                      12            359            346           2104
HTML                             6            363             28           1591
SASS                            10            193             44           1190
CSS                              6            193             13           1156
SQL                             10            257            412           1068
Markdown                         3            187              0            355
YAML                             2             68            219            106
Bourne Shell                     4              0              0              9
-------------------------------------------------------------------------------
SUM:                           307           7624           7602          42818
-------------------------------------------------------------------------------

** May 30 2018 templates branch merged with release_master
local~/src/clojure/bilby (templates-merge-supergroups>)$cloc $(git ls-files)
     385 text files.
     383 unique files.
     169 files ignored.

github.com/AlDanial/cloc v 1.74  T=0.54 s (638.6 files/s, 125410.2 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ClojureScript                  139           3431           5190          18024
ClojureC                        65           1466           2003           9470
Clojure                         80           2030           1752           8036
JSON                             6              0              0           5981
JavaScript                      12            361            346           2110
HTML                             7            364             28           1605
Sass                            11            212             44           1386
CSS                              6            193             13           1156
SQL                             11            260            419           1072
Markdown                         3            189              0            404
YAML                             2             68            224            103
Bourne Shell                     4              0              0              9
-------------------------------------------------------------------------------
SUM:                           346           8574          10019          49356
-------------------------------------------------------------------------------

* security
Login, return remember_token
Client stores it
Sends it with every request
Server looks user from uid and fetches user, and checks whether rememeber_token
is still the same.
Server could keep all logged in users in memory, or use redis.
User preferences could be saves with the user in a column with json, or in a
linked separate table.
Again this could be kept in memory, possibly purging users that haven't logged
in for a while.
This saves having to retrieve the user for every request from a database.
If user gets modified, cache will have to be updated. It can just be removed
from it.
Store remember token in cookie, http-only and secure-only. This way javascript
and mim can't get at it.
This does mean that logging in needs to be done uses xhr, not websocket, to set
the http-only cookie.
The websocket will then have the cookie attached I'm pretty sure.
Sente attaches uid to channel based on remember token, doing this once. It'd be
nice if we could attach a user, or just data, like a session.
If sente fell back to ajax, uid will be set on every request, by fetching user
by remember token, though I couldn't test it because couldn't get cors to work
with

* syncing

Keep track of all current queries of connected clients
When a mutation happens, run all queries over result of mutation.
The result is just a partial db, but only the modified bits, so that should work.
Notify all clients that have a query that gives a result over the mutated data.
Send them that query result to merge with their data.
Their current query is kind of their subscription to data.

Decoupling of read and write would be cool.
Let all reads just happen, but a mutation can get stored in a mutation
queue/db/table.
Since reads are many, mutations few, you could build delay the mutations. Then
pause the query processing, take the current batch of mutations, keep queuing
any further mutations, lock database, process the mutations one by one, in the order they came
in, bundle up the results, run every current query over it, broadcast result to
their connected client., then go back to processing queries,

Something like that?

Problem is async and latency in updating and querying.

Also is latency problem
This is a writing problem
Server needs to be single threaded for write operations, to make writes
sequential.
Every entity on the client is stored with a sequential index
When writing an attribute of the entity increase the seq.
Client sends entity id, seq and one or more attributes to save.
Server only updates attr when seq is same.

Also, how does http-kit work? Single threaded? Do all requests get processed one
by one, or in parallel at all?

https://hashrocket.com/blog/posts/websocket-shootout
The Clojure server is built on the HTTP Kit web server. The interesting parts are in server.clj.

When a client connects they are stored in an atom of channels. This gives us concurrency safety, which is important since Clojure will handle requests in parallel.

* backend workers
Ideally you'd want layer between client and database as thin as possible
Preferably only to do security for retrieving data. Everything else should be
via messages, stored in database, processed by misc independant (parallel?)
workers. Perhaps even some/any/all mutations. Results of mutatations should then
be broadcast out again.

* decisions
** DONE sierra components? No!!
** DONE boot of lein? Boot, but also lein for server!!
*** leiningen
*** boot
https://github.com/boot-clj/boot
http://adzerk.com/blog/2014/11/clojurescript-builds-rebooted/
https://github.com/boot-clj/boot/wiki#burndown
https://deraen.github.io/boot-cljs-tooling/

** DONE Logging? Timbre!!

** DONE sablono for om/next components?
** No state in url
No routing in backend or frontend
** Persist data and app state in local storage
Falcor model:
Retrieve only requested data needed to build ui.
Single server endpoint. (data is api)
To avoid allowing the cache to grow larger than the available memory on the device, developers can configure a maximum size for the cache. When the cache grows beyond the maximum size, the least-recently-used values are purged. This makes it possible to run the same application on an inexpensive mobile device or a powerful desktop machine.
Batch/bundle requests
In addition to batching outgoing requests, the Falcor Model dedupes requests. If a request is made for a value for which there is already an outstanding request, no additional request is made.
Refs for objects to normalize data (deduping duplicates in json tree, making it
a graph).

 http://www.html5rocks.com/en/features/storage
http://www.html5rocks.com/en/tutorials/offline/quota-research/
http://demo.agektmr.com/storage/
http://stackoverflow.com/questions/2989284/what-is-the-max-size-of-localstorage-values
Compress before storing?:
https://github.com/k-yak/JJLC


** boot-figwheel
 https://github.com/aJchemist/boot-figwheel

* Good to know
** union queries
https://untangled-web.github.io/untangled/reference/reference.html#_unions
Unions

Union queries are used strictly as the subquery on joins, and are represented by a map. The keys of the map represent the possible choices of subquery to run, and the value represents the subquery.

In the case of a union query one must realize that it is impossible to say what the query means until you look at the actual database. Here is how they work:

1    Examine the Ident at the join point of the join. Extract the keyword from that ident.

2    Use the ident from (1) to look up the subquery from the union.

3    Continue processing the query using that subquery

Union Example

Assume the following simple database:

    { :things [ [:people/by-id 1] [:animals/by-id 1] ]
      :people/by-id { 1 { :id 1 :type :person :name "Joe" } }
      :animals/by-id { 1 { :id 1 :type :dog :breed "Poodle" } } }

The following query:

    [{:things { :people/by-id [:type :name] :animals/by-id [:type :breed] }}]

would see the to-many join of :things, and for each element it would select the proper subquery. Resulting in:

[ { :type :person :name "Joe" }
  { :type :dog :breed "Poodle" } ]

Unions work fine on to-one joins exactly the same (returning only one result).

** Clojure repls
   https://lambdaisland.com/guides/clojure-repls
   https://github.com/binaryage/dirac/blob/master/docs/about-repls.md
** Timbre logging
   https://stackoverflow.com/questions/32310619/clojure-configure-timbre-logging#32340732
** Ring
https://github.com/ring-clojure/ring/wiki/Concepts


* how-to

** inspect clojure data structures
*** clojure-inspector
https://puredanger.github.io/tech.puredanger.com/2010/02/10/clojure-inspector/
   One useful utility built into Clojure is the ability to pop up a Swing app that can inspect a data structure.

The inspector comes with clojure core so just do this to start using it:

user=> (use 'clojure.inspector)
If we want to look at our data in the form of a tree we can do something like this:

(inspect-tree {:a 1 :b 2 :c [1 2 3 {:d 4 :e 5 :f [6 7 8]}]})
which will yield the following gui:



Or try a table view if that’s more convenient:

(inspect-table [[1 2 3][4 5 6][7 8 9][10 11 12]])


Or you can use the generic inspect function to look at arbitrary objects.

(inspect (System/getProperties))


You’ll note some intriguing looking buttons in the button bar at the top of that UI but as far as I can tell, they don’t do anything.


*** https://github.com/eriksvedang/data-to-html
Usage
[data-to-html "0.1.2"]
Import the project and its two functions

(ns weather.core
  (require [data-to-html.core :refer [convert open-in-browser inspect]]))
Define some data

(def my-data {:temperature 27 :forecast #{:cloudy :rain :thunder}})
Run the data through convert to turn it into a html string. Use open-in-browser to save the string into a html page and make your OS open it in a browser.

(-> my-data
    convert
    open-in-browser)
You can also use inspect to do it all in one function call

(inspect my-data)
inspect also returns the data again so that you can insert it in the middle of a threading macro

(-> my-data
    :forecast
    inspect ; opens browser!
    :cloudy
    boolean) ; => true

*** debux
https://github.com/philoskim/debux
** workflow
  In bilby:
  boot -c bilby-libs:0.1.6 -c dc-util:0.1.3 dev -s
  In bilby-libs:
  boot watch-and-install

 Open up repl in bilby-libs emacs and connect to bilby repl/jvm, so port 38400, not
 to bilby-libs jvm. C-, to eval bilby-libs clj buffer
** cljs compilation
  http://upgradingdave.com/blog/pages/006_boot_cljs.html#where_to_put_cljs_files?
** clojure promise delay future
  (do
  (def p (promise))
  (deliver p (do (pprint "doing promise") (Thread/sleep 1000) (pprint "done") :done))
  (Thread/sleep 2000)
  (pprint "deref promise")
  (pprint @p))
;;Prints:
;; "doing promise"
;; <one second pause>
;; "done"
;; <two seconds pause>
;; "deref promise"
;; :done

(do
  (def d (delay (do (pprint "doing delay") (Thread/sleep 1000) (pprint "done") :done)))
  (Thread/sleep 2000)
  (pprint "force delay")
  (pprint (force d)))
;;Prints:
;; <two seconds pause>
;; "force delay"
;; "doing delay"
;; <one second pause>
;; "done"
;; :done

(do
  (def f (future (do (pprint "doing future") (Thread/sleep 1000) (pprint "done") :done)))
  (Thread/sleep 2000)
  (pprint "deref future")
  (pprint (deref f)))
;;Prints:
;; "doing future"
;; <one second pause>
;; "done"
;; <one second pause>
;; "deref future"
;; :done

** contentEditable
           ;; (html
        ;;  (let [{:keys [id callback disable-debounce]} (om/props this)
        ;;        {:keys [value debounce]} (om/get-state this)
        ;;        update (fn [id value]
        ;;                 (let [text-el (.getElementById js/document id)
        ;;                       text (.-innerHTML text-el)
        ;;                       text (unescape-html text)]
        ;;                   (if (not= text value)
        ;;                     (callback text))))
        ;;        ]
        ;;    [:div {:id id
        ;;           :class "contenteditable"
        ;;           :style {:padding-left "1em"
        ;;                   :font-size font-size}
        ;;           :onInput (fn [ev]
        ;;                      (info "input!")
        ;;                      (if-not disable-debounce
        ;;                        (debounce (fn [] (update id value))))
        ;;                      )
        ;;           :onBlur #(update id value)
        ;;           :onPaste (fn [e]
        ;;                      (.preventDefault e)
        ;;                      (let [text (.getData (aget e "clipboardData") "text/plain")
        ;;                            text (escape-html text)]
        ;;                        (js/document.execCommand "insertHTML" false text))
        ;;                      )
        ;;           :contentEditable "true"
        ;;           :dangerouslySetInnerHTML {:__html (escape-html value)}}]))

      works, but on enter and rerender cursor is set to beginning!!!. Normal
      editin and rerendering on every keystroke works though
** profiling

Profiling the code

Same situation as with debugging: all the standard browser toolbox is available. In Chrome it’s just a matter of calling the built-in profiler.

(.proflile js/console "Profile name")
;; some code
(.profileEnd js/console)
See Jason Rudolph’s blog post for handy screenshots that explain everything.
http://jasonrudolph.com/blog/2012/09/11/clojurescript-4-things-that-might-worry-you-but-should-not/

** destructering
   (def contact
  {:firstname "John"
   :lastname  "Smith"
   :age       25
   :contacts {:phone "+44.123.456.789"
             :emails {:work "jsmith@company.com"
                      :personal "jsmith@some-email.com"}}})

(let [{{:keys [phone]} :contacts} contact]
  [phone]
  )
(let [{:keys [firstname lastname] {:keys [phone]} :contacts} contact]
  [firstname lastname phone]
  )


** icons

;; (ic/action-view-list)
;; (ic/action-list)
;; (ic/action-search)
;; (ic/navigation-expand-less)
;; (ic/av-playlist-add)
;; (ic/communication-clear-all {:style {:transform "rotate(0deg) scaleY(-1)"}})
;; (ic/content-add)
;; (ic/content-clear)
;; (ic/content-redo)
;; (ic/content-undo)
;; (ic/content-sort {:style {:transform "rotate(180deg) scaleY(-1)"}})
;; (ic/action-view-headline {:style {:transform "skewX(30deg)"}})

** directory serving
   https://github.com/adzerk-oss/boot-cljs/wiki/Serving-files
   https://github.com/pandeiro/boot-http/blob/master/src/pandeiro/boot_http/impl.clj
   ;;
;; Directory serving
;;
(def index-files #{"index.html" "index.htm"})

(defn index-file-exists? [files]
  (first (filter #(index-files (s/lower-case (.getName %))) files)))

(defn path-diff [root-path path]
  (s/replace path (re-pattern (str "^" root-path)) ""))

(defn filepath-from-uri [root-path uri]
  (str root-path (URLDecoder/decode uri "UTF-8")))

(defn list-item [root-path]
  (fn [file]
    (format "<li><a href=\"%s\">%s</a></li>"
            (path-diff root-path (.getPath file))
            (.getName file))))

(defn index-for [dir]
  (let [root-path (or (.getPath (io/file dir)) "")]
    (fn [{:keys [uri] :as req}]
      (let [directory (io/file (filepath-from-uri root-path uri))]
        (when (.isDirectory directory)
          (let [files (sort (.listFiles directory))]
            {:status  200
             :headers {"Content-Type" "text/html"}
             :body    (if-let [index-file (index-file-exists? files)]
                        (slurp index-file)
                        (format (str "<!doctype html><meta charset=\"utf-8\">"
                                     "<body><h1>Directory listing</h1><hr>"
                                     "<ul>%s</ul></body>")
                                (apply str (map (list-item root-path) files))))}))))))

(defn wrap-index [handler dir]
  (fn [req]
    (or ((index-for dir) req)
        (handler req))))
** realtime apps
   https://medium.com/adstage-engineering/realtime-apps-with-om-next-and-datomic-470be2c8204b#.ppbn7ir31
** install cloned lib locally
   lein do pom, jar, install
   and require lib version as stated in its project.clj
** records and protocols
   http://davedellacosta.com/cljs-protocols
#+BEGIN_SRC clojure

(defprotocol Fun-Time (drinky-drinky [_]))

;; define a record and extend the previous protocol, implementing its function
(defrecord Someone [nick-name preffered-drink]
  Fun-Time (drinky-drinky [_]
             (str nick-name "(having " preffered-drink "): uuumm")))

(println Someone)
;; NOTE how 'nick-name' and 'preffered-drink' are symbols that are not declared anywhere, they are 'provided' inside the function

;; instantiate the protocol once and store it
(def dude (->Someone "belun" "daiquiri"))

(def dude2 {:nick-name "bla"})
;; use the function defined inside the protocol on the protocol instance
(drinky-drinky dude)
;; -> "belun(having daiquiri): uuumm"
(drinky-drinky dude2)
;; java.lang.IllegalArgumentException: No implementation of
;; method: :drinky-drinky of protocol: #'parser.read/Fun-Time found for class:
;; clojure.lang.PersistentArrayMap
#+END_SRC

** build.boot reload??
   https://stackoverflow.com/questions/33982533/clojure-boot-repl-in-a-particular-namespace
** startup app
*** start server
in server dir:
boot dev
In emacs
cider-connect
Make sure mysql is running
Goes to dev namespace which starts app

*** frontend
boot dev in frontend dir
edit css in styles/styles.clj
add tasks to tasks
Emacs:
cider-connect
Do (start-repl) in boot.user repl
Possibly refresh browser to connect
*** test sente
In backend repl:
(ns app.web-sockets)
Set appropriate uid-????
(chsk-send! :uid-123456 [:some/request-id {:name "michiel"}] )
(chsk-send! :uid-nil [:some/request-id {:name "michiel"}] )
In frontend cljs repl:
(ns sente.dispatcher)
(app.sente/chsk-send! [:some/request-id {:name "michiel"}])
*** emacs repl to cljs (obsolete)
cider-connect
(start-repl)

or M-x boot

(require 'app.core)
(ns app.core)
(myfun)
test repl with
(js/alert "boo")
(.log js/console "bar")

In lein repl:
(chsk-send! :taoensso.sente/nil-uid [:some/request-id {:name "michiel"}] )
Or (start-broadcaster!)

Start up ring-server with lein repl in src/clojure/app/ring-server directory
Then in cljs repl:
(app.sente/chsk-send! [:some/request-id {:name "michiel"}])
or
(ns app.sente)
(chsk-send! [:some/request-id {:name "michiel"}])

** metrics
    https://metrics-clojure.readthedocs.io/en/latest/
** logging
   https://github.com/pyr/unilog
   http://www.mkyong.com/logging/log4j-log4j-properties-examples/
   https://sentry.io/platforms/
   https://github.com/pyr/raven
   A Clojure library to send events to a sentry host.
** emacs repl
   https://github.com/clojure-emacs/cider/blob/master/doc/up_and_running.md
** boot
https://github.com/boot-clj/boot/wiki/Boot-for-Leiningen-Users
** lispy
https://github.com/nyobe/evil-lispy
https://github.com/abo-abo/lispy
http://oremacs.com/lispy/
** Find outdated deps
https://github.com/martinklepsch/boot-deps
boot deps
** interop with js
   http://lukevanderhart.com/2011/09/30/using-javascript-and-clojurescript.html
   https://github.com/binaryage/cljs-oops
http://www.spacjer.com/blog/2014/09/12/clojurescript-javascript-interop/
http://clojurescriptmadeeasy.com/blog/cljs-read-files-line-by-line-on-nodejs.html
*** Depend on javascript libs
http://cljsjs.github.io/
https://github.com/lambdaisland/thirdpartyjs
*** how can i add properties to a js object that i initialized in component local state?

anmonteiro [10:03 PM]
@krchia: `(goog.object/set the-object "foo" 42)`

krchia [10:05 PM]
@anmonteiro: isn’t that the same as (set! the-object “foo” 42)?

anmonteiro [10:06 PM]
that would be `(set! (.-foo the-object) 42)`, which might break with advanced optimizations

krchia [10:06 PM]
i was thinking of (om/set-state! owner the-object (some-function-that-returns-object-with-new-property)

anmonteiro [10:07 PM]
@krchia: so `set-state!` will completely overwrite the existing state

krchia [10:07 PM]
do i have to do (fn [] (set! object x y) object)

anmonteiro [10:07 PM]
@krchia: you also have `doto` which might be useful for these cases

[10:07]
 ```;; returns the-object
(doto the-object
  (set! x y))
```

krchia [10:08 PM]
ohh, interesting

peeja [11:53 PM]
@krchia: I think you're looking for `update-state!`


----- August 2nd -----
krchia [12:01 AM]
@peeja: not sure what’s the difference between update-state! and set-state! - the docs aren’t making it clear for me

peeja [12:01 AM]
`update-state!` takes a function, like `update`

[12:01]
`set-state!` just takes the new value for the state

[12:02]
https://clojurians.slack.com/archives/om/p1470081988000606
 krchia
i was thinking of (om/set-state! owner the-object (some-function-that-returns-object-with-new-property)
Posted in #omToday at 10:06 PM

[12:03]
So, `(update-state! owner :click-count inc)`

krchia [12:03 AM]
what if i’m dealing with mutable js data structures?

[12:03]
updating the state after i pop/push a array for instance

peeja [12:03 AM]
while `(set-state! owner :click-count 10)`

[12:04]
I'm not sure I follow

[12:04]
Why do you have mutable objects in your state?

[12:04]
That sounds like recipe for disaster

krchia [12:05 AM]
working with d3

peeja [12:06 AM]
Ah. What's the thing you're mutating?

krchia [12:07 AM]
are you familiar with d3?

peeja [12:07 AM]
I am

krchia [12:07 AM]
perhaps you might know a better way - i’m just working with the d3.layout.tree structure

[12:08]
just trying to implement this example, where you push new nodes into both the nodes structure and as a children of a parent node

peeja [12:08 AM]
Typically in d3 you're just getting new data an re-drawing your d3 stuff over the existing DOM, correct?

krchia [12:08 AM]
added a JavaScript/JSON snippet
 var n = {id: nodes.length},
      p = nodes[Math.random() * nodes.length | 0];
  if (p.children) p.children.push(n); else p.children = [n];
  nodes.push(n);
Add Comment

peeja [12:08 AM]
Ah, link?

krchia [12:08 AM]
http://bl.ocks.org/mbostock/999346
 bl.ocks.org
Random Tree
Mike Bostock’s Block 999346


[12:08]
yup

peeja [12:09 AM]
I would move the generation of the data out of your component entirely

[12:09]
Your component can take in data, then on `did-update` it can redraw the d3

krchia [12:09 AM]
sorry, what does that mean ?

[12:10]
so i keep it in app-state or a global variable ?

peeja [12:10 AM]
You're generating random data inside the component

[12:10]
Keep it in whoever's calling this component

[12:10]
Just don't complect ​_generating_​ the data with ​_rendering_​ the data

krchia [12:11 AM]
i’m not doing that for now - to make things simple i have a vector of pre-generated data to test it with

peeja [12:11 AM]
Ah, then that makes this easy:

[12:11]
Just pass that data into your component

[12:12]
Each time your component gets different data, it'll re-render. The actual `render` isn't going to be interesting, but it'll also call `will-update`, and ​_that's_​ where you call your d3 code from.

[12:12]
(with the new params your component has just received) (edited)

krchia [12:13 AM]
did you mean did-update?

peeja [12:13 AM]
Yeah, sorry, that's right

[12:13]
(it could be either, really, but `did-update` is more appropriate)

krchia [12:14 AM]
ok, hang on a sec while i try this stuff out

peeja [12:14 AM]
There's a bunch going on here, but this may be a useful example: https://github.com/circleci/frontend/blob/dbfad41b58f6107d51013e86e63f05379022eb90/src-cljs/frontend/components/insights.cljs#L374
 GitHub
circleci/frontend
CircleCI's frontend


krchia [12:14 AM]
i already have my d3 code in did-update

[12:14]
i’m just going to take out the data from the local component state

peeja [12:15 AM]
The trick is that it sounds like you're passing in non-CLJS objects as the data. Is that right?

krchia [12:15 AM]
added a JavaScript/JSON snippet
(ns cljs-d3.gametree
  (:require [cljs.core.async :refer [chan close! put! <!]]
            [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]
            [clojure.string :as str]
Add Comment Click to expand inline 210 lines

krchia [12:16 AM]
yeah, should i just apply clj->js only when i’m going to render them ?

[12:16]
and prepare it with clojurescript operations

peeja [12:16 AM]
Hmm, there's all kinds of surprising stuff in here…

[12:17]
Why the `go`?

krchia [12:17 AM]
yeah, it’s not an exact copy, it’s suppose to be rendering game trees of 2048

peeja [12:17 AM]
Ooh, neat!

krchia [12:17 AM]
perhaps it’s not the right way? using it to imitate setInterval

peeja [12:18 AM]
Oh, I see. Yeah, fair enough, I think that makes sense

krchia [12:19 AM]
it’s super messy, sorry bout that

peeja [12:19 AM]
The reason I'm calling out passing in JS objects as the component's data is that Om depends on being able to `=` the old params and the new params to see if they've changed

krchia [12:20 AM]
hmm

[12:20]
so if i want to (.push some-component-data foo)

[12:20]
what happens?

peeja [12:20 AM]
Nothing

[12:20]
It won't notice

krchia [12:21 AM]
what’s the idiomatic way of doing this?

peeja [12:21 AM]
You want as much of this to be immutable as you can get away with

krchia [12:21 AM]
push, then set-state or convert back to clj and set state?

peeja [12:21 AM]
I'm not sure what the pushing is for

[12:21]
Oh, I see what you're doing

[12:21]
No, you just want to reimplement this with immutable data (edited)

krchia [12:21 AM]
ah, it’s the “add a new node to a random parent” part in the d3 code, because if i don

peeja [12:22 AM]
You don't want to `.push` onto an existing object, you want to `conj` onto a vector

krchia [12:22 AM]
don’t push in the children into the parent’s node, then it doesn’t render

peeja [12:22 AM]
Then you want to pass the new vector into the component

krchia [12:23 AM]
so convert it back to clj, then render it using the js data

peeja [12:23 AM]
So, if you want this to run as an animation, you'll want to have something on the outside that re-renders the component every X ms with the new data

[12:23]
convert it back to clj?

krchia [12:23 AM]
sorry, i thought d3.transition will take care of the work

[12:23]
i just need to update the component state

[12:24]
yeah, i store the tree data structure (to be rendered in d3) as an js object

peeja [12:24 AM]
Ah, you know what, to really use Om, you'll want to put the node data structure in the ​_app_​ state, and then kick off something that changes that state over time

[12:25]
So, each tick, the app state atom points to a new tree of nodes, exactly like the last, but with one random node added

[12:25]
Then Om notices that the state atom has changed, so it passes that value into the component

[12:26]
Then the component converts that into more JS-y values (if necessary), and passes that to d3

krchia [12:26 AM]
it works with local component states as well right?

[12:26]
sorry for the slow replies - my hands are kind of bandaged up

peeja [12:26 AM]
Aw, I'm sorry :disappointed:

[12:26]
Yeah, it'll work with component state too

[12:27]
It just means putting the ticking mechanism inside the component (which I guess is what you've done)

[12:27]
That should work fine

krchia [12:28 AM]
yeah, thanks :slightly_smiling_face: you’ve been great

[12:28]
i think i’m going to try that approach - storing the data in clojure data structures, then converting to js data only when d3 needs it

anmonteiro [12:29 AM]
@krchia: I haven’t been following the whole discussion, but for performance you might want to keep JS datastructures

peeja [12:29 AM]
:thumbsup: Good luck!

krchia [12:30 AM]
@anmonteiro: what - i was just about to switch back to my editor!

anmonteiro [12:30 AM]
and deal with the Om diffing part by having a monotonically increasing value in your local state that you increment whenever you mutate the JS object

[12:30]
`js->clj` and `clj->js` is heavy on performance

krchia [12:30 AM]
that sounds like an interesting approach, did you consider this approach @peeja

peeja [1:31 AM]
Oh, yeah, that works too.

[1:32]
I tend to stay away from mutation as much as possible until it actually starts hurting :slightly_smiling_face: (edited)

[1:32]
but that's a reasonable way to handle it

krchia [4:52 AM]
i’m a little confused about how IDidUpdate works

[4:53]
my most basic understanding is that it’s called whenever the component state or app state changes

[4:54]
but i’m not sure why it’s called twice when i make a single change with om/set-state
** list namespace vars
http://stackoverflow.com/questions/2747294/how-to-list-the-functions-of-a-namespace
(keys (ns-publics 'server.core))


* om-next

** Boot project with om checkout dependencies
   https://github.com/omcljs/om/wiki/Boot-project-with-om-checkout-dependencies

   If you have a boot project and would like to work with the raw om source code in parallel with your own project, you can do so using boot's checkout and watch tasks.

In your boot project, you must make sure that your checkout task occurs after the watch task, e.g.,

boot repl -s watch checkout -d org.omcljs/om:X.X.X-SNAPSHOT
Here is how you might call it in build.boot.

(comp (watch) (checkout :dependencies [[[['org.omcljs/om "X.X.X-SNAPSHOT"]]]]))
In the om source directory, you can rebuild the jar by using the following command:

boot -d cljsjs/react:0.14.3-0 -d cljsjs/react-dom:0.14.3-1 -d com.cognitect/transit-clj:0.8.285 -d com.cognitect/transit-cljs:0.8.237 -d org.clojure/core.async:0.2.371 -d figwheel-sidecar:0.5.0 -d devcards:0.2.0-8 -r src/main watch pom -p org.omcljs/om -v X.X.X-SNAPSHOT jar install

Make sure to check the leiningen project file for a list of all the current dependencies, as they may be different than what is shown here.

** om-css
   https://github.com/untangled-web/om-css
  anmonteiro has one as well

mitchelkuijpers [1:32 PM]
I made om-css (anmonteiro's) reloading working by doing a bit of a hack hehe:

```     (sift :move {#"^public\/js\/main\.outout\.css$" "public/css/next.css"})

Could use that to get sourcemaps working for sass??
** testing
   http://jakemccrary.com/blog/2015/12/19/clojurescript-treat-warnings-as-errors/
   http://tech.adstage.io/2016/09/12/how-we-test-full-stack-clojure.html
** env keys
   (:query-root :path :pathopt :ast :state :parser :logger :shared :target :query)
** drag/drop and trees
*** trees
    https://github.com/chenglou/react-treeview/blob/master/react-treeview.css
    http://jsfiddle.net/infiniteluke/908earbh/9/
    https://github.com/pqx/react-ui-tree

    https://ynonperek.wordpress.com/2015/12/11/visualising-a-tree-structure-with-react-redux/
    https://github.com/alexcurtis/react-treebeard
    https://github.com/jonmiles/react-bootstrap-treeview
    https://github.com/danielstocks/react-sortable
    https://github.com/jirivrany/react-treeview-recursive
*** drag/drop
    https://bevacqua.github.io/dragula/
    https://github.com/Jannis/om-next-kanban-demo
    https://github.com/griffio/om-next-03

** devcards
   http://rigsomelight.com/devcards/#!/devdemos.defcard_api
** snippets 3-12-15
*** what you need to do is add ﻿⁠⁠⁠⁠:user/name﻿⁠⁠⁠⁠ to  ﻿⁠⁠⁠⁠:keys﻿⁠⁠⁠⁠ in the reconciler's ﻿⁠⁠⁠⁠:merge﻿⁠⁠⁠⁠ function

[3:43]
so that it gets read after the remote result returns

danielstockton   [3:43 PM]
do you have an example of something similar?

anmonteiro       [3:43 PM]
there's something else you can do too

[3:44]
you can use the ﻿⁠⁠⁠⁠:value {:keys ...}﻿⁠⁠⁠⁠ that your remote mutation returns to auto-queue them automatically in an overridden merge function
This way if you add ﻿⁠⁠⁠⁠{:value {:keys [:user/name]}}﻿⁠⁠⁠⁠ to your ﻿⁠⁠⁠⁠'user/login﻿⁠⁠⁠⁠ mutation on the ﻿⁠⁠⁠server﻿⁠⁠⁠, ﻿⁠⁠⁠⁠merge﻿⁠⁠⁠⁠ will know to re-read those because they arrive in the remote result too

I'm afraid I don't have a concrete example to show you, but Compassus does something with ﻿⁠⁠⁠⁠:keys﻿⁠⁠⁠⁠ in merge which maybe can give you some insight into how it works: https://github.com/compassus/compassus/blob/master/src/main/compassus/core.cljc#L295-L298

danielstockton   [3:47 PM]
in my case, every remote read should be re-read once I have a token and adding all the keys from the remote doesn't seem nice

[3:47]
it should re-read the query for the current-route, in the general case

[3:48]
i only have ﻿⁠⁠⁠⁠:user/name﻿⁠⁠⁠⁠ for now but this is the simplest case

anmonteiro       [3:48 PM]
that's something you can also do easily

[3:48]
you have the reconciler and the state in ﻿⁠⁠⁠⁠merge﻿⁠⁠⁠⁠

[3:48]
so you can get the current route, and obtain the query of the component which pertains to that route

danielstockton   [3:49 PM]
and then just update :keys to be that query?

anmonteiro       [3:49 PM]
not quite :slightly_smiling_face:

[3:50]
if the query is all keywords, then yes

[3:50]
if not you need to extract their "dispatch-key"

danielstockton   [3:50 PM]
right, so query->ast and map :dispatch-key

anmonteiro       [3:50 PM]
e.g. ﻿⁠⁠⁠⁠{:some/join [:foo :bar]}﻿⁠⁠⁠⁠ -> ﻿⁠⁠⁠⁠:some/join﻿⁠⁠⁠⁠

[3:51]
﻿⁠⁠⁠⁠(map (comp :dispatch-key om.next.impl.parser/expr->ast) query)﻿⁠⁠⁠⁠

[3:51]
something like this ^
***  the app-state-db is the entire app-state where ﻿⁠⁠⁠⁠db->tree﻿⁠⁠⁠⁠ will look when resolving idents & links

[12:40]
the “some-data” parameter is the subset of data that you want to denormalize

molstt [12:40 PM]
ok, thanks!

anmonteiro [12:40 PM]
(it can be a single ident)

[12:41]
﻿⁠⁠⁠⁠(om/db->tree [:foo/name :foo/other] [:foo/by-id 0] app-state﻿⁠⁠⁠⁠ (edited)

[12:41]
would probably return:
```{:foo/name "Foo", :foo/other "some other value"}
```

[12:42]
given that your app-state contained:
```{:foo/by-id
 {0 {:foo/name "Foo", :foo/other "some other value"}}}
```

alex-glv [12:42 PM]
I think I started grokking readers. It was really tough to comprehend what’s the flow of data like deeper into the query from root to children and bubbling back up. Will write a blog post hope it’ll help some others. The existing docs are good once you start getting it, but definitely for people who are very comfortable with cljs.

anmonteiro [12:43 PM]
:+1:

alex-glv [12:43 PM]
@anmonteiro some good stuff in your posts, @tony.kay also very helpful resources with om-tutorial. Definitely needs to go into “unofficial” docs section somewhere in wiki.

molstt [12:44 PM]
ok, so it is a selector rather than "some-data"... will try it out

[12:45]
but isn't it strange that @state is often supplied as "some-data" ?

anmonteiro [12:46 PM]
@molstt if you pass your root query and want to denormalize the whole state, sure

[12:46]
I never actually do that though

[12:46]
the most common thing is to call ﻿⁠⁠⁠⁠db->tree﻿⁠⁠⁠⁠ like this: ﻿⁠⁠⁠⁠(om/db->tree query (get st k) st)﻿⁠⁠⁠⁠ (edited)

[12:46]
where ﻿⁠⁠⁠⁠k﻿⁠⁠⁠⁠ is the key your parser dispatched on

molstt [12:48 PM]
mhm.. but (get st key) returns data from the database, while [:key 24] and :key are selectors.. isn't it two very different things?

anmonteiro [12:49 PM]
@molstt ﻿⁠⁠⁠⁠(get st key)﻿⁠⁠⁠⁠ could return a selector :slightly_smiling_face:

molstt [12:49 PM]
ah

[12:49]
I see..

[12:49]
it must

[12:49]
I suppose

anmonteiro [12:50 PM]
normally it’ll return an ident or a list of idents, yes
*** Been struggling with remote tempids migration, I created a small repro case here: https://gist.github.com/julienfantin/26cacfda7fc9192a3ed5942534d934ca would love some feedback!

anmonteiro [3:25 PM]
@jfntn FWIW here’s one example you could look at:
https://github.com/awkay/om-tutorial/blob/master/src/cards/om_tutorial/om_specs.cljs#L14
 GitHub
awkay/om-tutorial
om-tutorial - WORK IN PROGRESS


jfntn [3:25 PM]
@anmonteiro thanks I did look at that and the test in fact fails

anmonteiro [3:25 PM]
@jfntn oh and I’ve put a gist together some time ago:
https://gist.github.com/anmonteiro/085d3d0636a3bc14f9f7

anmonteiro [3:34 PM]
@jfntn just confirmed that gist works for me with alpha45
*** I have a send fn that's passing a result like ﻿⁠⁠⁠⁠{'sym {:result {:tempids {#om/id["-1"] 123}}}}﻿⁠⁠⁠⁠ to the callback, but ﻿⁠⁠⁠⁠default-migrate﻿⁠⁠⁠⁠ is getting ﻿⁠⁠⁠⁠{}﻿⁠⁠⁠⁠ as its ﻿⁠⁠⁠⁠tempids﻿⁠⁠⁠⁠argument

[3:24]
What result shape does the reconciler expect for remote tempids substitution? (edited)

anmonteiro [3:27 PM]
@jfntn I think you need to pull ﻿⁠⁠⁠⁠:tempids﻿⁠⁠⁠⁠ out of the result

[3:27]
such that it becomes e.g. ﻿⁠⁠⁠⁠{'sym {:result {} :tempids {#om/id["-1"] 123}}}﻿⁠⁠⁠⁠

jfntn [3:36 PM]
@anmonteiro ok cool, now ﻿⁠⁠⁠⁠default-migrate﻿⁠⁠⁠⁠ is getting ﻿⁠⁠⁠⁠{[:db/id #om/id["-1"]] [:db/id 123]}﻿⁠⁠⁠⁠ but the default-merge gives me something unexpected, replacing the app state with the result...

anmonteiro [3:38 PM]
@jfntn your app state is normalized right?

jfntn [3:57 PM]
@anmonteiro ah indeed my optimistic update was assoc’ing into the denormalized path, I changed it to ﻿⁠⁠⁠⁠{:denorm [:db/id #om/id["-1"]] :db/id {#om/id["-1"] ...denorm-data…}﻿⁠⁠⁠⁠ but I’m still getting nothing but the remote result in the app-state after it's migrated
*** if you configure :pathopt true then your read fns needs to check for :om.next/root
dnolen 01:13:31

this means parsing is starting somewhere other than :root
dnolen 01:13:39

oops
dnolen 01:13:52

I mean check for :query/root
dnolen 01:14:44

by default this is :om.next/root
dnolen 01:15:00

but if you enable :pathopt and the component has an ident
dnolen 01:15:09

:query/root will be that instead
tony.kay 01:16:03

ok, so on entry to the read function, check for :query/root...what do you do if you can't support that root?
dnolen 01:18:04

return nil
*** the structure of mutation return value is:
dnolen 17:28:11

{:value {:keys … :tempids … :result ...} :action (fn [] ..)}

*** [(do/it! …) ‘:please/read]
dnolen 19:37:19

quoting will always refetch it doesn’t matter what you say in read
How does the quoted thing know what the remote AST(s) will be if they aren't returned by read?
dnolen 19:39:34

@jannis you can do this via metadata

@jannis: you can do [(do/it! …) ~(with-meta ‘(quote :please/read) {:remote …}))]
dnolen 19:42:32

and I’m more than happy to add a helper for that
dnolen 19:42:34

something like
dnolen 19:42:46

[(do/it! …) ~(force :please/read :remote)]
Force helper:
https://github.com/omcljs/om/commit/9220e84833b80b15999075ad90f0c9e05d88c53f

    (spy :info (om/transact! this `[(admin/login ~credentials) ~(with-meta (list 'quote :route/dossier-types)
                                                                  {:target :remote})])


*** https://clojurians-log.clojureverse.org/om/2015-11-11.html
*** Hey all, is there any way to view what changes trigger an update on a specific component?
dnolen 16:41:18

@gardnervickers: changes don’t trigger updates
dnolen 16:41:26

reads in a transaction do
dnolen 16:41:53

the main exceptions at the moment is that we schedule the component that requested a transaction for updates
gardnervickers 16:42:00

ahhh
dnolen 16:42:03

set-state! also triggers updates
dnolen 16:42:23

set-params! and set-query! as well, but again this only applies to the component that invoked these things.
dnolen 16:42:54

so basically the only the thing that changes is the thing that requested a change
dnolen 16:43:08

if you want more to change it must be explicitly requested

*** It looks like there's no access to Om's transaction history (except by looking up a transaction by the uuids logged to the the js console).  I saw ITxIntercept but not sure how that would be used.

[9:26]
I had thought of logging the last transaction, and a diff of app-state before and after for debugging purposes.  Is that a bad idea?

[9:29]
The goal is to write clojure.spec for app-state, add a watch to the app-state atom and validate as it changes.  Logging why it changed seemed helpful.

petterik [9:33 PM]
I'm also playing around with transaction history, but for another purpose. To get the most recent history-id: `(last (.-arr (-> reconciler :config :history)))`

alpheus [9:35 PM]
That is all I needed.  Didn't know about -arr

jasonjckn [10:28 PM]
@alpheus i do DIFF on app state, it's a wonderful debugging tool

[10:28]
@alpheus TX history isn't the only way to DIFF app state, here's what I do

[10:29]
@alpheus
```(defonce install-app-state-diff-once
  (add-watch app-state :app-state-diff
             (fn [_ _ old new]
               (let [d (diff new old)
                     d (filter-keys #(not (#{"untangled" "om.next"} (namespace (first %)))) d)]

                 (if-not (empty? d)
                   (js/console.log "APP-STATE DIFF: " d))))))

```

[10:29]
in other words, I use a watch (edited)

alpheus [10:30 PM]
we're doing almost exactly the same thing

jasonjckn [10:30 PM]
what did you use for your diff function?

[10:30]
just curious

alpheus [10:30 PM]
clojure.data/diff

jasonjckn [10:31 PM]
cool

alpheus [10:32 PM]
I misunderstood what the reconciler history was for -- I'd hoped to get the transaction, not the state.  With a watch, I've already got the state.

alpheus [10:38 PM]
In other words, I'd wanted the final tx argument that om.next/transact* prints on the console

jasonjckn [10:40 PM]
i think you need to wrap transact in your own function for that

alpheus [10:42 PM]
yeah

[10:46]
Coming full-circle, implementing ITxIntercept gives you the tx after all.

jasonjckn [10:51 PM]
does ITxIntercept let you intercept all transactions?

[10:52]
what if you transact on the reconciler

anmonteiro [10:52 PM]
@jasonjckn not txns against the reconciler

jasonjckn [10:52 PM]
k

[10:52]
would be nice to support a way to intercept all transactions I think that would be useful

[10:53]
although I don't have a specific use case in mind atm

alpheus [10:53 PM]
what should tx-intercept return?

jasonjckn [10:53 PM]
the transactions

[10:53]
[(...) (...)]

alpheus [10:53 PM]
but in the loop, the return value of tx-intercept is assigned to parent

[10:54]
(the loop inside om.next/transact!)

[10:54]
uh, maybe I'm mis-reading that

jasonjckn [10:55 PM]
*nods*

alpheus [10:55 PM]
oh, ignore me
*** I'm also playing around with transaction history, but for another purpose. To get the most recent history-id: `(last (.-arr (-> reconciler :config :history)))`
*** https://github.com/compassus/omify
 GitHub
compassus/omify
omify - om.next-ify plain React components.


[1:20]
haven’t had the time to write docs, but you can get the big picture from the devcards examples:
https://github.com/compassus/omify/blob/master/src/devcards/omify/devcards/core.cljs (edited)

[1:20]
(I also included one using Recharts)

ethannavis [2:16 AM]
awesome, looks pretty straightforward. thanks @anmonteiro

[2:16]
is the only difference between `omify!` and `omify` that the first defs a new symbol while the other doesn’t? (edited)

anmonteiro [2:17 AM]
@ethannavis: no that's not what it does

[2:18]
`omify!` and `omify` are akin to ClojureScript's `specify!` and `specify`, respectively

[2:18]
So `omify!` mutates its argument, while `omify` returns a copy, preserving the original JS component

[2:19]
You don't need to `def` anything for `omify!`

[2:20]
You can `(omify! js/Recharts.LineChart ...)` for example

[2:20]
This modifies the original component (in the library)

ethannavis [2:20 AM]
ah, ok got it

[2:21]
literally has to do with mutability

anmonteiro [2:21 AM]
Yep

ethannavis [2:21 AM]
reading up on reify & specify now

anmonteiro [2:21 AM]
There might be cases where you don't want to mutate the original object

[2:22]
Because some other place in your app uses it or something. That's what `omify` os for

[2:23]
@ethannavis: also note you must use `omify.core/factory` for those components

[2:24]
Also 1 cool thing about `omify`(!) is that you can override `Object` methods too :-)

ethannavis [2:25 AM]
interesting, i’ll have to diff the two factory methods to see the magic

[2:25]
and yeah I saw that! very cool

anmonteiro [2:25 AM]
Shouldn't be the common case, but still
*** also @jasonjckn can’t use `om/factory` on non-om components

[8:49]
which makes me wonder if rendering a non-om component from a non-om factory would cause issues (indexer, reconciler, etc.) (edited)

jasonjckn [8:50 PM]
well you could use  (om/ui ... )  to wrap it

[8:51]
(defn react-to-om [react query ident] (om/ui IQuery (query [_] query) Ident (ident [_] ident) Object (render [] react )

ethannavis [8:52 PM]
hadn’t seen that function before

[8:52]
interesting

[8:52]
@anmonteiro: thoughts? ^^^

jasonjckn [8:52 PM]
i this hack so that I don't have to create factories

[8:53]
 ```(defmacro ui [q & forms]
  {:pre [(or (map? q) (vector? q) (list? q))]}

  `(let [factory-fn# (atom nil)

         new-ui# (om.next/ui
                     ~'static cljs.core/IDeref
                     (~'-deref [this#]
                      @factory-fn#)

                     ~'static om.next/IQuery
                     (~'query [this#]
                      ~q)

                     ~@forms)]

     (reset! factory-fn#
             (om.next/factory new-ui# {:keyfn admin.util/uid-gen}))

     new-ui#))
```

[8:53]
(def MyNewComp (ui ...) )

[8:53]
`MyNewComp` is the om/react class, then `@MyNewComp` to get the factory

ethannavis [9:46 PM]
interesting, I like that


----- August 20th -----
anmonteiro [12:15 AM]
@ethannavis I suppose that would work for the simplest case

[12:16]
However I fail to see a solution for e.g. children
*** why is it that after mutations the parser gets om.next/full-query?

ag [4:50 AM]
how can I temporarily disable log messages like `[om.next] transacted`

[4:50]
?

ag [4:57 AM]
nvmd… picked into the source. apparently setting `goog.log.ENABLED = false` does that

anmonteiro [11:53 AM]
@ag: easier to pass `:logger nil` to the reconciler

[11:53]
For production builds set closure-defines goog.DEBUG false

new messages
anmonteiro [12:46 PM]
@solussd: I still don’t understand the problem you’re having, it seems that everything should work

[12:47]
happy to look at a minimal case

[12:48]
mutations get passed the full query because of incremental rendering

[12:49]
if a component down the tree performs a transaction, Om Next doesn’t re-render from root. Instead, it only re-renders the subtree rooted at the component that called `transact!`

[12:49]
this is why `full-query` is needed

[12:49]
so that the component that `transact!`s gets the query focused at its subtree

solussd [4:42 PM]
@anmonteiro: Ok, that makes sense and explains some behavior I’m seeing.

[4:46]
At least some of my issues were caused by transacting against the reconciler directly instead of the root component for route updates.

anmonteiro [4:48 PM]
@solussd: transacting against the reconciler is just fine but it also provides a finer-grained level of control

[4:48]
which means you need to deal with the consequences of that

solussd [4:49 PM]
what is an example of a consequence?

anmonteiro [4:49 PM]
one of those being that you need to queue your ~root~ desired query for re-read because Om won’t queue any components by default when transacting against the reconciler (edited)

[4:49]
(since no components have performed the transaction)

solussd [4:50 PM]
I’m familiar with providing keys to reread in a transact! call, is queuing a query different?

anmonteiro [4:53 PM]
@solussd same thing, just provide a query instead of a key

[4:53]
which leads us to another limitation of transacting against the reconciler

[4:53]
Om won’t `transform-reads` by default when you `transact!` against the reconciler

[4:53]
meaning that the keys you provide to re-read don’t get expanded into the query they reference

[4:53]
so you must provide the exact query you want to be re-read

[4:54]
here’s an example:
https://github.com/compassus/compassus/blob/master/src/main/compassus/core.cljc#L100

***   Trying to understand how to work with remotes. As I understood my send functions has to call cb arguments with new data. And this cb then forwards this data to my merge function? Is it so?
artemyarulin 14:33:29
Sorry for the dumb questions :simple_smile:
danielstockton 14:35:19
@artemyarulin: Pretty much. merge goes on to call merge-tree, merge-idents and migrate
danielstockton 14:35:33
merge-tree adds the new data to your app state and migrate updates tempids
danielstockton 14:36:02
you probably don't have to provide a custom implementation for merge, just :merge-tree and maybe :migrate
artemyarulin 14:37:03
Hm, :merge and :merge-tree are different?
artemyarulin 14:37:49
I guess I need :merge-tree in order to merge the new data into the right place in state

@artemyarulin: implementing :merge means you want to take complete control over how merging happens
dnolen 14:45:06
it exists for custom storage users i.e. DataScript or something else
dnolen 14:45:28
if all you want to do is control how the data gets merged using the default db, :merge-tree is enough
artemyarulin 14:46:17
oh, cool, thanks. When do I need to use :merge-idents?
dnolen 14:47:58
only if you think you need more control over that
dnolen 14:48:18
in general you don’t need to do any of this if you’re using the default db
dnolen 14:48:43
:merge-tree is probably the only one people will normally supply themselves
artemyarulin 14:48:55
Cool, it’s clear for me. Thank you!

 (defn custom-merge-tree [a b] (if (map? a) (merge-with into a b) b)) It'll merge keys without overwriting,

 (defn merge-tree [db data] (doseq [[k v] data] (merge-data db k v)) @db/conn)

 (defn merge-ident
  [_ state ident response]
  (let [data (get-in response [:body :data])]
    (if (or (not= 200 (:status response)) (nil? data) (empty? data))
      (.warn js/console (str "Unable to merge-ident for ident: " ident ". Response is: " response))
      (db/transact! [data]))))

:merge-tree (fn [_ data]
            (prn data)
            (doseq [t (vals (into {} (filter #(keyword? (first %)) data)))]
                (d/transact! conn t))
            @conn)


** how to
*** record screen
simplescreenrecorder
***  use react refs
https://medium.com/@roman01la/om-next-for-react-devs-application-state-53af3ec7c42a#.6bgkqbwmg
*** throw catch exceptions
    https://stackoverflow.com/questions/3835331/custom-exceptions-in-clojure
(try (
    (throw (ex-info "ex-info msg string" {:type :python-exception :bla :eels}))
    )
    (catch clojure.lang.ExceptionInfo e
    (let [msg (.getMessage e)
            data (ex-data e)]
        (info "Msg:" msg)
        (info "Data:" data))
    ))

*** disable logging
how can I temporarily disable log messages like `[om.next] transacted`
nvmd… picked into the source. apparently setting `goog.log.ENABLED = false` does that
@ag: easier to pass `:logger nil` to the reconciler
For production builds set closure-defines goog.DEBUG false
*** server side rendering  0
    https://crossclj.info/ns/com.ladderlife/cellophane/0.3.4/project.clj.html
*** remotes
    For each remote that you list in the reconciler (default is just :remote), the parser will run with :target set in the env to that remote.
   Http-caching
You declare remotes:
#+BEGIN_SRC clojure
(def reconciler
  (om/reconciler
    {:state   {:search/results []}
     :parser  (om/parser {:read read})
     :remotes [:remote :search]}))
#+END_SRC
You add remote to read:
#+BEGIN_SRC clojure
(defmethod read :dashboard/items
[{:keys [state ast]} k _]
(let [st @state]
{   :value   (into [] (map #(get-in st %)) (get st k))
    :dynamic (update-in ast [:query]
            #(->> (for [[k _] %]
                    [k [:favorites]])
                (into {})))
    :static  (update-in ast [:query]
            #(->> (for [[k v] %]
                    [k (into [] (remove #{:favorites}) v)])
                (into {})))}))
#+END_SRC
Return (modified) ast from remote keys

Supply send fn to reconciler
#+BEGIN_SRC clojure
(def reconciler
  (om/reconciler
    {:state   {:search/results []}
     :parser  (om/parser {:read read})
     :send    (send-to-chan send-chan)
     :remotes [:remote :search]}))
#+END_SRC
Send fn gets 2 args, 1st a map of remotes to ast of read fn result, 2nd a callback

Send function needs to do the remote call, then call callback with new/updated data.

This callback simply takes novelty and merges it back into the application state.



*** get-query
    (om/get-query (om/class->any reconciler AnimalsList))
   but also just (om/get-query AnimalsList) ??
*** set-query!
    (om/set-query! (om/class->any reconciler AnimalsList)
    {:params {:start 0 :end 5}})
*** time travel
    (reset! app-state
      (om/from-history reconciler #uuid "e0a07c41-413a-430c-8c91-976a155241c3"))
    Just query:
    (om/from-history reconciler #uuid "9e7160a0-89cc-4482-aba1-7b894a1c54b4")
*** transact at the repl
     (om.next/transact! reconciler '[(increment)])
     Or:
     (def my-parser (om/parser {:read read :mutate mutate}))
     (my-parser {:state my-state} '[(increment)])
     @my-state
     ;; => {:count 1} ;;mutated
     Or:
     (def my-state (atom {:count 0}))
     (my-parser {:state my-state} [:count :title])
     ;; => {:count 0, :title :not-found}
*** om/tree->db
     (def norm-data (om/tree->db RootView init-data true))
*** om/db->tree
;; (om/db->tree query data app-data)
;; denormalize
;; data, using
;; app-data to resolve
;; idents, then apply
;; query



 (defmethod read :items
  [{:keys [query state]} k _]
  (let [st @state]
    {:value (om/db->tree query (get st k) st)}))

    You can write really simple apps with db->tree, and when you reach a point in the query that the remainder can leverage that tool to great effect. But you have to understand how to work with the parsing system to do anything non-trivial.

** good to know
*** from clojurians
 and pass the query as the second argument to the callback in your send function
 (for dealing with unions perhaps)

 you can also add a 3rd argument to `set-query!`
a vector specifying the keys to re-read
e.g. `(om/set-query! this {:query [:foo]} [:bar])` <- re-reads `:bar`
*** signatures
**** read and mutate: [env key params]
     So, the read function you write:

     Will receive three arguments:
     An environment containing:
     :parser:   The query parser
     :state:    The application state (atom)
     :query:    if the query had one E.g. {:people [:user/name]} has :query [:user/name]
     A key whose form may vary based on the grammar form used (e.g. :user/name).
     Parameters (which are nil if not supplied in the query)
     Must return a value that has the shape implied by the grammar element being read.

     The signature of a read function is:

     (read [env dispatch-key params])

     where the env contains the state of your application, a reference to your parser (so you can call it recursively, if you wish), a query root marker, an AST node describing the exact details of the element's meaning, a path, and anything else you want to put in there if you call the parser recursively.

     The parse will create the output map.
     (keys env) in mutation=>
     (:query-root :path :pathopt :reconciler :ast :state :component :parser :logger :shared :target)
     (keys env) in read =>
     (:query-root :path :pathopt :ast :state :parser :logger :shared :target :query)
**** indent [this props]
**** params [this]
**** query [this]
**** render [this]
    props: (om/props this)
*** disable transaction logging in console

in `om.next` how can one disable printing transaction logs? At least temporarily. I have a huge logs that when printed slow down my app.

@denik i didn't try it out, but i think you can use the logger option for the reconciler to pass in something else, e.g. a logger which doesn't log at all. https://github.com/omcljs/om/blob/master/src/main/om/next.cljs#L1647(edited)

@denik: simply pass `:logger nil` to the reconciler

** example apps
https://github.com/anmonteiro/om-next-fullstack
https://github.com/swannodette/om-next-demo
https://github.com/griffio?tab=repositories
https://github.com/griffio/om-next-01
https://github.com/griffio/om-next-02
https://github.com/griffio/om-next-03
https://github.com/griffio/om-next-04
https://github.com/griffio/om-next-05

https://github.com/danielstockton/om-next-frontend

https://github.com/jdubie/om-next-router-example

https://github.com/jdubie/om-next-starter

https://github.com/madvas/cljs-react-material-ui-example
https://github.com/madvas/todomvc-omnext-datomic-datascript

https://github.com/codebeige/om-next-dataflow
https://github.com/advancedtelematic/parking-visualization
https://github.com/Jannis/om-next-kanban-demo
https://github.com/omcljs/om/blob/master/src/devcards/om/devcards/tutorials.cljs
https://libraries.io/github/jordillonch/om-next-datagrid-example
https://github.com/colinf/om-chat-base
https://github.com/artemyarulin/om-next-cross-platform-template
https://github.com/anmonteiro/aemette
https://github.com/akmiller78/tut-omnext-tempids
https://github.com/olivergeorge/stripboard

** routing
A routing library for Om Next
https://github.com/anmonteiro/compassus

** learn
*** videos etc
**** The Front End Architecture Revolution • David Nolen
https://www.youtube.com/watch?v=nDNU2pmuJA8
http://www.ustream.tv/recorded/61483785
**** Om Next - David Nolen
https://www.youtube.com/watch?v=ByNs9TG30E8
**** Om Next - David Nolen
https://www.youtube.com/watch?v=MDZpSIngwm4
**** David Nolen: Hello Om Next! (October 27, 2015)
https://www.youtube.com/watch?v=xz389Ek2eS8
**** Clients in Control by dnolan
http://www.datomic.com/videos.html
**** ClojureNYC 9-29-15 by dnolan
http://livestream.com/intentmedia/events/4386134
**** Fast full stack testing in om.next - Jack Dubie
https://www.youtube.com/watch?v=M1Tl-YLqkQc
**** Om (next) Overview Data Flow and Interactions  (Tony Kay)
https://www.youtube.com/watch?v=IlNrmKYA7Ig
**** Om Next and DataScript Localisation Demo
https://www.youtube.com/watch?v=-E2Z9bca4-w
**** António Monteiro - Clients in control:
http://beta.craft-conf.com/
**** Podcasts:
http://blog.cognitect.com/cognicast/093
https://www.functionalgeekery.com/episode-40-david-nolen/

*** tutorials/docs
**** om/next wiki
https://github.com/omcljs/om/wiki/Documentation-%28om.next%29
https://github.com/omcljs/om/wiki/Quick-Start-%28om.next%29
https://github.com/omcljs/om/wiki/Components,-Identity-&-Normalization
https://github.com/omcljs/om/wiki/Queries-With-Unions
https://github.com/omcljs/om/wiki/DataScript-Integration-Tutorial
https://github.com/omcljs/om/wiki/Remote-Synchronization-Tutorial
https://github.com/omcljs/om/wiki/Applying-Property-Based-Testing-to-User-Interfaces
https://github.com/omcljs/om/wiki/Transitioning-the-Indexer-from-the-static-tree-to-the-runtime-tree
https://github.com/omcljs/om/wiki/Thinking-With-Links%21
https://github.com/omcljs/om/wiki/Om-Next-FAQ
***** empty still
https://github.com/omcljs/om/wiki/Temporary-Identity
^^ (empty)
https://github.com/omcljs/om/wiki/Recursive-Queries
^^ (empty)
https://github.com/omcljs/om/wiki/Path-Optimization
^^ (empty)

**** awkay
https://github.com/awkay/om/wiki/Om-Next-Overview
https://github.com/awkay/om-tutorial

**** for javascript devs
https://medium.com/@roman01la/om-next-for-react-devs-application-state-53af3ec7c42a#.6bgkqbwmg
https://medium.com/@roman01la/om-next-for-react-devs-components-and-elements-2df95435d804#.ooifqs6g1
https://medium.com/@roman01la/om-next-for-react-devs-introduction-and-project-setup-52b88f87264#.tipu02hqy

**** reconciler
https://medium.com/@kovasb/om-next-the-reconciler-af26f02a6fb4#.ffpdb87vs

**** omnext end to end
http://marianoguerra.org/posts/omnext-end-to-end-part-i-backend.html
http://marianoguerra.org/posts/omnext-end-to-end-part-ii-frontend.html

**** anmonteiro
 https://anmonteiro.com/2016/01/om-next-query-syntax/
 https://anmonteiro.com/2016/01/exploration-patterns-om-next-part-1/
 https://anmonteiro.com/2016/01/exploration-patterns-om-next-part-2/
 https://anmonteiro.com/2016/01/writing-om-next-reloadable-code-a-checklist/
 https://anmonteiro.com/2016/02/om-next-meets-devcards-the-full-reloadable-experience/
 https://anmonteiro.com/2016/02/routing-in-om-next-a-catalog-of-approaches/
 https://anmonteiro.com/2016/05/clients-in-control-om-next-craft-conf-2016/
 https://anmonteiro.com/2016/06/the-quest-for-a-unified-routing-solution-in-om-next/

**** more blog posts
     https://medium.com/@softwarecf/om-next-normalisation-7db6f2a8f89f#.wgmscdabc
     https://medium.com/@softwarecf/om-data-access-43ee0b45976c#.l65gao26l
 https://circleci.com/blog/why-we-use-om-and-why-were-excited-for-om-next/

 How to build a remote:
 https://juxt.pro/blog/posts/course-notes-2.html
 https://dvcrn.github.io/clojurescript/react/2015/10/27/going-native-with-om-next.html
 https://anmonteiro.com/
 https://anmonteiro.com/2015/12/om-next-study-material/

*** slides
https://speakerdeck.com/anmonteiro


* tech
** react table
https://github.com/tannerlinsley/react-table/tree/v6
** tabulator
The easy to use, fully featured, interactive table JavaScript library
http://tabulator.info/
** transducers
   https://labs.uswitch.com/transducers-from-the-ground-up-the-essence/amp/
   https://dzone.com/articles/reducers-transducers-and-coreasync-in-clojure
** debug
   http://bpiel.github.io/sayid/#installation
** deploy clojure web server with runit
http://kchard.github.io/runit-quickstart/
https://github.com/danielsz/boot-runit
boot-shell

** configuration
   https://github.com/juxt/aero
** conditions error handling clojure
   https://github.com/clojureman/special
   http://bytopia.org/2016/11/13/perseverance-flexible-retries-clojure/
** mockup
 https://news.ycombinator.com/item?id=12889053
** https://github.com/quil/quil/wiki/ClojureScript
   https://github.com/georepl/georepl
** error logging
honey badger
** cross-browser testing
saucelabs

** graphql
   https://github.com/tendant/graphql-clj
** realtime syncing
   Datalog all the way down - Christopher Small
   https://github.com/metasoarous/datsys
   https://www.youtube.com/watch?v=aI0zVzzoK_E
   https://github.com/jocrau/catalysis
 https://writings.quilt.org/2014/05/12/distributed-systems-and-the-end-of-the-api/
***  crdt
swarm.js, quilt project, replikativ
 https://github.com/replikativ/replikativ
**  nightcode, clojure ide
https://sekao.net/nightcode/
https://sekao.net/nightlight/
**  https://github.com/web-perf/react-worker-dom
** http://clojurewerkz.org/
A growing collection of open source Clojure libraries. We value solid documentation, ease of use, the "batteries included" philosophy, contributor-friendly development process:
** http://www.clojure-toolbox.com/
The Clojure Toolbox
A categorised directory of libraries and tools for Clojure

** regexp alternative
https://www.sitepoint.com/alternative-to-regular-expressions/?utm_source=nodeweekly&utm_medium=email
** string manipulation
   https://funcool.github.io/cuerdas/latest/#strip-newlines
** device
   Device.js makes it easy to write conditional CSS _and/or_ JavaScript based on device operating system (iOS, Android, Blackberry, Windows, Firefox OS, MeeGo, AppleTV, etc), orientation (Portrait vs. Landscape), and type (Tablet vs. Mobile).
   https://clojars.org/cljsjs/device
   https://github.com/matthewhudson/device.js
** minifier
  https://github.com/yogthos/asset-minifier/blob/master/README.md
** authentication
https://github.com/remvee/ring-basic-authentication

Quite thorough and stable:
https://github.com/cemerick/friend
An extensible authentication and authorization library for Clojure Ring web applications and services.

https://github.com/funcool/buddy
Security library for Clojure
** historian
UNDOs for your clojurescript projects.
https://github.com/reagent-project/historian
** react
https://github.com/enaqx/awesome-react
A collection of awesome things regarding React ecosystem.
** on mobile (react-native etc)
Clojurescript repl in ios:
https://github.com/omcljs/ambly
** types
*** https://github.com/clojure/core.typed
*** https://github.com/Prismatic/schema

One of the difficulties with bringing Clojure into a team is the overhead of understanding the kind of data (e.g., list of strings, nested map from long to string to double) that a function expects and returns. While a full-blown type system is one solution to this problem, we present a lighter weight solution: schemas. (For more details on why we built Schema, check out this post on the Prismatic blog.)

*** http://blog.getprismatic.com/schema-for-clojurescript-data-shape-declaration-and-validation/

** components?
https://github.com/stuartsierra/component
https://github.com/palletops/leaven
https://github.com/danielsz/system

** http-kit
** time and dates
A date and time library for ClojureScript, imitating the API of the clj-time library.
https://github.com/andrewmcveigh/cljs-time
** sente
** drag drop
   https://github.com/STRML/react-grid-layout
   http://gridster.net/#demos
   https://github.com/bevacqua/react-dragula
   http://codepen.io/mgmarlow/pen/YwJGRe  (react dragula example)
   https://dragula.slack.com/

** configuration
https://github.com/levand/immuconf
** css
*** inline styles
https://github.com/roman01la/cljss
https://github.com/roosta/herb
ClojureScript styling library using functions
*** reference
    http://cssreference.io/
    http://tympanus.net/codrops/css_reference/
    https://css-tricks.com/almanac/

*** responsive in js with cljsjs libs
    https://github.com/ajlkn/skel
    http://wicky.nillia.ms/enquire.js/
    http://responsive-nav.com/
    https://github.com/STRML/react-grid-layout/
*** clj garden grid
   http://jeet.gs/
*** blaze
    http://blazecss.com/
*** material design lite
http://www.getmdl.io/components/index.html#menus-section

*** semantic-ui
http://www.builtwithsemanticui.com/archive
http://ehkoo.github.io/semantic-ui-examples/jumbotron/
http://www.builtwithsemanticui.com/
http://scripteden.com/download/apex-one-page-template/
https://creativemarket.com/graio/115177-Band-Semantic-UI-HTML-Template
http://www.semantickit.com/semantic-ui-themes
*** garden
https://github.com/noprompt/garden
https://www.youtube.com/watch?v=-jnJGNDoSXc
*** mesh (bootstrap css framework using garden)

https://github.com/facjure/mesh
https://www.youtube.com/watch?v=-jnJGNDoSXc
*** flexbox
http://flexboxin5.com/ | flexbox in 5 minutes
http://nl.learnlayout.com/flexbox.html | CSS - flexbox
https://css-tricks.com/snippets/css/a-guide-to-flexbox/ | A Complete Guide to Flexbox | CSS-Tricks
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes | Using CSS flexible boxes - CSS | MDN
*** lein-sassy
https://github.com/vladh/lein-sassy
*** frameworks
 https://github.com/cljsjs/packages | GitHub - cljsjs/packages: Javascript libraries packaged up with Google Closure externs
**** mui
     https://clojars.org/cljsjs/mui | mui 0.1.21-0 - Clojars
https://github.com/cljsjs/packages/tree/master/mui | packages/mui at master · cljsjs/packages · GitHub
https://github.com/muicss/mui | GitHub - muicss/mui: Lightweight CSS framework
https://www.muicss.com/docs/v1/css-js/forms | MUI - Material Design Forms
**** react bootstrap
https://clojars.org/cljsjs/react-bootstrap | react-bootstrap 0.29.5-0 - Clojars
https://github.com/cljsjs/packages/tree/master/react-bootstrap | packages/react-bootstrap at master · cljsjs/packages · GitHub
https://github.com/react-bootstrap/react-bootstrap | GitHub - react-bootstrap/react-bootstrap: Bootstrap 3 components built with React
https://react-bootstrap.github.io/index.html | React-Bootstrap
**** material ui
https://clojars.org/cljsjs/material-ui | material-ui 0.15.1-1 - Clojars
https://github.com/cljsjs/packages/tree/master/material-ui | packages/material-ui at master · cljsjs/packages · GitHub
http://www.material-ui.com/#/ | Material-UI
https://github.com/callemall/material-ui | GitHub - callemall/material-ui: React Components that Implement Google's Material Design.
**** mdl
https://clojars.org/cljsjs/material | material 1.1.3-1 - Clojars
https://github.com/cljsjs/packages/tree/master/material | packages/material at master · cljsjs/packages · GitHub
https://github.com/google/material-design-lite | GitHub - google/material-design-lite: Material Design Components in HTML/CSS/JS
https://getmdl.io/ | Material Design Lite
**** radium, om/next inline css
https://github.com/FormidableLabs/radium | GitHub - FormidableLabs/radium: A toolchain for React component styling.
https://github.com/ladderlife/om-css | GitHub - ladderlife/om-css: Colocated CSS in Om Next components
** json-html
Provide JSON and get a DOM node with a human representation of that JSON.
https://github.com/yogthos/json-html
** deploy
https://vexxhost.com/resources/tutorials/how-to-deploy-a-clojure-web-application-on-ubuntu-14-04/

** spectre
** clojure/spec
** clojure/testcheck
** datascript
https://github.com/tonsky/datascript
** Server
*** Ring
https://github.com/ring-clojure/ring
https://github.com/ring-clojure/ring/blob/master/ring-devel/src/ring/middleware/reload.clj

Mock requests:
https://github.com/ring-clojure/ring-mock

Writing reloadable code
http://anmonteiro.com/2016/01/writing-om-next-reloadable-code-a-checklist/?utm_source=Clojure+Gazette&utm_medium=email&utm_campaign=157
**** http-kit async event driven ring server
N.B. Currently, Ring’s standard Jetty adapter ~does not~ support Websockets. http-kit is a Ring-compatible alternative.
http://www.http-kit.org/client.html
**** immutant
http://immutant.org/
- you may also be interested in the head start provided by http://www.luminusweb.net/ for client/server
-> uses luminant server. Maybe check for middleware used etc.

*** Rest api
**** Liberator
http://clojure-liberator.github.io/liberator/
https://scott.mn/2014/01/26/first_thoughts_on_liberator_clojure/
http://yogthos.net/posts/2012-09-09-Making-services-with-Liberator.html
**** Pedestal
https://github.com/pedestal
**** octohipster
https://github.com/myfreeweb/octohipster
uses liberator
** I18n support:
   https://github.com/ptaoussanis/tempura
   https://github.com/ptaoussanis/tower
** A/B testing
https://github.com/ptaoussanis/touchstone
** mysql
*** realtime, syncing, changes listener
 https://www.npmjs.com/package/mysql-events
** Datomic

   http://vvvvalvalval.github.io/posts/2016-07-24-datomic-web-app-a-practical-guide.html
http://www.jayway.com/2012/06/27/finding-out-who-changed-what-with-datomic/
http://www.flyingmachinestudios.com/programming/datomic-for-five-year-olds/
- http://www.datomic.com/training.html

*** realtime, syncing, changes listener
    http://blog.datomic.com/2013/10/the-transaction-report-queue.html
    https://github.com/Datomic/datomic-java-examples/blob/08f0baf2ac1846a425e746504532632b7dc6c707/src/java/datomic/samples/TxReportWatcher.java
    https://groups.google.com/forum/#!msg/datomic/owIf0qn7uFo/E1wuGW__pKUJ
    https://github.com/metasoarous/datsync
*** service script
Put it in etc/init.d
To start a daemon at startup- update-rc.d service_name defaults
To remove- update-rc.d -f service_name remove

defaults = > default run levels 2,3,4 and 5

Example -

update-rc.d tomcat7 defaults
#!/bin/sh
### BEGIN INIT INFO
# Provides:          datomic
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     false
# Short-Description: Starts datomic
# Description:       Start/stop datomic
### END INIT INFO


DAEMON=/home/michieljoris/opt/datomic/bin/transactor
DAEMON_ARGS=/home/michieljoris/opt/datomic/config/dev-transactor-template.properties
DESC="datomic script"
NAME=datomic

RUNDIR=/home/michieljoris/opt/datomic/pid
PIDFILE=$RUNDIR/datomic.pid

#DAEMON=

do_start()
{

    echo -n "Starting $DESC: "
    mkdir -p $RUNDIR
    # touch $PIDFILE
    # chown michieljoris:michieljoris $RUNDIR $PIDFILE
    # chmod 755 $RUNDIR

   if start-stop-daemon --start -m --quiet --background --umask 007 --pidfile $PIDFILE --chuid michieljoris:michieljoris --exec $DAEMON -- $DAEMON_ARGS
   then
       echo "$NAME."
   else
       echo "failed"
   fi
}

do_stop()
{
    echo -n "Stopping $DESC: "
    if start-stop-daemon --stop --retry forever/TERM/1 --verbose --oknodo --pidfile $PIDFILE
    then
        echo "$NAME."
    else
        echo "failed"
    fi
    rm -f $PIDFILE
    sleep 1
}


case "$1" in
   start)
     do_start
     ;;
   stop)
     do_stop
     ;;

  restart|force-reload)
        ${0} stop
        ${0} start
        ;;

  status)
        echo -n "$DESC is "
        if start-stop-daemon --status --verbose --signal 0  --pidfile ${PIDFILE}
        then
                echo "running"
        else
                echo "not running"
                exit 1
        fi
        ;;

  *)
        echo "Usage: /etc/init.d/$NAME {start|stop|restart|status}" >&2
        exit 1
        ;;
esac

exit 0

** Routing
https://github.com/juxt/bidi
https://github.com/parenthesis/silk

https://github.com/weavejester/compojure
https://github.com/gf3/secretary#example-with-googhistory

** ajax clients
- Built-in http-kit ajax client
- https://github.com/dakrone/clj-http
- http://www.http-kit.org/client.html
- https://github.com/r0man/cljs-http
 cljs-http returns core.async channels, so you need to import the go macro and the <! function.
- https://github.com/JulianBirch/cljs-ajax
 simple Ajax client for ClojureScript and Clojure

** websockets
- http://yogthos.net/posts/2015-06-11-Websockets.html
By hand
- https://github.com/ptaoussanis/sente
ajax fallback, multiple clients
- https://github.com/james-henderson/chord
websockets only, point to point
sente-chord comparision
https://groups.google.com/forum/#!topic/clojure/5J4L8pbGwGU
- https://github.com/kirasystems/clj-browserchannel
socket over http
** over the wire formats
https://github.com/cognitect/transit-cljs

** React wrappers
*** om
https://github.com/omcljs/om/wiki/Basic-Tutorial
*** reagent
https://github.com/reagent-project/reagent
https://www.youtube.com/channel/UC1UP5LiNNNf0a45dA9eDA0Q
*** quiescent
https://github.com/levand/quiescent/blob/release/docs.md
*** brutha
https://github.com/weavejester/brutha
*** rum
https://github.com/tonsky/rum

** templating, html
https://github.com/r0man/sablono

** tables
https://github.com/glittershark/reactable
** file system
fs - File system utilities for Clojure
https://github.com/Raynes/fs
** performance monitoring
   http://riemann.io/ Riemann aggregates events from your servers and
   applications with a powerful stream processing language. Send an email for
   every exception in your app. Track the latency distribution of your web app.
   See the top processes on any host, by memory and CPU. Combine statistics from
   every Riak node in your cluster and forward to Graphite. Track user activity
   from second to second.

Riemann provides low-latency, transient shared state for systems with many
moving parts.
** data structure transformation
https://github.com/disalvjn/faconne
and specter of course.
** tech buzz
components, core/async, ring, specter, figwheel, om/next, schema, clojure/spec,
timbre (logging), clojure/test, superagent?, clojure/testcheck, datascript, liberator
bidi (routing)
sente (websockets)
flexbox, semantic-ui, garden
cider, lispy, devcards


* develop
** indentation
   n clojure-mode is there a way for me to set one specific form to have an indentation where the args are vertically aligned? I want the arguments to be aligned just for `and` and `or`.

jfntn [9:02 PM]
@adamfrey you can probably do that with `define-clojure-indent`

adamfrey [9:03 PM]
that’s what I want but I only see examples `define-clojure-indent` taking an int number of spaces to ident

[9:03]
is there an option like `:align` or something?

jfntn [9:04 PM]
I don’t understand what you want, have an example?

richiardiandrea [9:13 PM]
@adamfrey there is `clojure-align` in `clojure-mode`

adamfrey [9:15 PM]
@richiardiandrea what is `clojure-align`?

richiardiandrea [9:15 PM]
(if I understood your request correctly) it aligns forms vertically (edited)

adamfrey [9:16 PM]
yes, but I don’t want to align all forms vertically by default. I want all my function parameters to indent two spaces by default (which I already have set up and working). I only want to override that setting for two forms: `and` and `or`

[9:17]
I feel like I should be able to do that with `define-clojure-indent`, but I can’t find an example of overriding just one form to make the params align.

richiardiandrea [9:18 PM]
oh so I think definitely ``define-clojure-indent` should help

[9:18]
I found a link: http://jbm.io/2013/11/custom-indentation-in-clojure-mode/
jbm.io
Custom indentation in clojure-mode - jbm.io
In Clojure, as in other Lisps, forms have extremely regular syntax, but different types of forms are traditionally indented differently. (Consider …

adamfrey [9:23 PM]
@richiardiandrea thanks for the link! it made me realize that I misunderstood what the integer in `define-clojure-indent` meant. I thought it was the number of spaces to indent, but actually it is the amount of parameters to treat as “special”. So to get what I want I added this:
```(define-clojure-indent
  (or 0)
  (and 0))```

richiardiandrea [9:24 PM]
glad it helped!
** emacs repl for clj cljs
   you need to run ﻿⁠⁠⁠⁠(start-repl)﻿⁠⁠⁠⁠ with boot for example

[9:48]
then it will detect that it is a clojure repl

[9:50]
or you could set a setting in cider and use ﻿⁠⁠⁠⁠cider-create-sibling-cljs-repl﻿⁠⁠⁠⁠ when you are connected to nrepl that way you’ll always have two repls one for clojure and one for clojurescript

borkdude [9:53 PM]
@mitchelkuijpers cool, thanks!

[9:57]
﻿⁠⁠⁠⁠cider-create-sibling-cljs-repl﻿⁠⁠⁠⁠ seemed to work… amazing :slightly_smiling_face:

mitchelkuijpers [10:01 PM]
Cool, I love that command makes starting everything way easier

borkdude [10:05 PM]
I don’t know why it started a Rhino repl though :slightly_smiling_face:

[10:05]
but for navigation it works

dpsutton [10:06 PM]
Rhino repl is the default. When cider launches a clojure script repl, if it doesn't know which one it defaults to rhino

borkdude [10:08 PM]
so I guess boot’s ﻿⁠⁠⁠⁠(start-repl)﻿⁠⁠⁠⁠ is preferable if you also want to interact with the browser (edited)

dpsutton [10:11 PM]
not necessarily

[10:11]
cider starts it for you automatically

dpsutton [10:12 PM]
added a Plain Text snippet
cider-cljs-lein-repl is a variable defined in ‘cider.el’.
Its value is
"(do (require 'figwheel-sidecar.repl-api) (figwheel-sidecar.repl-api/start-figwheel!) (figwheel-sidecar.repl-api/cljs-repl))"
Original value was
"(cemerick.piggieback/cljs-repl (cljs.repl.rhino/repl-env))"
  This variable is safe as a file local variable if its value
  satisfies the predicate which is a byte-compiled expression.
Documentation:
Clojure form that returns a ClojureScript REPL environment.
This is only used in lein projects.  It is evaluated in a Clojure REPL and
it should start a ClojureScript REPL.
You can customize this variable.
Add Comment Collapse

dpsutton [10:13 PM]
i set this and cider starts up the correct repl for me. Each repl has different incantations to get i tup and running. this one work sfor me. I'm new to cljs side though and don't have much boot experience

mitchelkuijpers [10:15 PM]
I have this ﻿⁠⁠⁠⁠Cider Cljs Lein Repl: Value Menu Custom: (start-repl)﻿⁠⁠⁠⁠

[10:15]
this works for boot even though it states Lein it has nothing todo with that

dpsutton [10:16 PM]
sounds like some documentation needs to be cleaned up

[10:17]
@borkdude it sounds like just set ﻿⁠⁠⁠⁠cider-cljs-lein-repl﻿⁠⁠⁠⁠ to whichever value it needs to be and then not worry about it

mitchelkuijpers [10:19 PM]
As long as it gets you a cljs repl you are fine :slightly_smiling_face:

borkdude [10:29 PM]
:slightly_smiling_face:

borkdude [10:40 PM]
I’ve put this in my ﻿⁠⁠⁠⁠init.el﻿⁠⁠⁠⁠:
﻿⁠⁠⁠⁠(setq cider-cljs-lein-repl "(do (ns boot.user) (start-repl))")﻿⁠⁠⁠⁠

[10:41]
and this works for me
** https://github.com/madvas/print-foo-cljs
** colorized repl/stack traces etc
   https://github.com/venantius/ultra/
** clojure core libs
http://dev.clojure.org/display/community/Where+Did+Clojure.Contrib+Go
** emacs lisp navigation
lispy?

** cider keybindings
C-c M-n	Switch to namespace of the current buffer
C-x C-e	Evaluate the expression immediately preceding point
C-c C-k	Compile current buffer
C-, save and compile
C-M-x eval outer sexpr
** paredit keybindings
M-x paredit-mode	Toggle paredit mode
M-(	paredit-wrap-round, surround expression after point in parentheses
C-→	Slurp; move closing parenthesis to the right to include next expression
C-←	Barf; move closing parenthesis to the left to exclude last expression
C-M-f, C-M-b	Move to the opening/closing parenthesis

** repl utils
http://www.learningclojure.com/2010/03/conditioning-repl.html
*** script
;; LOAD ME WITH
;; (load-file "/home/john/hobby-code/require-all-snippet.clj")

;; This file conditions a repl in various ways that I do all the time.

;; Firstly we want to 'require' all the namespaces on the classpath
;; This ensures that find-doc and the like will work
(require 'clojure.contrib.find-namespaces)

;; Some namespaces may fail to load, so catch any exceptions thrown
(defn- require-may-fail [ns]
  (try

   (print "Attempting to require " ns ": ")
   (require ns)
   (println "success")
   (catch Exception e (println "couldn't require " ns "\nException\n" e "\n\n"))))


;; Generally we'd want clojure.*, clojure.contrib.*, and any project-specific namespaces
(defn require-all-namespaces-starting-with [strng]
  (doall (map require-may-fail
              (filter #(. (str %) startsWith strng)
                      (clojure.contrib.find-namespaces/find-namespaces-on-classpath)))))


;; The functions in these namespaces are so useful at the REPL that I want them 'use'd.
;; I.e. I want to be able to type 'source' rather than 'clojure.contrib.repl-utils/source'
(use 'clojure.contrib.repl-utils)
(use 'clojure.inspector)
(use 'clojure.contrib.pprint)
(use 'clojure.contrib.repl-utils)
(use 'clojure.contrib.trace)

;; It drives me up the wall that it's (doc re-pattern) but (find-doc "re-pattern").
;; Can use macros so that (fd re-pattern) (fd "re-pattern") and (fd 're-pattern) all mean the same thing
(defn- stringify [x]
  (println "stringify given" (str x))
  (let [s  (cond (string? x) x
                 (symbol? x) (str x)
                 (and (list? x) (= (first x) 'quote)) (str (second x))
                 :else (str x)) ]
    (println (str "translating to: \"" s "\""))
    s))



;; Sometimes I like to ask which public functions a namespace provides.
(defn- ns-publics-list [ns] (#(list (ns-name %) (map first (ns-publics %))) ns))
;; And occasionally which functions it pulls in (with refer or use)
(defn- ns-refers-list  [ns] (#(list (ns-name %) (map first (ns-refers %))) ns))


;; Nice pretty-printed versions of these functions, accepting strings, symbols or quoted symbol
(defmacro list-publics
  ([]   `(pprint (ns-publics-list *ns*)))
  ([symbol-or-string] `(pprint (ns-publics-list (find-ns (symbol (stringify '~symbol-or-string)))))))

(defmacro list-refers
  ([]   `(pprint (ns-refers-list *ns*)))
  ([symbol-or-string] `(pprint (ns-refers-list (find-ns (symbol (stringify '~symbol-or-string)))))))

;; List all the namespaces
(defn list-all-ns [] (pprint (map ns-name (all-ns))))

;; List all public functions in all namespaces!
(defn list-publics-all-ns [] (pprint (map #(list (ns-name %) (map first (ns-publics %))) (all-ns))))

;; With all the namespaces loaded, find-doc can be overwhelming.
;; This is like find-doc, but just gives the associated names.

(defn- find-doc-names
  "Prints the name of any var whose documentation or name contains a match for re-string-or-pattern"
  [re-string-or-pattern]
    (let [re  (re-pattern re-string-or-pattern)]
      (doseq [ns (all-ns)
              v (sort-by (comp :name meta) (vals (ns-interns ns)))
              :when (and (:doc ^v)
                         (or (re-find (re-matcher re (:doc ^v)))
                             (re-find (re-matcher re (str (:name ^v))))))]
               (print v "\n"))))





;;find symbol or string in docs
(defmacro fd [symbol-or-string] `(find-doc (stringify '~symbol-or-string)))

(defmacro fdn [symbol-or-string] `(find-doc-names (stringify '~symbol-or-string)))



;;debugging macro                                try: (* 2 (dbg (* 3 4)))
(defmacro dbg [x] `(let [x# ~x] (do (println '~x "->" x#) x#)))

;;and pretty-printing version
(defmacro ppdbg [x]`(let [x# ~x] (do (println "--")(pprint '~x)(println "->")(pprint x#) (println "--") x#)))


;;and one for running tests
(defmacro run-test [fn] `(test (resolve '~fn)))


;; Sometimes it's nice to check the classpath
(defn- get-classpath []
   (sort (map (memfn getPath)
              (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))))

(defn print-classpath []
  (clojure.contrib.pprint/pprint (get-classpath)))

(defn get-current-directory []
  (. (java.io.File. ".") getCanonicalPath))


;;require everything from clojure and clojure.contrib, so that find-doc can find it
(require-all-namespaces-starting-with "clojure")

;;print the classpath
(println "Classpath:")
(print-classpath)

(println "Current Directory" (get-current-directory))

;;print the public functions in the current namespace
(println "Current Namespace")
(list-publics)


;;hint on how to require project specific namespaces
(println "to require all namespaces starting with example:")
(println "(require-all-namespaces-starting-with \"example\")")

** Latest versions: 27-12-15
Clojure: 1.7.0
Clojurescript: 1.7.170
Figwheel 0.5.0-2
core.async 0.2.374
sente 1.7.0
datascript 0.13.3
rum 0.6.0
lein-cljsbuild 1.1.2
datascript 0.13.3

** Dev tools
-    https://bpiel.github.io/sayid/
    Sayid (siy EED) is a tool for debugging and profiling clojure code.
Sayid works by intercepting and recording the inputs and outputs of functions.
It can even record function calls that occur inside of functions. The user can
select which functions to trace. Functions can be selected individually or by
namespace. The recorded data can be displayed, queried and profiled.

- Marginalia is a source code documentation tool that parses Clojure and ClojureScript code and outputs a side-by-side source view with appropriate comments and docstrings aligned.
https://github.com/gdeer81/marginalia
- use cljs-devtools with Canary for debugging
- perhaps use clairvoyant for debugging https://github.com/spellhouse/clairvoyant
- use figwheel
- use timbre for logging
 https://github.com/ptaoussanis/timbre

** cljs-devtools
   http://www.omgubuntu.co.uk/2012/12/how-to-install-daily-builds-of-chrome-in-ubuntu
   start with canary
canary.sh:
~/opt/chrome-linux/chrome --user-data-dir=~/.config/chromium-canary \
--remote-debugging-port=9222 \
--no-first-run

** Dirac, a Chrome DevTools fork for ClojureScript developers
https://github.com/binaryage/dirac
latest canary:



* testing
**   https://github.com/reifyhealth/specmonstah
** https://medium.com/adstage-engineering/how-we-test-our-full-stack-clojure-app-b18d79ee9e00#.9r2hwmjd2
**  http://blog.cognitect.com/blog/2016/10/5/interactive-development-with-clojurespec
**  https://8thlight.com/blog/eric-smith/2016/10/05/a-testable-clojurescript-setup.html
**  http://tech.adstage.io/2016/09/12/how-we-test-full-stack-clojure.html
** tips etc
   test api
   https://clojure.github.io/clojure/clojure.test-api.html
  with-redefs
   https://qualified.io/kb/languages/clojure/clojure.test
   rollback sql transaction
   http://www.lispcast.com/clojure-database-test-faster
  https://nakkaya.com/2009/11/18/unit-testing-in-clojure/

** cider
  https://github.com/clojure-emacs/cider/blob/master/doc/running_tests.md

* docs/videos/podcasts/blogposts etc
** videos and podcasts
How immutability, functional programming, databases and reactivity change front-end
https://www.youtube.com/watch?v=5DyQwMQbWvs

https://github.com/digitalechecklisten/chinchilla/wiki/Frontend-architecture-revolution

specter
https://github.com/nathanmarz/specter
https://www.youtube.com/watch?v=VTCy_DkAJGk&index=1&list=PLZdCLR02grLq4e8-1P2JNHBKUOLFTX3kb

datalog all the way down
https://www.youtube.com/watch?v=aI0zVzzoK_E

defrecord, deftype
https://www.youtube.com/watch?v=vZtkqDIicqI&index=13&list=PLZdCLR02grLq4e8-1P2JNHBKUOLFTX3kb


clojure/west 2016
https://www.youtube.com/playlist?list=PLZdCLR02grLq4e8-1P2JNHBKUOLFTX3kb

talk on web dev with cljs/react/async etc
d3 ClojureScript + React
https://www.youtube.com/watch?v=6_mbxaRDA-s

** testing
Generative Testing: Properties, State and Beyond - Jan Stepien
https://www.youtube.com/watch?v=D2TCuDXmyw4&index=7&list=PLZdCLR02grLoBx0Y5ZrpdmLxc160PIwzQ
Fast full stack testing in om.next - Jack Dubie
https://www.youtube.com/watch?v=M1Tl-YLqkQc&index=15&list=PLZdCLR02grLq4e8-1P2JNHBKUOLFTX3kb

* Learning Clojure                                                    :learn:
** notes
zeal: clojure:defn
http://clojuredocs.org/quickref
*** on immutability
On immutability:
```
(def a {:a 1})
(def b a)
```
There is now no way to modify the {:a 1} value. The value is as immutable as the
string "foobar" or the number 1. You can assign a different value to a, in
other words, change the binding of a: `(def a {:a 2}), but b will still be {:a 1}
Compare that to javascript:
```
a={a: 1}
=> Object {a: 1}
b=a
=> Object {a: 1}
b
=> Object {a: 1}
a.a=2
=> 2
b
=> Object {a: 2}
```
So you're constantly creating new values from existing values by applying functions to those values. The functions can never change the value, only return a new one.
That seems very memory inefficient, but under the covers clojure only stores the
diffs, so it apparently isn't at all. This works in clojurescript the same way.
So if you have an vector of 10000 maps, each map having 10000 keys. If you
generated each map from the first map, but only modified one key each time, I
think the memory requirement for the vector is the first map plus 10000 diffs to
the first map of only one key. So you never have to worry really about passing
and returning huge maps.
*** specify
;; specify/specify! are cljs version of extend
(defprotocol
    IFoo
  (bar [this] "bar doc string"))
(def foo0 {:a 1})
(def foo1 {:a 1})
(def foo2 (specify foo0 IFoo (bar [this] "foo2")))
(def foo3 (specify foo1 IFoo (bar [this] "foo3")))

(bar foo0) ;; => Error, no protocol method IFoo.bar
(bar foo1) ;; => Error, no protocol method IFoo.bar
(bar foo2) ;; => "foo2"
(bar foo3) ;; => "foo3"

(def foo4 {:a 1})
(def foo5 {:a 1})
(specify! foo4 IFoo (bar [this] "foo4")) ;mutation!
(specify! foo5 IFoo (bar [this] "foo5")) ;mutation!
(bar foo4) ;; => "foo4"
(bar foo5) ;; => "foo5"

*** destructering
    http://clojure.org/guides/destructuring
*** datatypes
lists(), vectors [], maps {}, sets #{}
#"regular-expression"
"string"
\newline \space \uunicode-hex-value
:keyword
^{key-value-pairs} object (metadata)

many functions will call seq on a collection argument before doing anything
else.
(map inc [1 2 3])
; => (2 3 4)
- into and conj:
 one takes a rest-param (conj) and one takes a seqable data structure (into).
- apply "explodes" a seqable data structure so that it can be passed to a
  function which expects a rest-param

*** functions
(defn
a-name
"(Optional) a docstring"
[Parameters]
(The function body)
)
**** anonymous
(#(* % 3) 8)
 macros
*** reader-macros
Clojure code consists of textual representations of data structures called
reader forms. You'll notice that all your code that actually does stuff —
function calls, if's, def's, etc — consists of list reader forms.

The reader transforms these reader forms into the actual internal data
structures.
*** evaluation
-  Strings, numbers, characters, true, false, nil and keywords evaluate to
  themselves
-  a symbol resolves to either a special form or a value
-  the data structure is an empty list, it evaluates to an empty list:
   Otherwise, it is a call to the first element of the list: which is a special
   form or a function call or a macro

so normally:
text -> reader -> datastructure -> evaluator -> value
but when evaluating a macro call:
text -> reader -> datastructure -> macroexpander -> new-datastructure ->
evaluator -> value

*** protocols
    http://davedellacosta.com/cljs-protocols
*** multimethods
*** core.typed
*** core.async
    http://ku1ik.com/2015/10/12/sweet-core-async.html

** clojure doc
The goal of this article is to provide a fairly comprehensive introduction to the Clojure programming language. A large number of features are covered, each in a fairly brief manner:
http://java.ociweb.com/mark/clojure/article.html

http://www.braveclojure.com/functional-programming/

https://funcool.github.io/clojurescript-unraveled/

http://jafingerhut.github.io/cheatsheet/grimoire/cheatsheet-tiptip-cdocs-summary.html
** links
Slack clojure archive:
https://clojurians-log.clojureverse.org/

https://www.youtube.com/channel/UC6yONKYeoE2P3bsahDtsimg
Clojure Programming Tutorials
Paid channel
€3.99/month
First 14 days free • No advertising

A collection programming tutorials for Clojure, covering logic programming, transducers, core.async, program optimization, and many more topics.


Frequently Asked Questions:

Q) How often do you release new videos?
A) Varies, but I try to release 1-2 new videos a month

Q) Why do you charge for videos? Isn't Youtube free?
A) Unfortunately, in order to get any sort of income from Youtube, videos must have a very high view count. Somewhere in the range of 100k views per video. Getting that sort of viewing of tutorials related to programming in any programming language would be hard.

Q) Why did you move on from Pivotshare hosting?
A) The goals of Pivotshare continued to diverge from my own goals for my video content.


http://tombooth.co.uk/painting-in-clojure
https://yogthos.github.io/ClojureDistilled.html
http://clojure-doc.org/
http://clojure.org/cheatsheet
http://jafingerhut.github.io/cheatsheet/grimoire/cheatsheet-tiptip-cdocs-summary.html
https://himera.herokuapp.com/synonym.html
https://www.4clojure.com/problems
http://clojurekoans.com/
https://github.com/functional-koans/clojure-koans
https://github.com/magomimmo/cljs-start
https://github.com/magomimmo/modern-cljs/tree/master/cljs-tutorial
https://github.com/magomimmo/modern-cljs
https://adambard.com/blog/ten-reasons-to-use-clojure/
https://funcool.github.io/clojurescript-unraveled/
https://medium.com/@roman01la/debugging-clojurescript-6e4d903e831#.nhoymw2ib


* spec
  Assumptions
This is only part of the complete admin, but I’d like to create it in phases, rather than to create a single big project that takes months to create.
- All migrations should be done in the rails app.
- The backend for the admin is a different API, the same API that is being built for the dashboard.
- The frontend is done in ClojureScript in combination with React (most likely Om/Next)




Admins
The idea is to give certain users admin rights within a group. There is a property on the users table called group_admin. This property is currently not being used, so could be repurposed.

We would need the ability to assign users within the DC group that could act as so-called super admins. And have the abilities as described in the rest of this documents but then for every group. This ability doesn't need to be in the UI.


Dossier types
Create / read / update / delete operations for dossier-types.
- Dossier-types can have multiple child dossier-types.
- Dossier-type can only have one parent dossier-type.
- Dossier-types can be nested arbitrarily.

Fields
Every field has three properties: label, type and order. It speaks for itself except that the orders of the locations are set. By that, I mean that locations always come beneath the fields, but are subject to an order between them. So that should be reflected in the UI.
I would also like to see that you can specify the order of the fields by dragging and dropping fields.

Because fields have very few properties, I think it would be best if it would expand rather than go to a new page. In the same way as checklist answers when you press on the "i".

Field types
Currently, we only have a handful of field types. This project should not be used to extend the array of types we have for fields. What we have so far: location, text, string, date, URL and hidden.

Dossier name
Dossier names are generated from one or more fields.
Currently set in the name_format property. In most cases this is just the "naam" field in the dossier, but could also be multiple fields separated by a dash "-". It could also include any location property, using e.g. "location.name-naam".
It should be an input field, with an 'i' to show some help to fill in the input field. We should also fill it in with the first field that the user creates in the dossier-type.

Locations
Only top level dossier-types can have location fields for now. The API is not equipped to handle it otherwise. It's still food for thought if this should be different.


Status
I created statuses in such a way that a status could have a verb and the actual status. This was a mistake on my part as in all the dossier, checklist statuses the verb and status are the same words.
I don't think this project should change the way we store statuses.
We should refactor that in a different issue. But we should let the user only fill in one word per status.

- Statuses can be different for both checklist and dossiers

Open questions

When deleting a field from a dossier type how will we handle the data?

When we remove a status from a dossier-type how will we manage the existing dossiers that already have that status?

Should we have options that some dossier-types can't have contacts, notes, checklists?


* postgres
https://help.ubuntu.com/community/PostgreSQL
https://askubuntu.com/questions/160778/how-to-uninstall-postgresql-properly
https://dba.stackexchange.com/questions/57723/superuser-is-not-permitted-to-login
https://devcenter.heroku.com/articles/heroku-postgres-import-export
pg_restore --verbose --clean --no-acl --no-owner -h localhost -U michieljoris -d lawcat dump

ALTER ROLE michieljoris WITH LOGIN

* Clojure matrix chaos
My head is spinning with [}([}:(%->#/!?_ swirling in a soup of alpha-numeric
chars. But like the green screen in the matrix, the sense behind the chaos is
coming through more and more.




 Promite.4.Ever!


* scratch
  (defn statuses [this {:keys [label dossier-type col]}]
  (let [statuses (mapv :status (json->clj (get dossier-type col)))

        ]
    (into [:div]
          [
           [:h2 label]
           ;; (ui/text-field
           ;;  )
           (ui/list
            (mapv (fn [status]
                    (ui/list-item {:primary-text status})
                    )
                  statuses)
            )])
     ;; (into [:div]
     ;;       (mapv #(vector :div %) statuses))
    )

  )


  (defn statuses [this {:keys [label dossier-type col]}]
  (let [statuses (mapv :status (json->clj (get dossier-type col)))

        ]
    (into [:div]
          [
           [:h2 label]
           ;; (ui/text-field
           ;;  )
           (ui/list
            (mapv (fn [status]
                    (ui/list-item {:primary-text status})
                    )
                  statuses)
            )])
     ;; (into [:div]
     ;;       (mapv #(vector :div %) statuses))
    )

  )
@answers = Answer.includes(:question).order('questions.tent_question_id').includes(:task).where(:checklist_id => 1)

Zaandam artsenpost
075 6533000
I'll see you guys Monday. We can hash out some requirements for the other admin pages then as well.
95c68649183cbc4dd49ffe7a4c15eae80319ce29
Chrome version 28-11-2016
Version 50.0.2661.94 (64-bit)


;;; Local Variables:
;;; eval: (org-content 2)
;;; End:

fixed recursion bug
Made more efficient parser
updated deps
Testing framework frontend
reading omnext
refactoring should fix a few issues on my list, not finished yet.
Instant clojure repl. You probably can hook it up with your editor as well. If you don't want to start up a jvm. Good for solving probs on https://www.4clojure.com/problems. Which are a good way to get into clojure.

* kibit
  local~/src/clojure/bilby (master *>)$boot kibit
Warning: version conflict detected: org.clojure/clojure version changes from 1.7.0 to 1.8.0
Warning: version conflict detected: com.google.guava/guava version changes from 14.0.1 to 19.0
Warning: version conflict detected: org.clojure/clojure version changes from 1.7.0 to 1.8.0
Warning: version conflict detected: com.google.guava/guava version changes from 14.0.1 to 19.0
Warning: version conflict detected: args4j version changes from 2.0.26 to 2.33
Warning: version conflict detected: org.clojure/tools.cli version changes from 0.3.1 to 0.3.5
Warning: version conflict detected: org.clojure/clojurescript version changes from 1.9.229 to 1.9.456
Warning: version conflict detected: com.google.javascript/closure-compiler-externs version changes from v20160315 to v20161201
Warning: version conflict detected: com.google.guava/guava version changes from 19.0 to 20.0
Warning: version conflict detected: com.google.javascript/closure-compiler-unshaded version changes from v20160315 to v20161201
Warning: version conflict detected: com.google.protobuf/protobuf-java version changes from 2.5.0 to 3.0.2
Warning: version conflict detected: com.google.code.findbugs/jsr305 version changes from 1.3.9 to 3.0.1
Warning: version conflict detected: com.google.code.gson/gson version changes from 2.2.4 to 2.7
Warning: version conflict detected: args4j version changes from 2.0.26 to 2.33
Warning: version conflict detected: org.clojure/tools.cli version changes from 0.3.1 to 0.3.5
Warning: version conflict detected: org.clojure/clojurescript version changes from 1.9.229 to 1.9.456
Warning: version conflict detected: com.google.javascript/closure-compiler-externs version changes from v20160315 to v20161201
Warning: version conflict detected: com.google.guava/guava version changes from 19.0 to 20.0
Warning: version conflict detected: com.google.javascript/closure-compiler-unshaded version changes from v20160315 to v20161201
Warning: version conflict detected: com.google.protobuf/protobuf-java version changes from 2.5.0 to 3.0.2
Warning: version conflict detected: com.google.code.findbugs/jsr305 version changes from 1.3.9 to 3.0.1
Warning: version conflict detected: com.google.code.gson/gson version changes from 2.2.4 to 2.7
Warning: environ value 6666 for key :server-port has been cast to string
++++++++++++++++++++++++++++++++++++++++++++++++++++++
17-02-14 12:53:44 MM INFO [parser.read:664] - Query: [({:user [:id :name {:admin-for-groups [:id :name]}]} {:where [:id := 1]})]
17-02-14 12:53:45 MM INFO [parser.read:724] - DEBUGGING STATEMENTS ARE STILL ENABLED IN READ.CLJ!!!!
(clojure.core/if-let
 [d f]
 (frontend.macro/if-let* () :true :false)
 :false)
17-02-14 12:53:46 MM INFO [dev:32] - Starting app..
17-02-14 12:53:46 MM INFO [app.logging:32] - >> starting.. #'app.config/config
17-02-14 12:53:46 MM INFO [app.config:108] - Clojure environment:  dev
17-02-14 12:53:46 MM INFO [app.logging:32] - >> starting.. #'database.schema/schema
17-02-14 12:53:46 MM INFO [app.logging:32] - >> starting.. #'database.core/db-spec
17-02-14 12:53:46 MM INFO [database.core:62] - Database details:
{:classname "com.mysql.jdbc.Driver",
 :subprotocol "mysql",
 :subname
 "//localhost:3306/chinchilla_development?zeroDateTimeBehavior=convertToNull",
 :user "root",
 :password "***"}
17-02-14 12:53:46 MM INFO [app.logging:32] - >> starting.. #'websockets.core/sente-router
17-02-14 12:53:46 MM INFO [app.logging:32] - >> starting.. #'web-server.core/web-server
17-02-14 12:53:46 MM INFO [web-server.core:45] - Web server is running at  http://localhost:6666/
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed
At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/database/clauses.clj:114:
Consider using:
  (pos? n-conds)
instead of:
  (> n-conds 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/form.cljs:91:
Consider using:
  (nil? field)
instead of:
  (= field nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/form.cljs:107:
Consider using:
  (vec
    (into
      [:div
       {:class "pad-top-0 scrollable-block wide-65",
        :on-touch-move
        (fn [event]
          (let [touch (aget event "changedTouches" 0)
                client-y (aget touch "clientY")
                delete-box (js/document.getElementById "delete")
                in-delete-box? (< client-y 100)
                delete-box-class-list (aget delete-box "classList")]
            (if in-delete-box?
              (.add delete-box-class-list "drag-over")
              (.remove delete-box-class-list "drag-over"))))}]
      [(when (get-in (om/shared this) [:debug :ui-extra-info])
         [:h2 {:class "pad-top-20"} (str "id: " id)])
       (toolbar
         {:redo!
          #(om/transact!
            this
            (clojure.core/apply
              clojure.core/vector
              (clojure.core/seq
                (clojure.core/concat
                  (clojure.core/list
                    (clojure.core/seq
                      (clojure.core/concat
                        (clojure.core/list 'admin/redo-dossier-type))))
                  (clojure.core/list :dossier-type-list))))),
          :revert!
          (fn []
            (om/transact!
              this
              (clojure.core/apply
                clojure.core/vector
                (clojure.core/seq
                  (clojure.core/concat
                    (clojure.core/list
                      (clojure.core/seq
                        (clojure.core/concat
                          (clojure.core/list
                            'admin/revert-dossier-type))))
                    (clojure.core/list :dossier-type-list)))))),
          :table :dossier-type,
          :current-user current-user,
          :this this,
          :is-dirty?
          (let [dossier-type-is-dirty? (:is-dirty? dossier-type)
                {:keys [field]} dossier-type
                any-fields-dirty? (some :is-dirty? field)]
            (or dossier-type-is-dirty? any-fields-dirty?)),
          :save!
          (fn []
            (if (om/tempid? (:parent-dossier-type-id dossier-type))
              (do)
              (om/transact!
                this
                (clojure.core/apply
                  clojure.core/vector
                  (clojure.core/seq
                    (clojure.core/concat
                      (clojure.core/list
                        (clojure.core/seq
                          (clojure.core/concat
                            (clojure.core/list 'admin/save-dossier-type)
                            (clojure.core/list
                              {:dossier-type
                               (dissoc
                                 dossier-type
                                 :om.next/computed
                                 :dossier-type
                                 :updated-by)})))))))))),
          :record dossier-type,
          :undo!
          #(om/transact!
            this
            (clojure.core/apply
              clojure.core/vector
              (clojure.core/seq
                (clojure.core/concat
                  (clojure.core/list
                    (clojure.core/seq
                      (clojure.core/concat
                        (clojure.core/list 'admin/undo-dossier-type))))
                  (clojure.core/list :dossier-type-list)))))})
       (dossier-type-name
         {:label (t "Dossier type"),
          :dossier-type
          (select-keys dossier-type [:id :name :inactive])})
       (blocks
         {:label "Dossier blocks",
          :dossier-type (select-keys dossier-type [:id :blocks])})
       (name-formatter
         (om/computed
           {:title "Name format",
            :name-format (:name-format dossier-type),
            :fields-by-type fields-by-type}
           computed))
       (dossier-fields
         this
         fields-loaded?
         fields-by-type
         is-top-level?
         media)
       (ui/paper
         {:style {:margin-top 20}}
         (statuses
           {:label "Dossier statuses",
            :dossier-type
            (select-keys dossier-type [:id :dossier-statuses]),
            :col :dossier-statuses})
         (statuses
           {:label "Checklist statuses",
            :dossier-type
            (select-keys dossier-type [:id :checklist-statuses]),
            :col :checklist-statuses,
            :no-bottom-border true}))
       (ui/paper
         {:className "dc-paper mar-top-20"}
         (html
           [:div
            (label-value-row
              {:label "Created at", :value (from-now created-at locale)})
            (label-value-row
              {:label "Updated at", :value (from-now updated-at locale)})
            (label-value-row
              {:label "Updated by",
               :value updated-by,
               :no-bottom-border true})]))
       (ui/raised-button
         {:label "Delete",
          :background-color (get css/vars :mediumBlue),
          :label-color "white",
          :className "save-button mar-top-30",
          :style
          {:height 30, :width 100, :margin-right 5, :float "right"},
          :label-style
          {:font-size 10, :padding-left 5, :padding-right 5},
          :on-touch-tap
          (fn []
            (om/update-state! this assoc :delete-dialog-open? true))})
       (ui/dialog
         {:title
          (t "Are you sure you want to delete this dossier type?"),
          :modal false,
          :open
          (if (:delete-dialog-open? (om/get-state this)) true false),
          :on-request-close
          #(om/update-state! this assoc :delete-dialog-open? false),
          :actions
          [(ui/flat-button
             {:label (t "Cancel"),
              :primary true,
              :keyboard-focused true,
              :on-touch-tap
              #(om/update-state! this assoc :delete-dialog-open? false)})
           (ui/flat-button
             {:label (t "Ok"),
              :primary true,
              :on-touch-tap
              (fn []
                (om/update-state! this assoc :delete-dialog-open? false)
                (om/transact!
                  this
                  (clojure.core/apply
                    clojure.core/vector
                    (clojure.core/seq
                      (clojure.core/concat
                        (clojure.core/list
                          (clojure.core/seq
                            (clojure.core/concat
                              (clojure.core/list
                                'admin/delete-dossier-type)
                              (clojure.core/list
                                {:id (:id dossier-type)}))))
                        (clojure.core/list :dossier-type-list))))))})]}
         (if (om/tempid? id)
           (t
             "This will remove this new dossier type. It does not yet exist on the server so will just be removed in the frontend.")
           (t
             "This will attempt to delete this dossier type on the server. However if there are any dossiers created with this dossier-type (even if subsequently deleted) this will not succeed.")))]))
instead of:
  (into
    []
    (into
      [:div
       {:class "pad-top-0 scrollable-block wide-65",
        :on-touch-move
        (fn [event]
          (let [touch (aget event "changedTouches" 0)
                client-y (aget touch "clientY")
                delete-box (js/document.getElementById "delete")
                in-delete-box? (< client-y 100)
                delete-box-class-list (aget delete-box "classList")]
            (if in-delete-box?
              (.add delete-box-class-list "drag-over")
              (.remove delete-box-class-list "drag-over"))))}]
      [(when (get-in (om/shared this) [:debug :ui-extra-info])
         [:h2 {:class "pad-top-20"} (str "id: " id)])
       (toolbar
         {:redo!
          #(om/transact!
            this
            (clojure.core/apply
              clojure.core/vector
              (clojure.core/seq
                (clojure.core/concat
                  (clojure.core/list
                    (clojure.core/seq
                      (clojure.core/concat
                        (clojure.core/list 'admin/redo-dossier-type))))
                  (clojure.core/list :dossier-type-list))))),
          :revert!
          (fn []
            (om/transact!
              this
              (clojure.core/apply
                clojure.core/vector
                (clojure.core/seq
                  (clojure.core/concat
                    (clojure.core/list
                      (clojure.core/seq
                        (clojure.core/concat
                          (clojure.core/list
                            'admin/revert-dossier-type))))
                    (clojure.core/list :dossier-type-list)))))),
          :table :dossier-type,
          :current-user current-user,
          :this this,
          :is-dirty?
          (let [dossier-type-is-dirty? (:is-dirty? dossier-type)
                {:keys [field]} dossier-type
                any-fields-dirty? (some :is-dirty? field)]
            (or dossier-type-is-dirty? any-fields-dirty?)),
          :save!
          (fn []
            (if (om/tempid? (:parent-dossier-type-id dossier-type))
              (do)
              (om/transact!
                this
                (clojure.core/apply
                  clojure.core/vector
                  (clojure.core/seq
                    (clojure.core/concat
                      (clojure.core/list
                        (clojure.core/seq
                          (clojure.core/concat
                            (clojure.core/list 'admin/save-dossier-type)
                            (clojure.core/list
                              {:dossier-type
                               (dissoc
                                 dossier-type
                                 :om.next/computed
                                 :dossier-type
                                 :updated-by)})))))))))),
          :record dossier-type,
          :undo!
          #(om/transact!
            this
            (clojure.core/apply
              clojure.core/vector
              (clojure.core/seq
                (clojure.core/concat
                  (clojure.core/list
                    (clojure.core/seq
                      (clojure.core/concat
                        (clojure.core/list 'admin/undo-dossier-type))))
                  (clojure.core/list :dossier-type-list)))))})
       (dossier-type-name
         {:label (t "Dossier type"),
          :dossier-type
          (select-keys dossier-type [:id :name :inactive])})
       (blocks
         {:label "Dossier blocks",
          :dossier-type (select-keys dossier-type [:id :blocks])})
       (name-formatter
         (om/computed
           {:title "Name format",
            :name-format (:name-format dossier-type),
            :fields-by-type fields-by-type}
           computed))
       (dossier-fields
         this
         fields-loaded?
         fields-by-type
         is-top-level?
         media)
       (ui/paper
         {:style {:margin-top 20}}
         (statuses
           {:label "Dossier statuses",
            :dossier-type
            (select-keys dossier-type [:id :dossier-statuses]),
            :col :dossier-statuses})
         (statuses
           {:label "Checklist statuses",
            :dossier-type
            (select-keys dossier-type [:id :checklist-statuses]),
            :col :checklist-statuses,
            :no-bottom-border true}))
       (ui/paper
         {:className "dc-paper mar-top-20"}
         (html
           [:div
            (label-value-row
              {:label "Created at", :value (from-now created-at locale)})
            (label-value-row
              {:label "Updated at", :value (from-now updated-at locale)})
            (label-value-row
              {:label "Updated by",
               :value updated-by,
               :no-bottom-border true})]))
       (ui/raised-button
         {:label "Delete",
          :background-color (get css/vars :mediumBlue),
          :label-color "white",
          :className "save-button mar-top-30",
          :style
          {:height 30, :width 100, :margin-right 5, :float "right"},
          :label-style
          {:font-size 10, :padding-left 5, :padding-right 5},
          :on-touch-tap
          (fn []
            (om/update-state! this assoc :delete-dialog-open? true))})
       (ui/dialog
         {:title
          (t "Are you sure you want to delete this dossier type?"),
          :modal false,
          :open
          (if (:delete-dialog-open? (om/get-state this)) true false),
          :on-request-close
          #(om/update-state! this assoc :delete-dialog-open? false),
          :actions
          [(ui/flat-button
             {:label (t "Cancel"),
              :primary true,
              :keyboard-focused true,
              :on-touch-tap
              #(om/update-state! this assoc :delete-dialog-open? false)})
           (ui/flat-button
             {:label (t "Ok"),
              :primary true,
              :on-touch-tap
              (fn []
                (om/update-state! this assoc :delete-dialog-open? false)
                (om/transact!
                  this
                  (clojure.core/apply
                    clojure.core/vector
                    (clojure.core/seq
                      (clojure.core/concat
                        (clojure.core/list
                          (clojure.core/seq
                            (clojure.core/concat
                              (clojure.core/list
                                'admin/delete-dossier-type)
                              (clojure.core/list
                                {:id (:id dossier-type)}))))
                        (clojure.core/list :dossier-type-list))))))})]}
         (if (om/tempid? id)
           (t
             "This will remove this new dossier type. It does not yet exist on the server so will just be removed in the frontend.")
           (t
             "This will attempt to delete this dossier type on the server. However if there are any dossiers created with this dossier-type (even if subsequently deleted) this will not succeed.")))]))
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/core_test.clj:127:
Consider using:
  (nil? (table-name nil))
instead of:
  (= (table-name nil) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/core_test.clj:142:
Consider using:
  (nil? (reverse-join nil))
instead of:
  (= (reverse-join nil) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/core_test.clj:146:
Consider using:
  (nil? (type-or-keyword {:foo 1}))
instead of:
  (= (type-or-keyword {:foo 1}) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/core_test.clj:148:
Consider using:
  (nil? (keyword->underscored-string nil))
instead of:
  (= (keyword->underscored-string nil) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/core_test.clj:161:
Consider using:
  (nil? (find-join-table :sub1 :main))
instead of:
  (= nil (find-join-table :sub1 :main))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/core_test.clj:191:
Consider using:
  (nil? (_get-join-info :o1 :o2))
instead of:
  (= (_get-join-info :o1 :o2) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/reconciler/parser/mutate_helpers.cljs:124:
Consider using:
  (defn modify-record
    "Pass in an id and a table keyword, and a map of the modifications\n  you would like. If record does not exist in the table it gets\n  created. State should be an atom. If an existing record has no meta,\n  original record is stored in it. Pass in is-dirty-fn to set dirty\n  flag properly for the record in its metadata. When updating record\n  prev-uuid is set to point at last state where record wasn't\n  modified, and next-uuid and uuid-trail are set to nil. If replace?\n  is true mods are not merged but become the record.\n  Returns updated record. Record has extra prop called :is-dirty?\n  indicating whether record is same or not compared to what's in\n  the :record key of its metadata"
    ([reconciler state mod] (modify-record reconciler state mod nil))
    ([reconciler
      state
      {:keys
       [id table mods meta-mods client-mods replace? no-history-entry?]}
      is-dirty-fn]
      (let [table-by-id (table->table-by-id table)
            record (get-in @state [table-by-id id])
            meta-record (-> record meta :record)
            record (vary-meta
                     (merge record client-mods)
                     assoc
                     :record
                     (if (some? meta-record)
                       (merge meta-record meta-mods)
                       (if (some? mods) record)))
            record (cond->
                     (merge record mods)
                     replace?
                     (select-keys (keys mods))
                     (not no-history-entry?)
                     (vary-meta
                       assoc
                       :prev-uuid
                       (last (mutation-history reconciler))
                       :next-uuid
                       nil
                       :uuid
                       nil
                       :uuid-trail
                       nil))
            record (if is-dirty-fn
                     (let [is-dirty? (is-dirty-fn table record)]
                       (update-dirty-records
                         state
                         {:table table,
                          :id id,
                          :add-or-remove (if is-dirty? :add :remove)})
                       (cond->
                         (assoc record :is-dirty? is-dirty?)
                         (not is-dirty?)
                         (vary-meta dissoc :record)))
                     record)]
        (info "modified record")
        (bpp record)
        (bpp (meta record))
        (swap! state assoc-in [table-by-id id] record)
        record)))
instead of:
  (do
    (defn modify-record
      "Pass in an id and a table keyword, and a map of the modifications\n  you would like. If record does not exist in the table it gets\n  created. State should be an atom. If an existing record has no meta,\n  original record is stored in it. Pass in is-dirty-fn to set dirty\n  flag properly for the record in its metadata. When updating record\n  prev-uuid is set to point at last state where record wasn't\n  modified, and next-uuid and uuid-trail are set to nil. If replace?\n  is true mods are not merged but become the record.\n  Returns updated record. Record has extra prop called :is-dirty?\n  indicating whether record is same or not compared to what's in\n  the :record key of its metadata"
      ([reconciler state mod] (modify-record reconciler state mod nil))
      ([reconciler
        state
        {:keys
         [id
          table
          mods
          meta-mods
          client-mods
          replace?
          no-history-entry?]}
        is-dirty-fn]
        (let [table-by-id (table->table-by-id table)
              record (get-in @state [table-by-id id])
              meta-record (-> record meta :record)
              record (vary-meta
                       (merge record client-mods)
                       assoc
                       :record
                       (if (some? meta-record)
                         (merge meta-record meta-mods)
                         (if (some? mods) record)))
              record (cond->
                       (merge record mods)
                       replace?
                       (select-keys (keys mods))
                       (not no-history-entry?)
                       (vary-meta
                         assoc
                         :prev-uuid
                         (last (mutation-history reconciler))
                         :next-uuid
                         nil
                         :uuid
                         nil
                         :uuid-trail
                         nil))
              record (if is-dirty-fn
                       (let [is-dirty? (is-dirty-fn table record)]
                         (update-dirty-records
                           state
                           {:table table,
                            :id id,
                            :add-or-remove (if is-dirty? :add :remove)})
                         (cond->
                           (assoc record :is-dirty? is-dirty?)
                           (not is-dirty?)
                           (vary-meta dissoc :record)))
                       record)]
          (info "modified record")
          (bpp record)
          (bpp (meta record))
          (swap! state assoc-in [table-by-id id] record)
          record))))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/util.cljs:47:
Consider using:
  (clojure.string/join
    (->> dirty-routes (map (comp t name)) (interpose ", ")))
instead of:
  (apply str (->> dirty-routes (map (comp t name)) (interpose ", ")))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/util.cljs:186:
Consider using:
  (defn create-tempid
    "Takes a string and recreates om/tempid from it"
    [s]
    (om/tempid (uuid. s)))
instead of:
  (do
    (defn create-tempid
      "Takes a string and recreates om/tempid from it"
      [s]
      (om/tempid (uuid. s))))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/util.cljs:201:
Consider using:
  (.-id id)
instead of:
  (. id -id)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/util.cljs:283:
Consider using:
  (vec
    (->>
      filter-map
      (map (fn [filter] (get-in filters filter)))
      (remove nil?)))
instead of:
  (into
    []
    (->>
      filter-map
      (map (fn [filter] (get-in filters filter)))
      (remove nil?)))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/util.cljs:295:
Consider using:
  (vec (remove nil? [where-filters where-search extra-clause]))
instead of:
  (into [] (remove nil? [where-filters where-search extra-clause]))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/app/logging.clj:null:
Consider using:
  clear-hooks
instead of:
  #(clear-hooks %)
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/reconciler/parser/mutate_dossier_type.cljs:111:
Consider using:
  record-id->el-id
instead of:
  (fn [id] (record-id->el-id id))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/helpers/defcmp_generic_functions.cljs:54:
Consider using:
  (vec (distinct (conj query :is-dirty? :client/deleted)))
instead of:
  (into [] (distinct (conj query :is-dirty? :client/deleted)))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/helpers/defcmp_generic_functions.cljs:200:
Consider using:
  (pos? (count active-filters-string))
instead of:
  (> (count active-filters-string) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/database/config.clj:62:
Consider using:
  (pos? in-use-count)
instead of:
  (> in-use-count 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/app/util.clj:85:
Consider using:
  (defn unescape-html [s]
    (-> s
     (str/replace #"&amp;" "&")
     (str/replace #"&lt;" "<")
     (str/replace #"&gt;" ">")))
instead of:
  (do
    (defn unescape-html [s]
      (-> s
       (str/replace #"&amp;" "&")
       (str/replace #"&lt;" "<")
       (str/replace #"&gt;" ">"))))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/reconciler/parser/mutate_record.cljs:187:
Consider using:
  (vec (concat p1__2993751# latest-batch-data))
instead of:
  (into [] (concat p1__2993751# latest-batch-data))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/reconciler/parser/mutate_record.cljs:194:
Consider using:
  (vec (filter #(om/tempid? (second %)) new-records))
instead of:
  (into [] (filter #(om/tempid? (second %)) new-records))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/core.cljs:78:
Consider using:
  (when (not= (:app/route o) (:app/route n))
    (info :#purple "Route changed to" (name (:app/route n)))
    (pq RootComponent :root-component))
instead of:
  (if (not= (:app/route o) (:app/route n))
    (do
      (info :#purple "Route changed to" (name (:app/route n)))
      (pq RootComponent :root-component)))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/om/checksums.clj:20:
Consider using:
  (inc i)
instead of:
  (+ i 1)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/om/checksums.clj:35:
Consider using:
  (inc i)
instead of:
  (+ i 1)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/page.cljs:121:
Consider using:
  (when sibling (aget (.-dataset sibling) "order"))
instead of:
  (if sibling (aget (.-dataset sibling) "order") nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/selection.cljs:62:
Consider using:
  (defn parent-of-unsaved? [dossier-type]
    (letfn
      [(is-modified?
         [dossier-type]
         (and (not (:deleted dossier-type)) (:is-dirty? dossier-type)))
       (check-list
         [dossier-type-list]
         (some
           (fn [dossier-type]
             (or
               (is-modified? dossier-type)
               (let [dossier-type-list (:dossier-type dossier-type)]
                 (if (seq dossier-type-list)
                   (check-list dossier-type-list)))))
           dossier-type-list))]
      (check-list (:dossier-type dossier-type))))
instead of:
  (do
    (defn parent-of-unsaved? [dossier-type]
      (letfn
        [(is-modified?
           [dossier-type]
           (and (not (:deleted dossier-type)) (:is-dirty? dossier-type)))
         (check-list
           [dossier-type-list]
           (some
             (fn [dossier-type]
               (or
                 (is-modified? dossier-type)
                 (let [dossier-type-list (:dossier-type dossier-type)]
                   (if (seq dossier-type-list)
                     (check-list dossier-type-list)))))
             dossier-type-list))]
        (check-list (:dossier-type dossier-type)))))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/selection.cljs:203:
Consider using:
  (pos? (count dossier-type-search-term))
instead of:
  (> (count dossier-type-search-term) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/hover_input.cljs:54:
Consider using:
  (when-not multi-line
    (html
      (let [{:keys
             [id
              callback
              disable-debounce
              input-style
              placeholder
              allow-empty-input
              keep-focus-on-enter
              error
              modify-input]} (om/props this)
            {:keys [focus? hover?]} (om/get-state this)
            input-style (merge
                          {:fontSize font-size,
                           :width "100%",
                           :fontStyle
                           (if (= edited-value (t "<No value>"))
                             "italic"
                             "inherit"),
                           :border "none"}
                          input-style)
            input-class (cond->
                          "hover-input dc-value no-padding"
                          (and error (error edited-value))
                          (str " error"))
            process-input (fn [value edited-value]
                            (if (and
                                  (not allow-empty-input)
                                  (= (count edited-value) 0))
                              (om/update-state!
                                this
                                assoc
                                :edited-value
                                value)
                              (when (not= value edited-value)
                                (om/update-state!
                                  this
                                  assoc
                                  :value
                                  edited-value)
                                (callback edited-value))))]
        [:div
         {:class "row between-xs middle-xs",
          :on-mouse-enter
          (fn [event] (om/update-state! this assoc :hover? true)),
          :on-mouse-leave
          (fn [event] (om/update-state! this assoc :hover? false))}
         [:div
          {:class "col-xs-11",
           :style {:padding-right 10, :padding-left 0}}
          [:input
           {:placeholder (or placeholder ""),
            :on-focus
            (fn [ev]
              (om/update-state! this assoc :focus? true)
              (if (= edited-value (t "<No value>"))
                (om/update-state! this assoc :edited-value ""))),
            :value (or edited-value ""),
            :on-blur
            (fn [ev]
              (om/update-state! this assoc :focus? false)
              (process-input value edited-value)),
            :style input-style,
            :on-key-up
            (fn [ev]
              (let [key-code (aget ev "keyCode")
                    input-el (js/document.getElementById id)]
                (when (= key-code 27)
                  (om/update-state!
                    this
                    assoc
                    :edited-value
                    value
                    :hover?
                    false)
                  (.blur input-el))
                (when (and
                        (= key-code 13)
                        (or
                          (> (count edited-value) 0)
                          allow-empty-input))
                  (om/update-state! this assoc :hover? false)
                  (if keep-focus-on-enter
                    (process-input value edited-value)
                    (.blur input-el))))),
            :id id,
            :class input-class,
            :on-change
            (fn [ev]
              (let [new-value (aget ev "target" "value")]
                (if-not disable-debounce
                  (debounce
                    (fn []
                      (let [{:keys [value edited-value]} (om/get-state
                                                           this)]
                        (if (not= value edited-value)
                          (callback edited-value))))))
                (om/update-state!
                  this
                  assoc
                  :edited-value
                  (if modify-input
                    (modify-input new-value)
                    new-value))))}]]])))
instead of:
  (if multi-line
    nil
    (html
      (let [{:keys
             [id
              callback
              disable-debounce
              input-style
              placeholder
              allow-empty-input
              keep-focus-on-enter
              error
              modify-input]} (om/props this)
            {:keys [focus? hover?]} (om/get-state this)
            input-style (merge
                          {:fontSize font-size,
                           :width "100%",
                           :fontStyle
                           (if (= edited-value (t "<No value>"))
                             "italic"
                             "inherit"),
                           :border "none"}
                          input-style)
            input-class (cond->
                          "hover-input dc-value no-padding"
                          (and error (error edited-value))
                          (str " error"))
            process-input (fn [value edited-value]
                            (if (and
                                  (not allow-empty-input)
                                  (= (count edited-value) 0))
                              (om/update-state!
                                this
                                assoc
                                :edited-value
                                value)
                              (when (not= value edited-value)
                                (om/update-state!
                                  this
                                  assoc
                                  :value
                                  edited-value)
                                (callback edited-value))))]
        [:div
         {:class "row between-xs middle-xs",
          :on-mouse-enter
          (fn [event] (om/update-state! this assoc :hover? true)),
          :on-mouse-leave
          (fn [event] (om/update-state! this assoc :hover? false))}
         [:div
          {:class "col-xs-11",
           :style {:padding-right 10, :padding-left 0}}
          [:input
           {:placeholder (or placeholder ""),
            :on-focus
            (fn [ev]
              (om/update-state! this assoc :focus? true)
              (if (= edited-value (t "<No value>"))
                (om/update-state! this assoc :edited-value ""))),
            :value (or edited-value ""),
            :on-blur
            (fn [ev]
              (om/update-state! this assoc :focus? false)
              (process-input value edited-value)),
            :style input-style,
            :on-key-up
            (fn [ev]
              (let [key-code (aget ev "keyCode")
                    input-el (js/document.getElementById id)]
                (when (= key-code 27)
                  (om/update-state!
                    this
                    assoc
                    :edited-value
                    value
                    :hover?
                    false)
                  (.blur input-el))
                (when (and
                        (= key-code 13)
                        (or
                          (> (count edited-value) 0)
                          allow-empty-input))
                  (om/update-state! this assoc :hover? false)
                  (if keep-focus-on-enter
                    (process-input value edited-value)
                    (.blur input-el))))),
            :id id,
            :class input-class,
            :on-change
            (fn [ev]
              (let [new-value (aget ev "target" "value")]
                (if-not disable-debounce
                  (debounce
                    (fn []
                      (let [{:keys [value edited-value]} (om/get-state
                                                           this)]
                        (if (not= value edited-value)
                          (callback edited-value))))))
                (om/update-state!
                  this
                  assoc
                  :edited-value
                  (if modify-input
                    (modify-input new-value)
                    new-value))))}]]])))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/hover_input.cljs:108:
Consider using:
  (zero? (count edited-value))
instead of:
  (= (count edited-value) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/root_component.cljs:null:
Consider using:
  do
instead of:
  #(do)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/dev/util.cljs:38:
Consider using:
  (when @first-run (reset! first-run false))
instead of:
  (if @first-run (do (reset! first-run false)))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/dev/util.cljs:39:
Consider using:
  (reset! first-run false)
instead of:
  (do (reset! first-run false))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/reconciler/migrate.cljs:125:
Consider using:
  (update-in pure [table] dissoc id)
instead of:
  (assoc pure table (dissoc (get pure table) id))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/fields.cljs:80:
Consider using:
  (zero? (count label))
instead of:
  (= 0 (count label))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/fields.cljs:187:
Consider using:
  (when show-locatie-warning
    "At least one of the location fields needs to have the label of \"locatie\".")
instead of:
  (if show-locatie-warning
    "At least one of the location fields needs to have the label of \"locatie\"."
    nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/tmp/play.clj:100:
Consider using:
  info
instead of:
  (fn [p n] (info p n))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/read.clj:169:
Consider using:
  (pos? (count order-by))
instead of:
  (> (count order-by) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/read.clj:223:
Consider using:
  (zero? (count foreign-key-values))
instead of:
  (= 0 (count foreign-key-values))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/read.clj:239:
Consider using:
  (zero? (count t1-ids))
instead of:
  (= 0 (count t1-ids))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/read.clj:259:
Consider using:
  (zero? (count t1-ids))
instead of:
  (= 0 (count t1-ids))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/read.clj:295:
Consider using:
  (zero? (count whitelisted-cols))
instead of:
  (= (count whitelisted-cols) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/read.clj:437:
Consider using:
  (pos? (count t1-rows))
instead of:
  (> (count t1-rows) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/channel.cljs:22:
Consider using:
  (when (.-closed channel) (info "creating channel") (def channel (chan)))
instead of:
  (if (.-closed channel)
    (do (info "creating channel") (def channel (chan))))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/security_test.clj:190:
Consider using:
  (nil? (get-scope :user))
instead of:
  (= (get-scope :user) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/app/timbre_config.cljs:23:
Consider using:
  (or color "")
instead of:
  (if color color "")

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:7:
Consider using:
  (update-in x [key] ches/parse-string)
instead of:
  (assoc x key (ches/parse-string (get x key)))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:10:
Consider using:
  (update-in x [key] ches/generate-string)
instead of:
  (assoc x key (ches/generate-string (get x key)))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:143:
Consider using:
  (when (and picture (:image_file_name picture))
    (let [zeros (repeat "0")
          s (str (:id picture))
          s (str (apply str (take (- 9 (count s)) zeros)) s)
          s (clojure.string/join
              "/"
              (map #(apply str %) (partition 3 s)))]
      (str
        "/system/pictures/images/"
        s
        "/medium/"
        (:image_file_name picture))))
instead of:
  (if (and picture (:image_file_name picture))
    (let [zeros (repeat "0")
          s (str (:id picture))
          s (str (apply str (take (- 9 (count s)) zeros)) s)
          s (clojure.string/join
              "/"
              (map #(apply str %) (partition 3 s)))]
      (str
        "/system/pictures/images/"
        s
        "/medium/"
        (:image_file_name picture)))
    nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:148:
Consider using:
  (clojure.string/join (take (- 9 (count s)) zeros))
instead of:
  (apply str (take (- 9 (count s)) zeros))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:149:
Consider using:
  (clojure.string/join p1__6291612#)
instead of:
  (apply str p1__6291612#)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:155:
Consider using:
  (if-not (empty? pictures)
    (-> m
     (assoc :picture_url (generate-picture-url (first pictures)))
     (assoc :picture_date (:updated_at (first pictures))))
    m)
instead of:
  (if (not (empty? pictures))
    (-> m
     (assoc :picture_url (generate-picture-url (first pictures)))
     (assoc :picture_date (:updated_at (first pictures))))
    m)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/dashboard/core.clj:155:
Consider using:
  (seq pictures)
instead of:
  (not (empty? pictures))
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/web_server/routes.clj:null:
Consider using:
  bean
instead of:
  #(bean %)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/parser/read_test.clj:338:
Consider using:
  (:foo result)
instead of:
  (-> result :foo)
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/name_formatter.cljs:72:
Consider using:
  (when sibling (aget (.-dataset sibling) "order"))
instead of:
  (if sibling (aget (.-dataset sibling) "order") nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/name_formatter.cljs:171:
Consider using:
  (zero? (count name-format))
instead of:
  (= 0 (count name-format))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/name_formatter.cljs:179:
Consider using:
  (zero? (count p1__7257143#))
instead of:
  (= 0 (count p1__7257143#))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/components/dossier_types/name_formatter.cljs:265:
Consider using:
  (zero? (count extra-labels))
instead of:
  (= 0 (count extra-labels))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/mutate.clj:99:
Consider using:
  (pos? (count disallowed-keys))
instead of:
  (> (count disallowed-keys) 0)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/mutate.clj:110:
Consider using:
  (zero? (count whitelisted-mods))
instead of:
  (= 0 (count whitelisted-mods))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/parser/mutate.clj:132:
Consider using:
  (pos? id)
instead of:
  (> id 0)
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed
Check failed -- skipping rest of file
java.lang.RuntimeException: Conditional read not allowed

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/dev.clj:188:
Consider using:
  (.getCanonicalPath (java.io.File. "."))
instead of:
  (. (java.io.File. ".") getCanonicalPath)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/clauses_test.clj:30:
Consider using:
  (nil? (assert-value 1))
instead of:
  (= (assert-value 1) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/clauses_test.clj:31:
Consider using:
  (nil? (assert-value ""))
instead of:
  (= (assert-value "") nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/clauses_test.clj:34:
Consider using:
  (nil? (assert-col :a [:a :b]))
instead of:
  (= (assert-col :a [:a :b]) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/clauses_test.clj:41:
Consider using:
  (nil? (lookup-prop {:a 1, :b 2} :p/c))
instead of:
  (= (lookup-prop {:a 1, :b 2} :p/c) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/database/clauses_test.clj:42:
Consider using:
  (nil? (lookup-prop {:a 1, :b 2} :a))
instead of:
  (= (lookup-prop {:a 1, :b 2} :a) nil)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-grrwi1/reconciler/core.cljs:261:
Consider using:
  (om/app-state reconciler)
instead of:
  (-> reconciler om/app-state)

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/app/security.clj:78:
Consider using:
  (map
    :group_id
    (db/get-cols-from-table
      db-spec
      {:cols ["group_id"],
       :table "admins",
       :where-clause ["where user_id = ?" (:id user)]}))
instead of:
  (->>
    (db/get-cols-from-table
      db-spec
      {:cols ["group_id"],
       :table "admins",
       :where-clause ["where user_id = ?" (:id user)]})
    (map :group_id))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/database/schema.clj:46:
Consider using:
  (add-primary-keys schema (tables-with-columns schema))
instead of:
  (->> (tables-with-columns schema) (add-primary-keys schema))

At /home/michieljoris/.boot/cache/tmp/home/michieljoris/src/clojure/bilby/6dk/-rcsl8f/database/schema.clj:69:
Consider using:
  (pos? (count password))
instead of:
  (> (count password) 0)
                clojure.lang.ExceptionInfo: Conversion = '"'
    data: {:file "/tmp/boot.user1810821670888925417.clj", :line 53}
java.util.UnknownFormatConversionException: Conversion = '"'
    conversion: "\""
                                                           ...
                              clojure.core/format/invokeStatic        core.clj: 5533
                                           clojure.core/format        core.clj: 5527
                                                           ...
                               clojure.core/apply/invokeStatic        core.clj:  646
                                            clojure.core/apply        core.clj:  641
                                              boot.util/print*        util.clj:   54
                                                boot.util/warn        util.clj:   90
                                                           ...
                                    pod$eval37838.invokeStatic  NO_SOURCE_FILE
                                          pod$eval37838.invoke  NO_SOURCE_FILE
                                                           ...
                                clojure.core/eval/invokeStatic        core.clj: 3105
                                             clojure.core/eval        core.clj: 3101
                                             boot.pod/eval-in*         pod.clj:  437
                                                           ...
                                             boot.pod/eval-in*         pod.clj:  440
                     tolitius.checker.kibit/check/invokeStatic       kibit.clj:   17
                                  tolitius.checker.kibit/check       kibit.clj:   10
                                                           ...
                      tolitius.boot-check/eval2959/fn/fn/fn/fn  boot_check.clj:   40
                   tolitius.boot-check/with-throw/invokeStatic  boot_check.clj:   25
                                tolitius.boot-check/with-throw  boot_check.clj:   24
                         tolitius.boot-check/eval2959/fn/fn/fn  boot_check.clj:   40
environ.boot/eval2540/fn/environ-middleware/environ-handler/fn        boot.clj:   39
                      clojure.core/with-redefs-fn/invokeStatic        core.clj: 7216
                                   clojure.core/with-redefs-fn        core.clj: 7200
   environ.boot/eval2540/fn/environ-middleware/environ-handler        boot.clj:   38
environ.boot/eval2540/fn/environ-middleware/environ-handler/fn        boot.clj:   39
                      clojure.core/with-redefs-fn/invokeStatic        core.clj: 7216
                                   clojure.core/with-redefs-fn        core.clj: 7200
   environ.boot/eval2540/fn/environ-middleware/environ-handler        boot.clj:   38
                                           boot.core/run-tasks        core.clj:  938
                                             boot.core/boot/fn        core.clj:  948
                           clojure.core/binding-conveyor-fn/fn        core.clj: 1938
                                                           ...
local~/src/clojure/bilby (master *>)$

https://www.facebook.com/n/?login%2F&medium=email&mid=548bc76c4720bG5c2c1f9cG548bcc05a74ddG7b&bcode=1.1487350399.Abk328o3McKMKmNg&n_m=michieljoris%40gmail.com&lloc=login

* boot show -p
  [✔] cheshire
    ✔ 5.7.0
      cheshire
    ✘ 5.5.0
      cljs-ajax
      ring/ring-json
[!] clj-stacktrace
    ✔ 0.2.8
      ring
    ✘ 0.2.7
      ring.middleware.conditional
[✔] clj-time
    ✔ 0.13.0
      clj-time
    ✘ 0.11.0
      bidi
      ring
      ring/ring-defaults
    ✘ 0.9.0
      ring-cors
      ring/ring-json
    ✘ 0.6.0
      ring.middleware.conditional
[!] commons-codec
    ✔ 1.10
      cljs-ajax
      cljs-http
      crypto-password
      org.omcljs/om
    ✘ 1.6
      bidi
      ring
      ring-cors
      ring.middleware.conditional
      ring/ring-defaults
      ring/ring-json
[!] commons-fileupload
    ✔ 1.3.1
      bidi
      ring
      ring-cors
      ring/ring-defaults
      ring/ring-json
    ✘ 1.3
      ring.middleware.conditional
[!] commons-io
    ✔ 2.5
      bidi
      ring
      ring/ring-defaults
    ✘ 2.4
      ring-cors
      ring.middleware.conditional
      ring/ring-json
[✔] http-kit
    ✔ 2.2.0
      http-kit
      binaryage/dirac
    ✘ 2.1.18
      weasel
[!] joda-time
    ✔ 2.9.7
      clj-time
    ✘ 2.8.2
      bidi
      ring
      ring/ring-defaults
    ✘ 2.6
      ring-cors
      ring/ring-json
    ✘ 2.2
      ring.middleware.conditional
[!] ns-tracker
    ✔ 0.3.0
      ring
    ✘ 0.2.2
      ring.middleware.conditional
[✔] ring
    ✔ 1.5.1
      ring
    ✘ 1.3.1
      ring.middleware.conditional
[✔] sablono
    ✔ 0.7.7
      sablono
    ✘ 0.7.4
      devcards
[✔] binaryage/devtools
    ✔ 0.9.0
      binaryage/devtools
    ✘ 0.8.1
      print-foo-cljs
[✔] cljsjs/react-dom
    ✔ 15.4.2-2
      cljsjs/react-dom
    ✘ 15.3.1-0
      devcards
      org.omcljs/om
[!] com.cognitect/transit-clj
    ✔ 0.8.290
      org.omcljs/om
    ✘ 0.8.285
      cljs-ajax
[!] com.cognitect/transit-java
    ✔ 0.8.316
      org.omcljs/om
    ✘ 0.8.311
      cljs-ajax
[!] com.fasterxml.jackson.core/jackson-core
    ✔ 2.8.6
      cheshire
    ✘ 2.5.3
      cljs-ajax
      ring/ring-json
    ✘ 2.3.2
      org.omcljs/om
[!] com.fasterxml.jackson.dataformat/jackson-dataformat-cbor
    ✔ 2.8.6
      cheshire
    ✘ 2.5.3
      cljs-ajax
      ring/ring-json
[!] com.fasterxml.jackson.dataformat/jackson-dataformat-smile
    ✔ 2.8.6
      cheshire
    ✘ 2.5.3
      cljs-ajax
      ring/ring-json
[✔] com.taoensso/encore
    ✔ 2.88.2
      com.taoensso/encore
    ✘ 2.88.0
      com.taoensso/timbre
    ✘ 2.84.2
      com.taoensso/sente
    ✘ 2.4.2
      ring-logger-timbre
[✔] com.taoensso/timbre
    ✔ 4.8.0
      com.taoensso/timbre
    ✘ 4.7.4
      com.taoensso/sente
    ✘ 4.1.1
      ring-logger-timbre
[✔] io.aviso/pretty
    ✔ 0.1.33
      com.taoensso/timbre
      io.aviso/pretty
    ✘ 0.1.30
      com.taoensso/sente
    ✘ 0.1.24
      eftest
    ✘ 0.1.18
      ring-logger-timbre
[✔] org.clojure/clojure
    ✔ 1.8.0
      cljs-http
      cljs-react-material-ui
      devcards
      markdown-clj
      print-foo-cljs
      ring-cors
      sablono
      yesql
      org.clojure/clojure
      org.clojure/clojurescript
    ✘ 1.7.0
      cljs-ajax
      eftest
      com.andrewmcveigh/cljs-time
      com.layerware/hugsql
      org.clojure/test.check
    ✘ 1.6.0
      aprint
      ring-logger-timbre
      ring.middleware.conditional
      clojure.jdbc/clojure.jdbc-c3p0
      com.cognitect/transit-cljs
      org.omcljs/om
    ✘ 1.5.1
      cheshire
      crypto-password
      jansi-clj
      ring
      com.taoensso/encore
      com.taoensso/sente
      com.taoensso/timbre
      org.clojure/core.async
      ring/ring-defaults
      ring/ring-json
    ✘ 1.5.0
      io.aviso/pretty
    ✘ 1.4.0
      slamhound
      binaryage/dirac
      deraen/boot-ctn
      org.clojure/data.csv
      org.clojure/data.json
      org.clojure/java.jdbc
      samestep/boot-refresh
    ✘ 1.2.0
      org.clojure/tools.nrepl
[✔] org.clojure/clojurescript
    ✔ 1.9.293
      org.clojure/clojurescript
    ✘ 1.8.40
      cljs-react-material-ui
[✔] org.clojure/core.async
    ✔ 0.2.395
      binaryage/dirac
      com.taoensso/sente
      org.clojure/core.async
    ✘ 0.2.391
      cljs-http
      devcards
[!] org.clojure/google-closure-library
    ✔ 0.0-20160609-f42b4a24
      org.clojure/clojurescript
    ✘ 0.0-20151016-61277aea
      cljs-react-material-ui
[!] org.clojure/google-closure-library-third-party
    ✔ 0.0-20160609-f42b4a24
      org.clojure/clojurescript
    ✘ 0.0-20151016-61277aea
      cljs-react-material-ui
[✔] org.clojure/java.jdbc
    ✔ 0.6.1
      org.clojure/java.jdbc
    ✘ 0.5.8
      yesql
      com.layerware/hugsql
[!] org.clojure/tools.namespace
    ✔ 0.2.11
      eftest
      deraen/boot-ctn
      samestep/boot-refresh
    ✘ 0.2.10
      ring
    ✘ 0.2.4
      ring.middleware.conditional
[!] org.clojure/tools.reader
    ✔ 1.0.0-beta3
      org.clojure/clojurescript
    ✘ 1.0.0-beta2
      cljs-http
      binaryage/dirac
    ✘ 1.0.0-alpha3
      cljs-react-material-ui
    ✘ 0.10.0
      com.layerware/hugsql
      com.taoensso/encore
      com.taoensso/sente
      com.taoensso/timbre
    ✘ 0.9.2
      ring-logger-timbre
    ✘ 0.9.1
      ring
      ring-cors
      ring/ring-defaults
      ring/ring-json
    ✘ 0.8.1
      ring.middleware.conditional
[!] org.eclipse.jetty/jetty-http
    ✔ 9.2.10.v20150310
      ring
    ✘ 7.6.13.v20130916
      ring.middleware.conditional
[!] org.eclipse.jetty/jetty-io
    ✔ 9.2.10.v20150310
      ring
    ✘ 7.6.13.v20130916
      ring.middleware.conditional
[!] org.eclipse.jetty/jetty-server
    ✔ 9.2.10.v20150310
      ring
    ✘ 7.6.13.v20130916
      ring.middleware.conditional
[!] org.eclipse.jetty/jetty-util
    ✔ 9.2.10.v20150310
      ring
    ✘ 7.6.13.v20130916
      ring.middleware.conditional
[!] org.msgpack/msgpack
    ✔ 0.6.12
      org.omcljs/om
    ✘ 0.6.10
      cljs-ajax
[✔] prismatic/schema
    ✔ 1.1.3
      bidi
      prismatic/schema
    ✘ 0.4.2
      juxt/iota
[!] ring/ring-codec
    ✔ 1.0.1
      bidi
      ring
      ring/ring-defaults
    ✘ 1.0.0
      ring-cors
      ring.middleware.conditional
      ring/ring-json
[!] ring/ring-core
    ✘ 1.5.1
      ring
      ring/ring-defaults
    ✔ 1.5.0
      bidi
    ✘ 1.4.0
      ring-cors
      ring/ring-json
    ✘ 1.3.1
      ring.middleware.conditional
[!] ring/ring-devel
    ✔ 1.5.1
      ring
    ✘ 1.3.1
      ring.middleware.conditional
[!] ring/ring-jetty-adapter
    ✔ 1.5.1
      ring
    ✘ 1.3.1
      ring.middleware.conditional
[!] ring/ring-servlet
    ✔ 1.5.1
      ring
    ✘ 1.3.1
      ring.middleware.conditional

* boot show -d
  [adzerk/boot-cljs-repl "0.3.3" :scope "test"]
[adzerk/boot-cljs "1.7.228-2" :scope "test"]
[adzerk/boot-reload "0.5.0" :scope "test"]
[adzerk/boot-test "1.2.0" :scope "test"]
[aprint "0.1.3"]
├── [jline "2.12"]
└── [myguidingstar/clansi "1.3.0"]
[bidi "2.0.16"]
└── [ring/ring-core "1.5.0" :exclusions [[org.clojure/tools.reader] [org.clojure/clojure]]]
    ├── [commons-fileupload "1.3.1"]
    ├── [commons-io "2.5"]
    └── [ring/ring-codec "1.0.1"]
[binaryage/devtools "0.9.0" :scope "test" :exclusions [[org/clojure/tools.cli]]]
└── [binaryage/env-config "0.1.1" :scope "test"]
[binaryage/dirac "1.0.0" :scope "test" :exclusions [[org/clojure/tools.cli]]]
├── [binaryage/oops "0.5.2" :scope "test"]
│   └── [environ "1.1.0" :scope "test"]
├── [clansi "1.0.0" :scope "test"]
├── [org.clojure/tools.cli "0.3.5" :scope "test"]
├── [org.clojure/tools.logging "0.3.1"]
└── [version-clj "0.1.2" :scope "test"]
[boot-environ "1.1.0"]
[cheshire "5.7.0"]
├── [com.fasterxml.jackson.core/jackson-core "2.8.6"]
├── [com.fasterxml.jackson.dataformat/jackson-dataformat-cbor "2.8.6"]
├── [com.fasterxml.jackson.dataformat/jackson-dataformat-smile "2.8.6"]
└── [tigris "0.1.1"]
[clj-time "0.13.0"]
└── [joda-time "2.9.7"]
[cljs-ajax "0.5.8"]
├── [net.colourcoding/poppea "0.2.1"]
├── [org.apache.httpcomponents/httpasyncclient "4.1.1"]
│   ├── [commons-logging "1.2"]
│   ├── [org.apache.httpcomponents/httpclient "4.5.1"]
│   └── [org.apache.httpcomponents/httpcore-nio "4.4.4"]
└── [org.apache.httpcomponents/httpcore "4.4.4"]
[cljs-http "0.1.42"]
└── [noencore "0.3.3"]
[cljs-react-material-ui "0.2.37" :exclusions [[cljsjs/react-dom] [cljsjs/react]]]
├── [camel-snake-kebab "0.4.0"]
└── [cljsjs/material-ui "0.16.7-0"]
[cljsjs/dragula "3.6.8-0" :exclusions [[cljsjs/react]]]
[cljsjs/enquire "2.1.2-0"]
[cljsjs/moment "2.17.1-0"]
[cljsjs/react-dom "15.4.2-2" :exclusions [[cljsjs/react]]]
[cljsjs/react-with-addons "15.4.2-2"]
[clojure-complete "0.2.4" :exclusions [[org.clojure/clojure]]]
[clojure.jdbc/clojure.jdbc-c3p0 "0.3.2"]
└── [com.mchange/c3p0 "0.9.5-pre9"]
    └── [com.mchange/mchange-commons-java "0.2.8"]
[com.andrewmcveigh/cljs-time "0.4.0"]
[com.cemerick/piggieback "0.2.1" :scope "test" :exclusions [[org.clojure/clojure] [org.clojure/clojurescript] [org.clojure/tools.nrepl]]]
[com.cognitect/transit-cljs "0.8.239"]
└── [com.cognitect/transit-js "0.8.846"]
[com.layerware/hugsql "0.4.7"]
├── [com.layerware/hugsql-adapter-clojure-java-jdbc "0.4.7"]
└── [com.layerware/hugsql-core "0.4.7"]
    └── [com.layerware/hugsql-adapter "0.4.7"]
[com.taoensso/encore "2.88.2"]
└── [com.taoensso/truss "1.3.6"]
[com.taoensso/sente "1.11.0"]
[com.taoensso/timbre "4.8.0"]
[crisptrutski/boot-cljs-test "0.3.0" :scope "test"]
[crypto-password "0.2.0"]
├── [com.lambdaworks/scrypt "1.4.0"]
├── [commons-codec "1.10"]
├── [crypto-equality "1.0.0"]
├── [crypto-random "1.2.0"]
└── [org.mindrot/jbcrypt "0.3m"]
[datascript "0.15.5"]
[deraen/boot-ctn "0.1.0" :scope "test"]
[devcards "0.2.2" :scope "test" :exclusions [[org.clojure/clojurescript] [cljsjs/react]]]
├── [cljs-react-reload "0.1.1" :scope "test"]
└── [cljsjs/showdown "0.4.0-1" :scope "test"]
[eftest "0.1.2" :scope "test"]
├── [mvxcvi/puget "1.0.0" :scope "test"]
│   ├── [fipp "0.6.3" :scope "test"]
│   │   └── [org.clojure/core.rrb-vector "0.0.11" :scope "test"]
│   └── [mvxcvi/arrangement "1.0.0" :scope "test"]
└── [progrock "0.1.1" :scope "test"]
[funcool/cuerdas "2.0.2"]
[garden "1.3.2"]
└── [com.yahoo.platform.yui/yuicompressor "2.4.8" :exclusions [[rhino/js]]]
[http-kit "2.2.0"]
[io.aviso/pretty "0.1.33" :scope "test"]
[jansi-clj "0.1.0"]
└── [org.fusesource.jansi/jansi "1.11"]
[jeluard/boot-notify "0.2.1" :scope "test"]
[juxt/iota "0.2.3" :scope "test"]
[markdown-clj "0.9.92"]
[mathias/boot-sassc "0.1.5"]
[metosin/boot-alt-test "0.3.0" :scope "test"]
[mount "0.1.11"]
[mysql/mysql-connector-java "5.1.40"]
[onetom/boot-lein-generate "0.1.3" :scope "test"]
[org.clojars.scizo/boot-cljs-devtools "0.1.1-20160804.212053-2" :scope "test" :exclusions [[org/clojure/tools.cli]]]
[org.clojure/clojure "1.8.0"]
[org.clojure/clojurescript "1.9.293"]
├── [com.google.javascript/closure-compiler-unshaded "v20160911"]
│   ├── [args4j "2.0.26"]
│   ├── [com.google.code.findbugs/jsr305 "1.3.9"]
│   ├── [com.google.code.gson/gson "2.2.4"]
│   ├── [com.google.guava/guava "19.0"]
│   ├── [com.google.javascript/closure-compiler-externs "v20160911"]
│   ├── [com.google.jsinterop/jsinterop-annotations "1.0.0"]
│   └── [com.google.protobuf/protobuf-java "2.5.0"]
├── [org.clojure/data.json "0.2.6"]
├── [org.clojure/google-closure-library "0.0-20160609-f42b4a24"]
│   └── [org.clojure/google-closure-library-third-party "0.0-20160609-f42b4a24"]
├── [org.clojure/tools.reader "1.0.0-beta3"]
└── [org.mozilla/rhino "1.7R5"]
[org.clojure/core.async "0.2.395" :exclusions [[org.clojure/tools.reader]]]
└── [org.clojure/tools.analyzer.jvm "0.6.10"]
    ├── [org.clojure/core.memoize "0.5.9"]
    │   └── [org.clojure/core.cache "0.6.5"]
    │       └── [org.clojure/data.priority-map "0.0.7"]
    ├── [org.clojure/tools.analyzer "0.6.9"]
    └── [org.ow2.asm/asm-all "4.2"]
[org.clojure/data.csv "0.1.3"]
[org.clojure/data.json "0.2.6" :classifier "aot" :scope "provided"]
[org.clojure/java.jdbc "0.6.1"]
[org.clojure/test.check "0.9.0" :scope "test"]
[org.clojure/tools.nrepl "0.2.12" :scope "test"]
[org.martinklepsch/boot-garden "1.3.2-0"]
[org.omcljs/om "1.0.0-alpha48" :exclusions [[cljsjs/react]]]
└── [com.cognitect/transit-clj "0.8.290"]
    └── [com.cognitect/transit-java "0.8.316"]
        └── [org.msgpack/msgpack "0.6.12"]
            ├── [com.googlecode.json-simple/json-simple "1.1.1" :exclusions [[junit]]]
            └── [org.javassist/javassist "3.18.1-GA"]
[powerlaces/boot-cljs-devtools "0.1.2" :scope "test" :exclusions [[org/clojure/tools.cli]]]
[print-foo-cljs "2.0.3"]
[prismatic/schema "1.1.3"]
[ring-cors "0.1.9"]
[ring-logger-timbre "0.7.5"]
└── [ring-logger "0.7.5"]
    └── [org.clojars.pjlegato/clansi "1.3.0"]
[ring.middleware.conditional "0.2.0"]
[ring/ring-defaults "0.2.2"]
├── [javax.servlet/servlet-api "2.5"]
├── [ring/ring-anti-forgery "1.0.1"]
├── [ring/ring-headers "0.2.0"]
└── [ring/ring-ssl "0.2.1"]
[ring/ring-json "0.4.0"]
[ring "1.5.1"]
├── [ring/ring-devel "1.5.1"]
│   ├── [clj-stacktrace "0.2.8"]
│   ├── [hiccup "1.0.5"]
│   └── [ns-tracker "0.3.0"]
│       └── [org.clojure/java.classpath "0.2.2"]
├── [ring/ring-jetty-adapter "1.5.1"]
│   └── [org.eclipse.jetty/jetty-server "9.2.10.v20150310"]
│       ├── [javax.servlet/javax.servlet-api "3.1.0"]
│       ├── [org.eclipse.jetty/jetty-http "9.2.10.v20150310"]
│       │   └── [org.eclipse.jetty/jetty-util "9.2.10.v20150310"]
│       └── [org.eclipse.jetty/jetty-io "9.2.10.v20150310"]
└── [ring/ring-servlet "1.5.1"]
[robert/hooke "1.3.0"]
[sablono "0.7.7"]
[samestep/boot-refresh "0.1.0" :scope "test"]
└── [org.clojure/tools.namespace "0.2.11"]
[slamhound "1.5.5"]
[tolitius/boot-check "0.1.4" :scope "test"]
└── [boot/core "2.6.0" :scope "test"]
    └── [boot/pod "2.6.0" :scope "test"]
        ├── [org.projectodd.shimdandy/shimdandy-impl "1.2.0" :scope "test"]
        └── [org.tcrawley/dynapath "0.2.3" :scope "test"]
[weasel "0.7.0" :scope "test" :exclusions [[org.clojure/clojure] [org.clojure/clojurescript]]]
[yesql "0.5.3"]
└── [instaparse "1.4.1" :exclusions [[org.clojure/clojure]]]

 (header resp "Content-Encoding" "gzip") => {:status 404, :headers {"Content-Type" "text/plain; charset=utf-8", "Set-Cookie" ("ring-session=8RfRX6rimjm8F68cW1nxnD%2B3445dSKM2a3x%2FH3QGs9diAA6l1ZwE%2FQnHPZWzhVRx%2FvQVQHQdhIcwswqc%2ByEKC63gm675Z5ET9XZ9knkz4%2BmjeJjcArqJFCxEpoHUneZMhUcVOYCdF6sufzqzp80VanIUV0TGmt39tSa6%2BHHvnsCXORvhNOK0QsUXoNpyx9fToEU4w4Y1n6mp1qlOvI070Q%3D%3D--cnNFVVzmB545yujSvRAvsxkMe%2FdBtZjcpnB4eroEELE%3D;Path=/;HttpOnly"), "X-XSS-Protection" "1; mode=block", "X-Frame-Options" "SAMEORIGIN", "X-Content-Type-Options" "nosniff", "Content-Encoding" "gzip"}, :body "not found!"}

* RFC
  RFC:

Before diving into trying to make sense of yaml in clojure, is it an idea to decouple jobs completely from rails?

Since jobs are essentially work triggered by events, can we not just monitor the database, either though mysql triggers or polling, and design rules that execute code if certain 'rules' match?

The problem would shift to design and creation of these 'rules'.  Basically creating a ifttt system.

For instance, on creation of an invitation the rule would be:

If new record in invitation send invitation email to linked contact.

So you need an 'event' such as
 (on-new-record table) => record
and an 'action/job' such as
(send-email (:user-id record) "You got an invitation!!")
And an if construct that pumps output of event to input of action.

Changing status or comment replies could be handled the same way.

Initially these rules could be written in clojure, later on some kind of ui could be designed to put these clojure expressions together. Or at least the more straightforward kind of rules.

You'd want a 'rules' database.

Some of these rules might be frontend concern only. For instance a rule that says:

if in a checklist of a certain template for a certain user or group this question  gets answered yes, show answers with these ids or from this category, else hide them.

So no attaching rules directly to questions and templates. Templates get shared and different people/groups would like to use different rules perhaps.

I'm just wondering how many features/problems could be covered by properly implementing a rules database plus execution mechanism/engine, and eventually a ui to edit/create these rules. It might be possible to kill more than one bird with this, like ifttt, workflow, alerts.

I've built something before when I was playing with couchdb where work would happen triggered by database events, the decoupling of crud code and event handling code is really nice.

You could get rid of jobs in rails , making it a more of a plain crud api, or at least simplifying it and isolating 'if event then action/job' functionality.

Jacob's adding of location to login even could easily be a rule for instance as well.

(if login-event (set-location-from-ip  login-event-record)

or

(if failed-login-event (send-email (:user failed-login-event-record) "Failed login attempt!"))

This rule could be per group/user/global etc.

Once you've got our events and actions and conditions, possibilities are endless.

You can write these actions/jobs in clojure . Like (set-location-from ip record) and implement some kind of priority queue if execution engine gets overworked.

* scratch 2
I think a loop and a hierarchy of one way data flow, like in om-next or flux is always easier to reason about than a back and forth, like with two way binding, or direct communication between components using a channel, which is where people get into trouble quickly i think. I mentioned it before, but there's just no need for callbacks, other than the send to the server function., almost no need for direct communication between components For all practical purposes the whole app is a function of the app-state. Which can be modified by user transactions and data coming in from the server.



* merge supergroups with templates:


renamed    src-bilby/clj/bilby/database/build_sql.cljc -> src-bilby/clj/bilby/database/build_sql.clj
renamed    src-bilby/clj/bilby/database/clauses.cljc -> src-bilby/clj/bilby/database/clauses.clj
renamed    src-bilby/clj/bilby/database/inspect.cljc -> src-bilby/clj/bilby/database/inspect.clj
renamed    src-bilby/clj/bilby/database/process_params.cljc -> src-bilby/clj/bilby/database/process_params.clj
renamed    src-bilby/clj/bilby/database/process_result.cljc -> src-bilby/clj/bilby/database/process_result.clj
renamed    src-bilby/clj/bilby/database/queries.cljc -> src-bilby/clj/bilby/database/queries.clj
renamed    src-bilby/clj/bilby/database/query.cljc -> src-bilby/clj/bilby/database/query.clj
renamed    src-bilby/clj/bilby/database/schema.cljc -> src-bilby/clj/bilby/database/schema.clj
renamed    src-bilby/clj/bilby/database/validate/core.cljc -> src-bilby/clj/bilby/database/validate/core.clj
renamed    src-bilby/clj/bilby/database/validate/rules.cljc -> src-bilby/clj/bilby/database/validate/rules.clj
renamed    src-bilby/clj/bilby/database/validate_sql_fun.cljc -> src-bilby/clj/bilby/database/validate_sql_fun.clj
renamed    src-bilby/clj/bilby/parser.cljc -> src-bilby/clj/bilby/parser.clj
renamed    src-bilby/clj/bilby/parser/mutate.cljc -> src-bilby/clj/bilby/parser/mutate.clj
renamed    src-bilby/clj/bilby/parser/read.cljc -> src-bilby/clj/bilby/parser/read.clj
renamed    src-bilby/clj/bilby/security.cljc -> src-bilby/clj/bilby/security.clj
renamed    src-bilby/clj/bilby/test/fixtures.cljc -> src-bilby/clj/bilby/test/fixtures.clj
renamed    src-bilby/clj/bilby/test/iota.cljc -> src-bilby/clj/bilby/test/iota.clj
renamed    src/clj/app/parser_config.cljc -> src/clj/app/parser_config.clj
renamed    src/clj/app/security.cljc -> src/clj/app/security.clj
renamed    src/clj/database/config.cljc -> src/clj/database/config.clj
renamed    src/clj/database/connection.cljc -> src/clj/database/connection.clj
renamed    src/clj/event_store/create.cljc -> src/clj/event_store/create.clj
renamed    src/clj/parser/core.cljc -> src/clj/parser/core.clj
renamed    src/clj/parser/mutate.cljc -> src/clj/parser/mutate.clj
renamed    src/clj/parser/read.cljc -> src/clj/parser/read.clj
renamed    src/clj/websockets/dispatcher.cljc -> src/clj/websockets/dispatcher.clj
renamed    test-bilby/clj/bilby/database/clauses_test.cljc -> test-bilby/clj/bilby/database/clauses_test.clj
renamed    test-bilby/clj/bilby/database/inspect_test.cljc -> test-bilby/clj/bilby/database/inspect_test.clj

Auto-merging version
RESOLVED CONFLICT (content): Merge conflict in version
Removing test/cljs/reconciler/translations_test.cljs
Removing test/cljs/components/cmp_test_fix.cljs
Auto-merging test/clj/alerts/workflow_test.clj
Auto-merging test/clj/alerts/reports/email/core_test.clj
Auto-merging test/clj/alerts/actions/processor_test.clj
Auto-merging test-bilby/cljs/bilby/reconciler/parser/mutate_test.cljs
Auto-merging test-bilby/cljs/bilby/reconciler/core_test.cljs
Removing test-bilby/clj/bilby/run_all_tests.clj
Auto-merging test-bilby/clj/bilby/parser/read_test.clj
Auto-merging test-bilby/clj/bilby/parser/read_params_test.clj
RESOLVED CONFLICT (content): Merge conflict in test-bilby/clj/bilby/parser/read_params_test.clj
Auto-merging test-bilby/clj/bilby/parser/read_normalize_test.clj
Auto-merging test-bilby/clj/bilby/database/clauses_test.clj
Auto-merging src/garden-css/styles.clj
Auto-merging src/cljs/websocket/dispatcher.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/websocket/dispatcher.cljs
Removing src/cljs/test.cljs.edn
Auto-merging src/cljs/reconciler/parser/read.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/reconciler/parser/read.cljs
Auto-merging src/cljs/reconciler/parser/mutate_dossier_type.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/reconciler/parser/mutate_dossier_type.cljs
Auto-merging src/cljs/reconciler/parser/mutate.cljs
Auto-merging src/cljs/reconciler/parser/is_dirty.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/reconciler/parser/is_dirty.cljs
Auto-merging src/cljs/reconciler/core.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/reconciler/core.cljs
Auto-merging src/cljs/reconciler/app_state.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/reconciler/app_state.cljs
Removing src/cljs/digicheck/util/session_storage.cljs
Auto-merging src/cljs/components/users/page.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/users/page.cljs
Auto-merging src/cljs/components/toolbar.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/toolbar.cljs
Auto-merging src/cljs/components/text_input.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/text_input.cljs
Auto-merging src/cljs/components/search_box.cljs
Auto-merging src/cljs/components/root_component.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/root_component.cljs
Auto-merging src/cljs/components/page_bar.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/page_bar.cljs
Auto-merging src/cljs/components/misc.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/misc.cljs
Auto-merging src/cljs/components/login_screen.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/login_screen.cljs
Auto-merging src/cljs/components/label_value_row.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/label_value_row.cljs
Auto-merging src/cljs/components/hover_input.cljs
Auto-merging src/cljs/components/groups/page.cljs
Auto-merging src/cljs/components/dossier_types/selection.cljs
Auto-merging src/cljs/components/dossier_types/page.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/dossier_types/page.cljs
Auto-merging src/cljs/components/dossier_types/form.cljs
Auto-merging src/cljs/components/app_bar.cljs
RESOLVED CONFLICT (add/add): Merge conflict in src/cljs/components/app_bar.cljs
Auto-merging src/cljs/app/util.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/app/util.cljs
Auto-merging src/cljs/app/security.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/app/security.cljs
Auto-merging src/cljs/app/core.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/app/core.cljs
Auto-merging src/cljs/app/config.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/app/config.cljs
Auto-merging src/cljs/admin_new/dev.cljs.edn
Auto-merging src/cljc/common/util.cljc
RESOLVED CONFLICT (content): Merge conflict in src/cljc/common/util.cljc
Auto-merging src/cljc/common/i18n.cljc
Auto-merging src/clj/websockets/core.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/websockets/core.clj
Auto-merging src-dev/cljs/debug/mutate.cljs
RESOLVED CONFLICT (content): Merge conflict in src-dev/cljs/debug/mutate.cljs
Auto-merging src-dev/cljs/debug/core.cljs
RESOLVED CONFLICT (content): Merge conflict in src-dev/cljs/debug/core.cljs

RESOLVED CONFLICT (modify/delete): src-dev/cljs/debug/require_test_namespaces.cljs
deleted in supergroups-no-cljc and modified in HEAD. Version HEAD of
src-dev/cljs/debug/require_test_namespaces.cljs left in tree.

Auto-merging src-bilby/cljs/bilby/components/data_explorer.cljs
RESOLVED CONFLICT (add/add): Merge conflict in src-bilby/cljs/bilby/components/data_explorer.cljs
RESOLVED CONFLICT (modify/delete): src/cljs/components/data_explorer.cljs deleted in HEAD and modified in supergroups-no-cljc. Version supergroups-no-cljc of src/cljs/components/data_explorer.cljs left in tree.

Auto-merging test-bilby/clj/fixtures/core.clj
RESOLVED ????? CONFLICT (content): Merge conflict in test-bilby/clj/fixtures/core.clj

Auto-merging src/cljs/components/helpers/defcmp_generic_functions.cljs
RESOLVED CONFLICT (content): Merge conflict in src/cljs/components/helpers/defcmp_generic_functions.cljs

Auto-merging src/clj/websockets/dispatcher.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/websockets/dispatcher.clj

Auto-merging src/clj/web_server/handler.clj
Auto-merging src/clj/parser/mutate.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/parser/mutate.clj
Auto-merging src/clj/parser/core.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/parser/core.clj
Removing src/clj/database/validate.clj
Auto-merging src-bilby/cljs/bilby/test/helpers.cljs
Auto-merging src-bilby/cljs/bilby/reconciler/parser/read.cljc
NOT TOTALLY RESOLVED CONFLICT (content): Merge conflict in src-bilby/cljs/bilby/reconciler/parser/read.cljc
Auto-merging src-bilby/cljs/bilby/reconciler/parser/mutate_record.cljs
RESOLVED CONFLICT (content): Merge conflict in src-bilby/cljs/bilby/reconciler/parser/mutate_record.cljs
Auto-merging src-bilby/cljs/bilby/reconciler/parser/mutate.cljs
Auto-merging src-bilby/cljs/bilby/reconciler/migrate.cljc
Auto-merging src-bilby/cljs/bilby/reconciler/core.cljs
RESOLVED CONFLICT (content): Merge conflict in src-bilby/cljs/bilby/reconciler/core.cljs
Auto-merging src-bilby/clj/bilby/parser/read.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/parser/read.clj
Auto-merging src-bilby/clj/bilby/database/query.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/database/query.clj
Auto-merging src-dev/clj/dev.clj
RESOLVED CONFLICT (content): Merge conflict in src-dev/clj/dev.clj
Auto-merging src-bilby/cljs/bilby/util.cljc
RESOLVED CONFLICT (content): Merge conflict in src-bilby/cljs/bilby/util.cljc
Auto-merging src-bilby/clj/bilby/parser/mutate.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/parser/mutate.clj
Auto-merging src-bilby/clj/bilby/parser.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/parser.clj
Removing src-bilby/clj/bilby/database/validate.clj
Auto-merging src-bilby/clj/bilby/database/queries.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/database/queries.clj
Auto-merging src-bilby/clj/bilby/database/inspect.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/database/inspect.clj
Auto-merging src-bilby/clj/bilby/database/hug.sql
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/database/hug.sql
Auto-merging src-bilby/clj/bilby/database/clauses.clj
RESOLVED CONFLICT (content): Merge conflict in src-bilby/clj/bilby/database/clauses.clj
Auto-merging git-deps.edn
RESOLVED CONFLICT (content): Merge conflict in git-deps.edn
Auto-merging build.boot
RESOLVED CONFLICT (content): Merge conflict in build.boot
Auto-merging bin/install-git-deps.sh
RESOLVED CONFLICT (content): Merge conflict in bin/install-git-deps.sh
Auto-merging bin/boot-dev-with-git-checkouts.sh
RESOLVED CONFLICT (content): Merge conflict in bin/boot-dev-with-git-checkouts.sh
Automatic merge failed; fix conflicts and then commit the result.
Auto-merging src/clj/database/connection.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/database/connection.clj
Auto-merging src/clj/database/config.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/database/config.clj
Auto-merging src/clj/app/logging.clj
Auto-merging src/clj/app/config.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/app/config.clj
Auto-merging src/clj/alerts/reports/email/elements.clj
RESOLVED CONFLICT (content): Merge conflict in src/clj/alerts/reports/email/elements.clj



* roadmap (on wiki at bilby repo)
- future release
-- undelete dossiers/checklists/answer util for superadmin
-- user management for billing purposes
-- count number of user actief/inaktief
-- label or different color for inacive user
-- different color for or option to hide inactive fields in dossier types
-- when uploading logo restrict size, or resize automatically to for example max of 640x480
   which takes up almost half of page
-- As DC superadmin we might want the option to add/remove groups to supergroups as well.
-- implement state in url.
And history etc, back/forward button.
-- Fix legacy default statuses in DC
- release 0.8.0
-- per group theming for apps
-- per group pdf and overview logos
- release 0.7.0
-- linking of templates to users to admin, but link templates to t&t (jacob)
-- per group translations  (michiel)
- release 0.6.0
-- sync up of templates branch with main release branch (michiel)
- release 0.5.0
-- supergroups

* standup 19-6
  -we've got a reusable up/donwload functionality
 - moved on to fixing up maintenance release
 - wanna merge supergroups with release_master, but after dashboard or?
 - need to have PR reviewed about commas and dots in statuses, Jacob?
 - am I still interviewing on Wednesday with Lucas?
 - going to school with Julie to have meeting there at 12.
 - lot happening last few weeks here so things moving a bit slower, but
   steadily making progress still.

* standup 3-7-18
- Fixed translation issues on Friday. SHould have no more problems
- Fixed from master, so some merge conflicts integrating that into the various
  other branches, but all up to date now.
- Listing keys in app now, so we don't have to use full keys/translations in
  app. Plus on git diff/PR we'll see what new keys have been added. Get a
  warning in red in console if key is not listed. Or if a proper locale isn't passed in
- Gotta work out undo/redo, doesn't work smoothly
- Ran into some things on Friday, carried them over to translation branch
-

**** Bilby translations for backend
**** Chin translations for backend

**** Translations are not fetched when not logged in!!!!
* standup 12-7-18
- Bring branches up to latest release_master
- Get translation branch ready for deploy to staging.
-
- Deploy translation branch of chinchilla
- Other part is, understand from Lucas he wants legacy statuses resolved
I'll summarize what I've got with the issue I think Jacob made, and I can work
on that before going on with templates editor.
* standup 31-7-18
- got migration that fixes mistakes
- need more complete db to test
- might make a 'just report' flag.
- adapted chinchilla
- already using keys for statuses in bilby,
can extend that to use in chin as well.
- what's the rationale for creating a statues table
- bilby workshop

 *
Stadsdeel Nieuw West
Dossier is weg
Vandaag 5-10 
Olo dossiers eronder
Slotermeerlaan 103 
Speranza de Jong
* standup 16-10-18
- studied clojure spec, once more, made summary. Will put on wiki..
- using transcriptor, by alex miller
- db->tree adapted it to also calculate minimal remote
- app is working again, mostly, using refactored read of parser
 cleaned up one 'attic'. Is consistent now and you can reason about it more easily. 
- to get count of things need to adapt backend parser somewhat. do query twice,
  once for data, once for count, when requested, and then sheperd that data to
  the frontend somehow
- look into migration to have templates per group
- applying refactored read to templates page, so setting up queries properly and
  on demand load. templates load categories load questions loads lawcat on demand
- will be picking up dossier field dropdown next week, as per request by Lucas.
* standup 23-10-18
- started dossier type dropdown field
- proper release dossier
- loose ends:
-- validation
-- ui  
-- github came late

* 26-6-2018 missing translation keys in prod (added today)
  admin/updated at
admin/enter label
admin/weet je zeker dat je het goede group hebt geselecteerd. Dit kan niet ongedaan gemaakt worden. Nee ook niet later!
admin/help-dossier-type-fields
admin/cloned!!
admin/department
admin/german
admin/not-finished
admin/english
admin/at
admin/text
admin/phone
admin/<No value>
admin/missing en
admin/name format
admin/filter
admin/no logo
admin/password-validity-period-help
admin/this will attempt to delete this dossier type on the server. However if there are any dossiers created with this dossier-type (even if subsequently deleted) this will not succeed.
admin/table-of-contents
admin/answer-history
admin/copy DC dossier type
admin/help-dossier-type-name-format
admin/dossier blocks
admin/no
admin/questions-and-answers
admin/select a dossier type to edit.
admin/department:
admin/dossier types
admin/users
admin/dossier statuses
admin/document-timestamps
admin/department Description (About *department*)
admin/name
admin/cancel
admin/notes
admin/company
admin/dE
admin/this group has not got any dossier types yet
admin/please save record(s) first before changing group.
admin/click link to _update_ checklist templates of user from Text & Toelichting. Will open in a new tab. Make sure to be logged into <https://digitalechecklisten.nl> already.
admin/no value
admin/error
admin/close
admin/candidate Description (About you)
admin/m
admin/enter dossier type name
admin/password-validity-help
admin/coupled-users
admin/not-filled-in-answers
admin/sharing disabled
admin/updated by
admin/me
admin/email
admin/type a status
admin/violation-timestamps
admin/hidden
admin/dossier name
admin/id
admin/create
admin/password validity period (days)
admin/not-applicable-answers
admin/sharing enabled
admin/tasks
admin/done
admin/last modified first


admin/created-by
admin/de
admin/clone
admin/checklist statuses
admin/drag regular field type here
admin/sort
admin/nl
admin/unresolved
admin/documents
admin/created at
admin/pdf options
admin/sync with Tekst & Toelichting:
admin/checklists
admin/translations
admin/fields
admin/from selected
admin/solved-violation-timestamps
admin/dossiers
admin/stay
admin/password-validity-retention-help
admin/missing translations:
admin/remarks
admin/select a company
admin/select group
admin/created by
admin/log out
admin/frontpage-date
admin/dossier Types
admin/gender
admin/empty-page
admin/this will remove this new dossier type. It does not yet exist on the server so will just be removed in the frontend.
admin/newest first
admin/female
admin/dossier type name
admin/are you sure you want to delete this dossier type?
admin/a group admin has special rights to administer the group, such as creating and editing dossier types
admin/delete
admin/checklist Templates
admin/document-remark-timestamps
admin/f
admin/new
admin/job Offers
admin/key
admin/new subdossier type
admin/password validity retention time (days)
admin/from cloned
admin/select locale
admin/???
admin/an inactive user cannot be coupled to a dossier or checklist, and is not visibile in the list. Current couplings still exist and the user can still login.
admin/front-page
admin/title
admin/violations
admin/descriptions
admin/select first

admin/just go to the group's dossier type page
admin/reset
admin/select a record to edit.
admin/value-answers
admin/pDF Options
admin/password-complexity-help
admin/password complexity requirements
admin/date
admin/a deleted user cannot log in anymore. Is also deleted from the list for coupled users for dossiers and checklists.
admin/are you sure you want to delete this record?
admin/drag here to remove
admin/male
admin/some records have still unsaved changes. If you change page you will have to come back later to this page to save them.
admin/save
admin/missing nl
admin/help-dossier-type-statuses
admin/drag location field type here
admin/locations
admin/new group!
admin/companies
admin/en
admin/this will remove this new record. It does not yet exist on the server so will just be removed in the frontend.
admin/contacts
admin/group
admin/solved-violations
admin/password validity
admin/help-dossier-type-blocks
admin/all groups
admin/remark-timestamps
admin/offer Description (We offer)
admin/dossier-fields
admin/search
admin/info
admin/new dossier type
admin/select from DC
admin/string
admin/support Questions
admin/this will attempt to delete this record on the server.
admin/url
admin/tekst & Toelichting ID
admin/procedure Description (Interested?)
admin/active
admin/document-remarks
admin/you've got unsaved records!!
admin/deleted
admin/ok
admin/unresolved first
admin/select a group
admin/summary
admin/published
admin/nL
admin/dutch
admin/please type a dossier type name
admin/resolved
admin/location
admin/missing de
admin/inactive
admin/groups
admin/dC Description (About us)
admin/password expires at
admin/change page, come back later to save
admin/eN
admin/group admin
admin/help-dossier-type-active
admin/saving
admin/select to edit
* standup 30-10-018
Cleaning up attics:
- Generic read (done)
  Basically db->tree, with hooks instead of some hairy generic read method. 
- Generic saving,  (in progress)
Displaying and saving and undo/redo/is-dirty and dealing with backend responses for records with joins
(and subjoins etc). This was up till now dealt with for each instance of saving
records with joins.
- Generic post-remote 
You can deal with response of remote to a transaction in a post-remote
multimethod. You return a kinda map of instructions to the reconciler currently.
That should be pulled out of bilby.reconciler.core making this ns much more basic.

Basically all this is to prevent complexity to grow out of hand as bilby gets
more and more features.
* standup 22-11-18
Some SD issues yesterday.
Setting up backend env for editing templates per group
Thinking/Working on migration of current data to per group.




Michiel van Rosenberg.

* merge templates with supergroups conflicts
Auto-merging test/clj/database/table/group_test.clj
DONE (content): Merge conflict in test/clj/database/table/group_test.clj
Auto-merging src/frontend/reconciler/parser/mutate_dossier_type.cljs
DONE (content): Merge conflict in src/frontend/reconciler/parser/mutate_dossier_type.cljs
Auto-merging src/frontend/reconciler/parser/mutate.cljs
Auto-merging src/frontend/reconciler/parser/is_dirty.cljs
DONE (content): Merge conflict in src/frontend/reconciler/parser/is_dirty.cljs
Aut Version supergroups of src/cljs/app/page_config.cljs left in tree.
Auto-merging src/clj/parser/mutate.cljc
DONE (content): Merge conflict in src/clj/parser/mutate.cljc
Auto-merging src/clj/event_store/create.cljc
Auto-merging src/clj/dc_admin/backend/app/config.clj
Auto-merging src/clj/database/query_hooks.cljc
Auto-merging src/clj/database/queries.clj
Auto-merging src/clj/database/config.cljc
DONE (content): Merge conflict in src/clj/database/config.cljc
Auto-merging src/clj/app/translation_keys.cljc
DONE (content): Merge conflict in src/clj/app/translation_keys.cljc
Auto-merging src/clj/app/core.clj
DONE (modify/delete): src-bilby/cljs/bilby/util.cljc deleted in HEAD and modified in supergroups. Version supergroups of src-bilby/cljs/bilby/util.cljc left in tree.
DONE (modify/delete): src-bilby/cljs/bilby/reconciler/core.cljs deleted in HEAD and modified in supergroups. Version supergroups of src-bilby/cljs/bilby/reconciler/core.cljs left in tree.
DONE  (modify/delete): src-bilby/clj/bilby/security.cljc deleted in HEAD and modified in supergroups. Version supergroups of src-bilby/clj/bilby/security.cljc left in tree.
DONE (modify/delete): src-bilby/clj/bilby/parser.cljc deleted in HEAD and modified in supergroups. Version supergroups of src-bilby/clj/bilby/parser.cljc left in tree.
CONFLICT (modify/delete): src-bilby/clj/bilby/database/process_params.cljc deleted in HEAD and modified in supergroups. Version supergroups of src-bilby/clj/bilby/database/process_params.cljc left in tree.
Auto-merging release-notes.md
DONE (content): Merge conflict in release-notes.md
Auto-merging mvn-deps.edn
DONE (content): Merge conflict in mvn-deps.edn
Auto-merging git-deps.edn
DONE (content): Merge conflict in git-deps.edn
Auto-merging doc/notes.org
DONE (content): Merge conflict in doc/notes.org
Auto-merging build.boot
DONE (content): Merge conflict in build.boot
Auto-merging bin/install-git-deps.sh
DONE (content): Merge conflict in bin/install-git-deps.sh
Auto-merging bin/boot-dev-with-git-checkouts.sh
DONE (content): Merge conflict in bin/boot-dev-with-git-checkouts.sh
Automatic merge failed; fix conflicts and then commit the result.
