* supergroups
Groups get a flag whether they're a supergroup or not.
A group admin gets the role of supergroup-admin if his group has the supergroup
flag set. This is used for validation/permissions purposes
front and back end, and also for ui concerns/behaviour in front end.
At the moment a DC user (group 10) gets automatically super-admin role, and
based on that allowable props to read/update/create, and scope for read are set and
validations performed.
A group admin has different crud props and validations applied to him. Scope is
for instance [:where [:group_id := u/group-id]]. Where u/group-id is the
group-id of the current user, the group admin. Frontend asks for the same data,
however only gets groups, or dossier types, or users belonging to the current
user's group.
So everything is in place for supergroup-admins as well. We just need to
determine whether a group-admin is a supergroup-admin (we look at the supergroup
flag on the group he's from), and what other groups he's got access to (any
group created by a supergroup-admin automatically get their group-id set the
supergroup's id).

Before we do anything in the parser we add the current user to the environment.
Here we add for instance the role prop to a user. Here is also where I fetch all
the subgroup ids of the user's group, and add that to the user's prop if he's a
group-admin.

Then for supergroup-admin I adjust the scope to [:where [:group-id :in
:u/subgroup-ids]] for the various tables like dossier types, users, etc.

And that's basically it. If you look at a supergroup's data in the ui you'll see
a list of subgroups. If you look at a subgroup you see what supergroup it
belongs to.

If a group-admin of a supergroup logs in they will see what service desk sees,
and can do what they do, limited to the supergroup and the subgroups.

It becomes then a matter of finetuning permissions and validations. And making
sure everything is robust enough.

This does not affect DC app at all. It works as it did before. You just give a
supergroup-admin to administer some more groups instead of having to go through
DC's service desk.
* backend response format
{:value {...}
 :status :ok/:error
 :table-data {...}
 :original-table-data {...}}

:status
can be :ok or :error. In the case of error one of the keys queried for
threw an error. Value of the key will be the error data.

:table-data
will always have data as stored in the database, in other words it's
a subset of data in the database, this can be data as linked in to in a
(normalized) query result, data as queried for in save-record post-save

:original-table-data
server table data after a failed mutation, potentially useful to repair frontend version of data

:value
is whatever the query/mutation returned in the backend

In the case of a mutation :value will have this format:
{mutation-symbol {:error {:stacktrace :not-returned
                          :context {...}
                          :message "..." }
                 :keys [..]}
                 :tempids [..]}

Any of tempids, keys and error is optional.

keys is a hint of the server for rerender, for affected table data.

In the case of error, for a mutation, the error message will the in the map for
the mutation symbol. For an error in reading a key, the error will be under the
key. However reading is pretty forgiving in general.

If there's an error in either reading or mutating for any key status will set to :error

* post-remote
Every mutation can return in the response map, besides entries for :action and
any remote keys, also an entry for :post-remote. This should be a function and
it will be called with the result of the specific mutation on the backend. Usually this
will be just a map with possibly :keys and :tempids entries. However in case of
an error backend can add (which it usually does) an entry for :error. This is
the place to do any cleanup or post remote action.

The post-remote function should return a map looking like:

{:keys keys ;;hints for om-next to rerender certain components
 :value value ;;You can any map here you want to, gets merged with app-state
 :table-data ;;gets merged-with app-state
 :records-to-process [] ;;a vector of maps with instructions on processing individual records
}

The result of the post remote gets deep merged with the complete response from the server
for the complete query.

The records-to-process vector doesn't get processed till _after_ value and
table-data are merged with app-state

records-to-process maps should look like this:

{:table :some-table :id <some-record-id>
 :reset-history? <boolean> ;;wipes history in meta of record (:next-uuid :uuid :uuid-trail)
 :synced? <boolean> ;;whether to wipe :record key in meta of record
 :dissoc-key :some-key ;;dissoc's key from record
 :recalc-is-dirty? <boolean> ;;whether to recalcuate is dirty for the record
}

Keys returned from mutations are all queued for rerender.

TODO:
- Just use one key to merge with app-state, not value AND table-data
- The records-to-process is a leftover from before there was post-remote, this
  functionality should be pulled out of the reconciler and just made into util
  fns, to be called and used in the post-remote fn for the mutation.

NOTE:
Reconciler does some nifty thing where it reapplies user edits to records after
response is merged. Since response and the post remote could be clobbering these
edits we take note of them, and then reapply them when all merging is done.

* run tests in frontend in the app itself on src change:
In dev mode you can run frontend tests on change of src. In debug drawer there's
also a button to run the tests. You can turn this running of tests on src change
on and off with a checkbox in the debug drawer.
App bar will be red if tests don't pass.



* shadow-translations
  The query for the translation form contains a key :translation (join to shadow translation).
  This join has {:set-params :selected-group} as params. See app-state. In
  effect the joins params are altered so that the shadow-translation for the group is queried for.
  Problem is to only sent this query to the backend if we haven't loaded the
  shadow translation for the group yet for the root translation.

  In reconciler.core we've added a pre-merge hook which picks up any
 translations just loaded, and if they have a translation prop (so we queried
 for shadow translation for the translation) we add the shadow translation to
 the :client/shadow-translation prop of the translation.
 If the :translation prop exists but it's not populated (empty vector) we create
 a new client side shadow translation and add that instead to the
 :client/shadow-translations prop.

In app-state the read hook :selected-remote-keys fn is set. Here we override the
default bilby read for a selected item. As normal, we add a key to the remote
for the translation if it doesn't exist in the translation we have already. But
we only send the :translation key (the shadow translation) to the remote if we
haven't got a shadow translation yet for the current group.

For local reading purposes we also define the :update-selected-value hook where
we denormalize the ;client/shadow-translations prop.

Then in the template we pick the shadow translation for the current group. Or
none if no group is selected.

This way we can freely switch between translations and groups and still only do
minimal querying of the backend.

Since both the app and the translation page can get translations, including
their shadow translations we have a pre-merge-hook in reconciler.core where we
gather up any (shadow) translation joins and add them to a
:client/shadow-translations key on the root translation. Normally this only has
the translations for the user's group. However when we edit the shadow
translations for various groups (as super-admin or supergroup-admin) this vector
will contain more than one shadow translation (for the various groups). When we
build the translation-map in reconciler.parser.read we pick the right one by
group. Same when we render the translation page. If we have a group selected and
we need to know what shadow translation we should display we pick the right one
from the shadow translations (as parsed and read into props of the component
because we got a client only query :client/shadow-translations on the list and
form queries).

* icons
Icon classes like icon-cached, icon-undo, icon-redo etc are  defined in
mui-icons.css

This is a generated file on
https://icomoon.io/app/#/select

Click "Import icons" and select icomoon.svg in the
bilby/resources/admin_new/fonts directory. This adds currently used icons in the
app to the selectable icons. Select all imported icons.

Select any extra icons you want and then click "Generate Font". It exports a zip
file which includes currently used icons in app, plus any other you've addded..

Put the files in the fonts directory in bilby/resources/admin_new/fonts,
replacing the files that are already there.

Replace the contents of mui-icons.css with the css in style.css.

* config
- when running bin/dev or boot dev in the dev-task there is
   (environ :env {:clj-env "dev"})
  This sets an env var which is picked up in app.environment. app.environment
  defines a fn that returns current environment. Which is called in app.config
  to decide on which config (dev-config, prod-config, staging-config or
  test-config) is used to build app.config/config var. The various configs have
  for ease of use a :clj-env key naming for what environment the config is for.

  As explained in the app.config ns itself, any env variable set on command line
  or set in profile.boot (using environ lib) will override any hardcoded setting
  in app.config. For this reason any keys in any config map will have to be
  scalar values. Because bash env vars are scalar values (numbers, strings etc).

  Of course when config map actually gets defined it's possible to build up
  submaps to be used in the app.

  When starting up a jar (eg bin/test-prod-jar) you will need to set the clj-env
  environment variable. There's a (environ :env {:clj-env "prod"}) in the build
  task, but this has only effect on the build. Not the running of the program
  (when running the jar).

  Require app.config if you need settings [app.config :refer [config]]. However
  in om parser read and mutate methods the config is part of the env param
  passed in as :parser-config. Better to use that so it can be more easily
  mocked in tests.

  At top of app.config ns there is env-keys defined. This is a set of all
  settings that can be overridden/set on the commandline or profile.boot.

* (sql) validation
 Every call to the sql fn in the database.query ns by default is validated by
 calling the bilby validate-sql-fn multimethod. This dispatches on sql fn
 keyword. For all mutating sql queries as defined in the bilby.database.queries
 ns the proper validation fn is retrieved using security/get-validation-fun.
 This can be set in the database.config but if not the multimethod
 bilby.database.validate.core/validate multimethod is called, dispatching on
 role of the user, method (sql fn keyword) and table.

Idea is that for every hugsql fn added you will have to write a validate-sql-fun
 method otherwise it will just throw an exception when its called through
 database.query/sql. You can write an empty method, and then no validation is
 done. You can do validation right there and then, or you can retrieve an
 appropriate validation fn by calling security/get-validation-fun. You will
 probably wil have to add a fn to database.config or add an appropriate
 bilby.database.validate.core/validate method. Otherwise, again, an exception is
 thrown by default.
* sql process-params, process-result
In essence all the database.query/sql fn does is first call
bilby-process-params, then process-params on the params, call validate-sql then
call the actual hugsql fn and then call bilby-process-result and then
process-params on the result.

bilby-process-params does some built-in params processing, same for
bilby-process-result. Custom versions of these fns will be used if set in the
sql prop of env.

process-params does nothing by default, process-result just returns result as
passed in.

bilby.database.queries ns is used to resolve the hugsql fn

It's also possible to add an extra hugsql ns for resolving the sql fn.
(bilby-)process-params, (bilby-)process-result and validate-sql-fun are all
multimethods so you can add methods to deal with any extra hugsql fns.

process-params (and process-result) is handy for adding hooks. For instance for
the event-store. For more detail see also doc string of database.query/sql fn.
* Read permissions and create/update/delete permissions, and validations of om-queries
These are set in database.config namespace.
* frontend testing
- Run
    npm install
in bilby dir
- Run
   npm install -g karma-cli

Browser in memory sql options:
https://github.com/kripken/sql.js
https://github.com/agershun/alasql/wiki/Getting%20started

parser.core is now a cljc file, including all its deps
* Deciding on selected group
The app can be in a state where a group is 'selected'. In this state certain
pages (like users, translations) will manage records only from/for the selected
group. Some pages are immuun ie, they behave the same regardless of selected
group, like groups page itself, or job offers, or support questions. Other pages
only can only edit records of a particular group, like dossier types, pdf
options.

By default a selected group is the current user's group. But it can also be
set/derived from local/session storage (or from any state in the url
(unimplemented as of 7/18)). The app can be in a state of 'all groups' by
setting selected group-id to -1 or nil.

Complication is that on refresh, while we're logged in, we don't know what the
current user's group is since we don't have that info yet. One
massive query goes to the backend asking for the current user's data, and any other
data required for the current page. Solution for this is not to ask for any
specific group-id number, but for a property on the current user, so for
u/group-id in this case.

The backend resolves what user is actually making the massive initial query
before parsing the actual query itself. (This enables role based access, scoping
etc) The user is passed into the query parser, and any params that are
namespaced keywords are resolved against the user's map first.

We need to weave this variable group-id into the queries that go to the backend.
We're not using om-next dynamic queries at all, but instead give parameters to
query keys that are picked by the cljs query parser. These parameters are like
{:params :selected-group} for instance. The parser goes and looks for the
:selected-group entry in the :params value of the config for the current page.
This can be a map, in which case this is used as the params map for the key in
the query, or a fn. This fn is called with app-state and the result is used as
the params for query key.

All this is not very standardized actually, and there's parallel mechanisms
currently. We have one for batch queries: :batch-params and one for single
record queries: :params. Under a table entry for a page-config we have similar
entries for deciding on what remote keys to send (:selected-remote-keys and :batch-remote-keys).

In any case, initial group-id is set in reconciler.app-state, per page, where
it's usually set to whatever is :selected-group in storage, or if that's
desirable, u/group-id, meaning the user's group-id.

* Trying queries
In the dev source folder there are namespaces to try out various queries:
** try-om-query
You can call the backend parser with any om-next query. These are resolved
against the database as defined in app.config and using database.config as
defined for the whole app.

There is a second version where you can build your own parser environment and
your own parser with that again.
** Try sql query
To try out any sql query. Make sure to define process-params, validate-sql-fn
and process-result methods, and the equivalent sql fun in build-sql if you want
it to be used in mock mode or tests.
** Try/test frontend parser.
Frontend parser is a cljc file so you can eval this in a clojure repl. You can
test here what the parser returns for queries for the nil and various remote
targets, which is much harder to test/inspect if you have to use the ui to pass
queries to the parser.


* Start bilby with different ports and db:
DB_NAME=chin_dev_minimal SERVER_PORT=9080 NREPL_PORT=38401 RELOAD_PORT=46501 bin/dev
* pathopt
  https://awkay.github.io/om-tutorial/#!/om_tutorial.I_Path_Optimization
  Path Optimization
As your UI grows you may see warnings in the Javascript Console about slowness.
If you do, you can leverage path optimization to minimize the amount of work the
parser has to do in order to update a sub-portion of the UI.

If you pass :pathopt true to the reconciler, then when re-rendering a component
that has an Ident Om will attempt to run the query starting from that component
(using it's Ident as the root of the query). If your parser returns a result, it
will use it. If your parser returns nil then it will focus the root query to
that component and run it from root.

When it attempts this kind of read it will call your read function with
:query-root set to the ident of the component that is needing re-render, and you
will need to follow the query down from there. Fortunately, db->tree still works
for the default database format with a little care.

So om-next calls the parser, but the query will be a (focussed on the cmp) query
against the root of app-data. If you set pathopt to true and a cmp has an ident
and a query it will call the parser with the :query-root key of env to the
ident, and query to the query of the cmp, so the parser can work a bit faster.
Which I do in my parser read* fn

* Adding hooks for keys and joins in the root query for returning values and building remote query
** Principles
The standard read method of bilby is db->tree of om-next. This will return a
tree of data by applying the root query over the app-state. The stock om-next
db->tree fn has been extended in the following ways:

1. It's possible to define read methods for any key anywhere in the query. If
   you do you can then return anything you want for that key. You will get in
   the env the ast for the om-next expression (join or prop), the query if it's
   a join, context-data and (app-)state. Context data is the data relevant for
   the prop or join, which depends on where in the root query the key for the
   join or prop is. For instance the default way to resolve a prop is just to do
   (get context-data key). Default way to resolve a join is db->tree on the
   query and context-data (see bilby.reconciler.parser.key.route and the read
   method for [:value :route/*]).

2. The db->tree fn has been modified so that it instead of returning data it'll
   return the query again, but 'sparsified' when :sparsify-query? flag is set.
   By default if any data is found that part of the query is elided. But again
   you can add read methods to determine yourself if and what should be included
   for any key in the root query. In standard om you need to return a (possibly
   modified) ast. For these bilby read methods to work you return a (modified)
   query instead. Whatever you return will be included in the remote query. If
   you want to process and modify the ast you can you just do a (om/ast->query
   ast) when you're done editing it. You can also return true which will then
   result in the query being parsed further the standard db->tree way. Note that
   currently if the key is a prop only the truthiness of the return value is
   used. If truthy the return key is included, otherwise it isn't. Return the
   full query in case of a join. So for a read method for [:bilby :foo] you
   return {:foo [:some :query]}. If query had params you can add them again,
   possibly modified.

3. Read method is dispatched on key, or on [target key]. Second one takes
   preference over first. In the first instance you need to return a map such as
   {:value :some-value :bilby {:some-key [:some :query]}} similar to standard
   om-next read methods.

** Examples
*** VALUE example
The method (note the :value in the dispatch vector):

#+BEGIN_SRC clojure
(defmethod bilby/read [:value :bar] [{:keys [query context-data] :as env} key params] ...)
#+END_SRC

for a app state structure like this:

#+BEGIN_SRC clojure
{:foo {:bar {:k1 1 :k2 2}}}
#+END_SRC

and a root query of:

#+BEGIN_SRC clojure
[{:foo [{:bar [:k1 :k2 :k3]}]}]
#+END_SRC

receives env like this:

#+BEGIN_SRC clojure
{:query [:k1 :2]
 :context-data {:k1 1 :k2 2}
 :ast {:type :join, :dispatch-key :bar, :key :bar, :query [:k1 :k2],
       :children [{:type :prop, :dispatch-key :k1, :key :k1} {:type :prop, :dispatch-key :k2, :key :k2}]}
 ...
}
#+END_SRC

and should return for example this:

#+BEGIN_SRC clojure
{:k1 1 :k2 2}
#+END_SRC

*** REMOTE example
The method (note the :bilby in the dispatch vector):

#+BEGIN_SRC clojure
(defmethod bilby/read [:bilby :bar] [{:keys [query context-data] :as env} key params] ...)
#+END_SRC

for a app state structure like this:

#+BEGIN_SRC clojure
{:foo {:bar {:k1 1 :k2 2}}}
#+END_SRC

and a root query of:

#+BEGIN_SRC clojure
[{:foo [{:bar [:k1 :k2 :k3]}]}]
#+END_SRC

receives env like this:

#+BEGIN_SRC clojure
{:query [:k1 :k2 :k3]
 :context-data {:k1 1 :k2 2}
 :ast {:type :join, :dispatch-key :bar, :key :bar, :query [:k1 :k2],
       :children [{:type :prop, :dispatch-key :k1, :key :k1} {:type :prop, :dispatch-key :k2, :key :k2}]}
 ...
}
#+END_SRC

and should return for example this:

#+BEGIN_SRC clojure
{:bar [:k3]}
#+END_SRC

to create a remote query like this:

#+BEGIN_SRC clojure
[{:foo [{:bar [:k3]}]}]
#+END_SRC

If you want to keep the params (or add, or modify) return something like this:

#+BEGIN_SRC clojure
(cond-> {:bar [:k3]}
  (some? params (list params)
#+END_SRC


** Notes
- If you set ignore-hooks? to true db->tree will function as the standard om-next
db->tree, but by setting :sparsify-query? to true you can still also calculate
the remote query.

- In bilby.reconciler.parser.denormalize there's a comment block where you can
play around with db->tree. There's also the try-frontend-read ns.

- To see the whole process in all its glory set timbre-level to :debug in
app.config.cljs and set the chrome dev console to verbose output.

_ For read methods the parser is not available in the env, but db->tree is.

Use of that is simple:

#+BEGIN_SRC clojure
     (db->tree env {:query query ;;Apply this query
                    :data  data ;;to this data
                    :refs  app-data ;;looking up idents (refs) here.
                    :sparsify-query? false ;;Return the data, not a sparsified query
                    :ignore-hooks? false
})
#+END_SRC


* Have backend return calculated data

There are three ways to do this:

** Calculate something over a (sub)query
 Sometimes you want something to be calculated over a query and return not only
 the rows themselves, but also the extra data, such as total count. This is
 particularly tricky if you want to calculate something over a join. You want
 the joined rows, but also some more data over that particular subset of rows
 (joined as they are to the parent record).

 To do this add a :with-meta param key to the params of the query. Set this to a
 single keyword or map or a vector of them. If it's a map it should have at
 least a key :type, but you can then add more params for the calculation if you
 want.

 You can then extend the calc-meta-data multimethod from
 bilby.parser.calc-meta-data in the backend which is dispatched on those
 :with-meta keys, or the :type value if it's a map. The method is called after
 the original sql query has been done. The sql-fn called, its args and
 calc-params as passed fromt the frontend.

 #+BEGIN_SRC clojure
[{:group [({:user [:id :name]} {:with-meta [:count {:type :calc2 :some :params}]})]}]
#+END_SRC

#+BEGIN_SRC clojure
(defmethod calc-meta-data :count
  [env rows {:keys [sql-fn sql-fn-args return-empty-vector? join-type calculation-params]}]
  ;;Do your calculation here
   )
#+END_SRC

One thing to take note of is that the return value for this query will be now of
the form:

#+BEGIN_SRC clojure
{:rows [[:id 1 :name "foo"]] :meta {:count 123}}
#+END_SRC

Which means you will have to take this into account when this data arrives at
your component, and/or when you implement the read method for the join with the
:with-meta param.

** Define a read key in the backend

Such as:

#+BEGIN_SRC clojure
(defmethod bilby/read :calc/count
  [{:keys [user state parser query parser-config] :as env} _
   {:keys [table where] :as params}]
  ;;You can use the query to decide on what to calculate perhaps
  (timbre/info query) ;;=> [:count]
  {:value {:count (count-records env params)}})
#+END_SRC

Then add a query to a component:

#+BEGIN_SRC clojure
({:calc/count [:count]} {:table :user
                         :where [:id :< 5]})
#+END_SRC

Disadvantage of this method is that you can only use this query as a root query
or quasi root query. Also you have to possibly duplicate the params of this query in the
frontend from another query. And this isn't useful for a joined query.

** Redirect a read to a custom-read
Used search translations. Idea is to set a :custom-read key in the params of a
query. Backend will use the read method as set to the :custom-read key and pass
in the rest of params as well.

Advantage of this is that you can redirect a query for a join to your own read
method. Where you can then return a calculated value, any rows queried for
and/or any other data you like.

#+BEGIN_SRC clojure
(defmethod bilby/read :count-records
  [{:keys [user state parser query parser-config] :as env} _
   {:keys [table where] :as params}]
  {:value (count-records env params)})
#+END_SRC

With this query:

#+BEGIN_SRC clojure
'({:user-count [:count]} {:custom-read :count-records
                          :table :user
                          :where [:id :< 5]})
#+END_SRC


* invalidation
On save of eg a dossier type:
(bu/get-key-in-page-state @state :dossier-type :validate)
invalidated-fields (bu/calc-invalidations dossier-type validate)

(if (seq invalidated-fields)
  (bu/set-key-in-page-state state :dossier-type :invalidated-fields invalidated-fields))

So on save you fetch validate map for the relevant record type
You give the record and the validate map to calc-invalidations

For every key in record calc-invalidations calls the validated? fn of the value
map of the same key in the validate map and sets the [:invalidated? :prop] key in the
validate map to true and returns it.

So in page-state:

#+BEGIN_SRC clojure
{:route/dossier-types {:table {:dossier-type {:validate {:name validate-name-map
                                                         :some-other-prop validate-some-other-prop}
                                               :invalidated-fields {:name {:invalidated? {} :message ""}
}}}}
#+END_SRC

You then set a key called :invalidated-fields in page state to that validate
map. Which you can pick up in your components and use it to modify the ui if
needed (show in red, show error message etc)
